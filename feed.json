{
    "version": "https://jsonfeed.org/version/1",
    "title": "Learning-Sharing-Recording",
    "description": "CV Engineer",
    "home_page_url": "https://LZQ-CV.github.io",
    "items": [
        {
            "id": "https://lzq-cv.github.io/2025/09/26/%E6%9C%BA%E5%99%A8%E8%A7%86%E8%A7%89%E7%A1%AC%E4%BB%B6%E5%A6%82%E4%BD%95%E9%80%89%E5%9E%8B/",
            "url": "https://lzq-cv.github.io/2025/09/26/%E6%9C%BA%E5%99%A8%E8%A7%86%E8%A7%89%E7%A1%AC%E4%BB%B6%E5%A6%82%E4%BD%95%E9%80%89%E5%9E%8B/",
            "title": "机器视觉硬件如何选型",
            "date_published": "2025-09-26T10:08:56.000Z",
            "content_html": "<h1 id=\"机器视觉硬件选型指南\"><a href=\"#机器视觉硬件选型指南\" class=\"headerlink\" title=\"机器视觉硬件选型指南\"></a>机器视觉硬件选型指南</h1><h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>机器视觉硬件选型是为特定的机器视觉应用需求，从众多硬件组件中科学地挑选出最合适的相机、镜头、光源、处理器及其他辅助设备的过程。其核心目标是构建一套能稳定、精确、高效地完成指定视觉任务（如检测、测量、识别、定位等）的硬件系统。</p>\n<hr>\n<h2 id=\"核心组件选型\"><a href=\"#核心组件选型\" class=\"headerlink\" title=\"核心组件选型\"></a>核心组件选型</h2><h3 id=\"相机\"><a href=\"#相机\" class=\"headerlink\" title=\"相机\"></a>相机</h3><h4 id=\"类型\"><a href=\"#类型\" class=\"headerlink\" title=\"类型\"></a>类型</h4><ul>\n<li><strong>面阵相机</strong>：最常用，适用于静止或连续运动的物体成像（如传送带）<ul>\n<li>选型重点：分辨率、帧率、传感器尺寸、像元尺寸、快门类型</li>\n</ul>\n</li>\n<li><strong>线阵相机</strong>：适用于高速连续运动物体或需要超高分辨率的场景（如卷材检测、印刷检测）<ul>\n<li>选型重点：行频、分辨率（线数）、传感器长度、像元尺寸、行曝光时间控制</li>\n</ul>\n</li>\n<li><strong>区域扫描相机</strong>：即面阵相机</li>\n<li><strong>3D相机</strong>：用于获取深度信息（如体积测量、引导抓取）<ul>\n<li>技术包括：双目立体视觉、结构光、激光三角测量、飞行时间</li>\n<li>选型重点：精度、量程、点云密度、抗环境光能力、速度</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"传感器技术\"><a href=\"#传感器技术\" class=\"headerlink\" title=\"传感器技术\"></a>传感器技术</h4><ul>\n<li><strong>CMOS</strong>：主流技术，性价比高，速度快，功耗低，抗拖影能力好，支持全局快门或卷帘快门</li>\n<li><strong>CCD</strong>：成像质量（尤其是低照度、均一性）通常优于CMOS，但速度慢、功耗高、成本高、易产生拖影，逐渐被CMOS取代</li>\n</ul>\n<h4 id=\"分辨率\"><a href=\"#分辨率\" class=\"headerlink\" title=\"分辨率\"></a>分辨率</h4><ul>\n<li>根据检测精度要求计算：<code>所需最小像素数 = (待测特征尺寸 / 检测精度要求) × 2</code>（满足奈奎斯特采样定理）</li>\n<li>示例：检测0.1mm缺陷，精度要求0.05mm，则单个特征至少需要 <code>(0.1 / 0.05) × 2 = 4</code> 个像素覆盖</li>\n<li>避免过度追求高分辨率：增加成本、降低帧率、增大数据量</li>\n</ul>\n<h4 id=\"帧率\"><a href=\"#帧率\" class=\"headerlink\" title=\"帧率\"></a>帧率</h4><ul>\n<li>计算公式：<code>所需最小帧率 = (物体移动速度 / 相机视野内允许的最大物体位移)</code></li>\n<li>高帧率需求：高速运动物体检测、需要捕捉快速瞬变过程</li>\n</ul>\n<h4 id=\"快门类型\"><a href=\"#快门类型\" class=\"headerlink\" title=\"快门类型\"></a>快门类型</h4><ul>\n<li><strong>全局快门</strong>：所有像素同时曝光，适合拍摄运动物体，无运动模糊（工业应用首选）</li>\n<li><strong>卷帘快门</strong>：像素逐行曝光，拍摄运动物体时会产生果冻效应</li>\n</ul>\n<h4 id=\"接口\"><a href=\"#接口\" class=\"headerlink\" title=\"接口\"></a>接口</h4><ul>\n<li><strong>GigE Vision</strong>：主流，性价比高，线缆长（可达100m）</li>\n<li><strong>USB3 Vision</strong>：即插即用方便，带宽高，但线缆短（&lt;5m）</li>\n<li><strong>Camera Link</strong>：传统高速接口，需要专用采集卡</li>\n<li><strong>CoaXPress</strong>：新兴高速接口，带宽极高，线缆长，抗干扰强</li>\n<li><strong>MIPI</strong>：主要用于嵌入式系统</li>\n</ul>\n<h4 id=\"色彩\"><a href=\"#色彩\" class=\"headerlink\" title=\"色彩\"></a>色彩</h4><ul>\n<li><strong>黑白</strong>：灵敏度高，分辨率高，速度快，成本低</li>\n<li><strong>彩色</strong>：用于需要区分颜色的应用，需注意拜耳滤镜带来的分辨率和灵敏度损失</li>\n</ul>\n<h4 id=\"其他特性\"><a href=\"#其他特性\" class=\"headerlink\" title=\"其他特性\"></a>其他特性</h4><ul>\n<li>传感器尺寸：影响视野和景深</li>\n<li>像元尺寸：影响分辨率和灵敏度</li>\n<li>灵敏度&#x2F;量子效率：在低光照条件下尤其重要</li>\n<li>动态范围：反映相机同时捕捉亮部和暗部细节的能力</li>\n</ul>\n<hr>\n<h3 id=\"镜头\"><a href=\"#镜头\" class=\"headerlink\" title=\"镜头\"></a>镜头</h3><h4 id=\"焦距\"><a href=\"#焦距\" class=\"headerlink\" title=\"焦距\"></a>焦距</h4><ul>\n<li>计算公式：<code>焦距 f ≈ (传感器尺寸 × 工作距离) / 视野</code></li>\n<li>根据视野和工作距离计算所需焦距范围</li>\n</ul>\n<h4 id=\"光圈\"><a href=\"#光圈\" class=\"headerlink\" title=\"光圈\"></a>光圈</h4><ul>\n<li><strong>大光圈</strong>：进光量大，适合低照度环境，但景深小</li>\n<li><strong>小光圈</strong>：景深大，适合有一定厚度或不在同一平面的物体</li>\n<li>F值越小，光圈越大</li>\n</ul>\n<h4 id=\"接口-1\"><a href=\"#接口-1\" class=\"headerlink\" title=\"接口\"></a>接口</h4><ul>\n<li>必须与相机接口匹配</li>\n<li>常见工业接口：C口（最普遍）、CS口、F口、M42、M58等</li>\n</ul>\n<h4 id=\"分辨率-1\"><a href=\"#分辨率-1\" class=\"headerlink\" title=\"分辨率\"></a>分辨率</h4><ul>\n<li>镜头的解析能力必须匹配相机的分辨率</li>\n<li>镜头分辨率用MTF曲线表示，应略高于传感器需求</li>\n</ul>\n<h4 id=\"畸变\"><a href=\"#畸变\" class=\"headerlink\" title=\"畸变\"></a>畸变</h4><ul>\n<li>高精度测量应用需选择低畸变镜头（&lt;0.1%）</li>\n</ul>\n<h4 id=\"类型-1\"><a href=\"#类型-1\" class=\"headerlink\" title=\"类型\"></a>类型</h4><ul>\n<li><strong>定焦镜头</strong>：最常见，性价比高</li>\n<li><strong>变焦镜头</strong>：焦距可调，灵活性高</li>\n<li><strong>远心镜头</strong>：精密测量必备，消除透视误差</li>\n<li><strong>微距镜头</strong>：专为高倍率、短工作距离设计</li>\n<li><strong>液态镜头</strong>：通过电压控制焦距，实现毫秒级自动对焦</li>\n</ul>\n<hr>\n<h3 id=\"光源\"><a href=\"#光源\" class=\"headerlink\" title=\"光源\"></a>光源</h3><h4 id=\"目的\"><a href=\"#目的\" class=\"headerlink\" title=\"目的\"></a>目的</h4><p>突出被测特征，抑制背景干扰，提高对比度，保证成像稳定性和一致性</p>\n<h4 id=\"类型（LED光源为主）\"><a href=\"#类型（LED光源为主）\" class=\"headerlink\" title=\"类型（LED光源为主）\"></a>类型（LED光源为主）</h4><ul>\n<li><strong>环形光</strong>：通用性好，提供漫射光，减少阴影</li>\n<li><strong>条形光</strong>：用于长条状物体或需要定向照明</li>\n<li><strong>背光源</strong>：轮廓检测、透明物体杂质检测</li>\n<li><strong>同轴光</strong>：检测光滑平面上的划痕、凹凸</li>\n<li><strong>穹顶光</strong>：提供均匀漫射光，消除反光</li>\n<li><strong>点光源&#x2F;线光源</strong>：用于特殊角度照明</li>\n<li><strong>结构光</strong>：投射特定图案用于3D测量</li>\n</ul>\n<h4 id=\"颜色选择\"><a href=\"#颜色选择\" class=\"headerlink\" title=\"颜色选择\"></a>颜色选择</h4><ul>\n<li>选择能最大化目标特征与背景对比度的颜色</li>\n<li>互补色原理：物体颜色与光源颜色互为补色时对比度最高</li>\n<li>单色光常能提高对比度</li>\n</ul>\n<h4 id=\"照明方式\"><a href=\"#照明方式\" class=\"headerlink\" title=\"照明方式\"></a>照明方式</h4><ul>\n<li><strong>明场照明</strong>：光线反射进入镜头</li>\n<li><strong>暗场照明</strong>：光线以低角度照射，用于检测划痕、凹凸、纹理</li>\n<li><strong>透射照明</strong>：即背光</li>\n</ul>\n<hr>\n<h3 id=\"图像采集卡\"><a href=\"#图像采集卡\" class=\"headerlink\" title=\"图像采集卡\"></a>图像采集卡</h3><h4 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h4><p>对于需要Camera Link或CoaXPress接口的相机，采集卡负责将高速图像数据传输到PC内存</p>\n<h4 id=\"选型要点\"><a href=\"#选型要点\" class=\"headerlink\" title=\"选型要点\"></a>选型要点</h4><ul>\n<li>接口类型和带宽必须匹配相机</li>\n<li>通道数：支持单相机或多相机</li>\n<li>内存：板载内存大小影响传输稳定性</li>\n<li>I&#x2F;O支持：触发输入&#x2F;输出、编码器输入等</li>\n<li>软件兼容性</li>\n</ul>\n<hr>\n<h3 id=\"处理器-工控机\"><a href=\"#处理器-工控机\" class=\"headerlink\" title=\"处理器&#x2F;工控机\"></a>处理器&#x2F;工控机</h3><h4 id=\"CPU\"><a href=\"#CPU\" class=\"headerlink\" title=\"CPU\"></a>CPU</h4><p>选择性能强劲的多核处理器（Intel Core i5&#x2F;i7&#x2F;i9, Xeon）</p>\n<h4 id=\"内存\"><a href=\"#内存\" class=\"headerlink\" title=\"内存\"></a>内存</h4><ul>\n<li>推荐16GB起步</li>\n<li>复杂应用需要32GB甚至更多</li>\n</ul>\n<h4 id=\"存储\"><a href=\"#存储\" class=\"headerlink\" title=\"存储\"></a>存储</h4><p>SSD固态硬盘（NVMe更好）用于快速启动和存储</p>\n<h4 id=\"GPU\"><a href=\"#GPU\" class=\"headerlink\" title=\"GPU\"></a>GPU</h4><p>对于深度学习应用、复杂的3D点云处理非常关键</p>\n<h4 id=\"操作系统\"><a href=\"#操作系统\" class=\"headerlink\" title=\"操作系统\"></a>操作系统</h4><ul>\n<li>Windows 10&#x2F;11 IoT Enterprise LTSC（工业推荐）</li>\n<li>Linux（开源，定制性强）</li>\n</ul>\n<hr>\n<h3 id=\"其他硬件\"><a href=\"#其他硬件\" class=\"headerlink\" title=\"其他硬件\"></a>其他硬件</h3><h4 id=\"光学滤镜\"><a href=\"#光学滤镜\" class=\"headerlink\" title=\"光学滤镜\"></a>光学滤镜</h4><ul>\n<li><strong>偏振片</strong>：消除眩光、反光</li>\n<li><strong>带通&#x2F;窄带滤光片</strong>：抑制环境光干扰</li>\n<li><strong>中性密度滤光片</strong>：防止过曝</li>\n</ul>\n<h4 id=\"传感器-编码器\"><a href=\"#传感器-编码器\" class=\"headerlink\" title=\"传感器&#x2F;编码器\"></a>传感器&#x2F;编码器</h4><p>用于提供物体位置信号触发相机&#x2F;光源</p>\n<h4 id=\"I-O模块\"><a href=\"#I-O模块\" class=\"headerlink\" title=\"I&#x2F;O模块\"></a>I&#x2F;O模块</h4><p>连接PLC、传感器、执行器等自动化设备</p>\n<h4 id=\"防护罩-机械支架\"><a href=\"#防护罩-机械支架\" class=\"headerlink\" title=\"防护罩&#x2F;机械支架\"></a>防护罩&#x2F;机械支架</h4><p>保护设备，确保安装稳固</p>\n<hr>\n<h2 id=\"关键选型考量因素\"><a href=\"#关键选型考量因素\" class=\"headerlink\" title=\"关键选型考量因素\"></a>关键选型考量因素</h2><h3 id=\"应用需求\"><a href=\"#应用需求\" class=\"headerlink\" title=\"应用需求\"></a>应用需求</h3><ul>\n<li>检测目标（尺寸、缺陷、有无、定位等）</li>\n<li>精度要求（亚像素级？微米级？毫米级？）</li>\n<li>速度要求（产线节拍）</li>\n<li>视野大小和工作距离</li>\n<li>被测物体特性（材质、颜色、表面反光性等）</li>\n<li>环境条件（温度、湿度、粉尘、振动等）</li>\n</ul>\n<h3 id=\"性能指标\"><a href=\"#性能指标\" class=\"headerlink\" title=\"性能指标\"></a>性能指标</h3><p>基于应用需求推导出的具体参数：分辨率、帧率、景深、曝光时间等</p>\n<h3 id=\"成本预算\"><a href=\"#成本预算\" class=\"headerlink\" title=\"成本预算\"></a>成本预算</h3><p>在满足性能要求的前提下，平衡各组件成本</p>\n<h3 id=\"系统集成与兼容性\"><a href=\"#系统集成与兼容性\" class=\"headerlink\" title=\"系统集成与兼容性\"></a>系统集成与兼容性</h3><ul>\n<li>各组件之间的兼容性</li>\n<li>与现有自动化设备的通信接口</li>\n<li>视觉软件的选择</li>\n</ul>\n<h3 id=\"可靠性与维护\"><a href=\"#可靠性与维护\" class=\"headerlink\" title=\"可靠性与维护\"></a>可靠性与维护</h3><p>工业环境要求硬件具有高可靠性和长寿命</p>\n<h3 id=\"供应商支持与服务\"><a href=\"#供应商支持与服务\" class=\"headerlink\" title=\"供应商支持与服务\"></a>供应商支持与服务</h3><p>良好的技术支持和售后服务至关重要</p>\n<hr>\n<h2 id=\"选型流程建议\"><a href=\"#选型流程建议\" class=\"headerlink\" title=\"选型流程建议\"></a>选型流程建议</h2><ol>\n<li><strong>明确定义需求</strong>：详细列出所有应用要求、目标和约束条件</li>\n<li><strong>计算核心参数</strong>：分辨率、帧率、工作距离和景深</li>\n<li><strong>初步选择相机</strong>：基于分辨率、帧率、接口等筛选</li>\n<li><strong>选择镜头</strong>：基于相机传感器尺寸、工作距离、视野计算焦距</li>\n<li><strong>设计光源方案</strong>：确定光源类型、颜色、照明方式</li>\n<li><strong>选择处理器&#x2F;工控机</strong>：根据算法复杂度、图像数据量选择配置</li>\n<li><strong>选择其他组件</strong>：采集卡、光源控制器、滤镜等</li>\n<li><strong>验证与测试</strong>：搭建原型系统进行实际测试</li>\n<li><strong>评估供应商与成本</strong>：综合评估技术指标、价格、服务等</li>\n<li><strong>最终决策与采购</strong></li>\n</ol>\n<hr>\n<h2 id=\"选型案例：手机屏缺陷检测\"><a href=\"#选型案例：手机屏缺陷检测\" class=\"headerlink\" title=\"选型案例：手机屏缺陷检测\"></a>选型案例：手机屏缺陷检测</h2><h3 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h3><ul>\n<li>检测6英寸手机屏表面划痕、脏污、亮点&#x2F;暗点</li>\n<li>精度要求：0.05mm缺陷</li>\n<li>产线速度：1秒&#x2F;片</li>\n</ul>\n<h3 id=\"计算\"><a href=\"#计算\" class=\"headerlink\" title=\"计算\"></a>计算</h3><ul>\n<li><strong>视野</strong>：略大于屏幕尺寸，约180mm × 90mm</li>\n<li><strong>精度</strong>：0.05mm缺陷 → 至少需要4个像素覆盖<ul>\n<li>单方向最小像素数 &#x3D; (180mm &#x2F; 0.05mm) × 2 &#x3D; 7200像素</li>\n<li>选择800万像素以上相机</li>\n</ul>\n</li>\n<li><strong>帧率</strong>：检测时间 &lt; 1秒，选择30fps相机较宽裕</li>\n</ul>\n<h3 id=\"选型方案\"><a href=\"#选型方案\" class=\"headerlink\" title=\"选型方案\"></a>选型方案</h3><ul>\n<li><strong>相机</strong>：高分辨率面阵CMOS全局快门相机，800万像素以上，GigE或USB3接口，黑白</li>\n<li><strong>镜头</strong>：远心镜头或低畸变定焦镜头，高分辨率</li>\n<li><strong>光源</strong>：同轴光或低角度条形光（暗场）突出划痕、脏污</li>\n<li><strong>处理器</strong>：性能较强的工控机（i7 CPU, 32GB RAM），配备GPU</li>\n<li><strong>其他</strong>：编码器触发相机抓拍，I&#x2F;O与PLC通信</li>\n</ul>\n",
            "tags": [
                "机器视觉"
            ]
        },
        {
            "id": "https://lzq-cv.github.io/2025/09/26/%E4%BD%BF%E7%94%A8PICGO-%E9%98%BF%E9%87%8C%E4%BA%91OSS%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/",
            "url": "https://lzq-cv.github.io/2025/09/26/%E4%BD%BF%E7%94%A8PICGO-%E9%98%BF%E9%87%8C%E4%BA%91OSS%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/",
            "title": "使用PICGO-阿里云OSS搭建个人图床",
            "date_published": "2025-09-26T10:06:31.000Z",
            "content_html": "<p>使用阿里云OSS和PicGo搭建图床，可以让你非常方便地将本地图片自动上传到云端，并直接获取可用于博客、文档等处的图片链接。阿里云OSS还可以申请3个月免费试用。</p>\n<h3 id=\"配置阿里云OSS\"><a href=\"#配置阿里云OSS\" class=\"headerlink\" title=\"配置阿里云OSS\"></a>配置阿里云OSS</h3><p>首先，我们需要在阿里云上创建存储空间（Bucket）并配置访问权限。</p>\n<ol>\n<li><p><strong>创建Bucket</strong></p>\n<ul>\n<li>登录阿里云控制台，进入<strong>对象存储OSS</strong>服务。</li>\n<li>点击<strong>创建Bucket</strong>，填写Bucket名称（全局唯一），选择离你较近的<strong>地域</strong>。</li>\n<li><strong>读写权限</strong>务必设置为<strong>公共读</strong>，这样图片才能被外部访问。其他选项如存储类型等，保持“标准存储”默认值即可。</li>\n</ul>\n</li>\n<li><p><strong>创建RAM子用户并授权</strong>（为了安全，不建议直接使用主账号AccessKey）</p>\n<ul>\n<li>进入<strong>访问控制RAM</strong>控制台。</li>\n<li>创建一个子用户（例如命名为 <code>picgo-user</code>），<strong>访问方式</strong>请勾选 <strong>“OpenAPI 调用访问”</strong> 。系统会自动为该子用户创建AccessKey（即AccessKey ID和AccessKey Secret），请务必妥善保存这两项信息，后续配置PicGo时需要用到。</li>\n<li>为这个子用户<strong>添加权限</strong>。建议直接授权系统策略 <code>AliyunOSSFullAccess</code>（管理对象存储服务OSS的权限），或者按需授予更小粒度的权限。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"安装与配置PicGo\"><a href=\"#安装与配置PicGo\" class=\"headerlink\" title=\"安装与配置PicGo\"></a>安装与配置PicGo</h3><p>接下来，我们在电脑上配置PicGo客户端来连接OSS。</p>\n<ol>\n<li><p><strong>安装PicGo</strong></p>\n<ul>\n<li>请前往PicGo的GitHub Releases页面<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL01vbHVuZXJmaW5uL1BpY0dvL3JlbGVhc2Vz\">https://github.com/Molunerfinn/PicGo/releases</span> 下载并安装适合你操作系统的版本。</li>\n</ul>\n</li>\n<li><p><strong>配置阿里云OSS图床</strong></p>\n<ul>\n<li>打开PicGo应用，在左侧<strong>图床设置</strong>中，找到并点击<strong>阿里云OSS</strong>。</li>\n<li>根据获取的信息填写以下配置项：<ul>\n<li><code>AccessKey ID</code> 和 <code>AccessKey Secret</code>：填入之前保存的子用户的AccessKey信息。</li>\n<li><code>Bucket</code>：填写你创建的Bucket名称。</li>\n<li><code>存储区域</code>：填写Bucket所在地域的<strong>Endpoint（访问域名）中的“节点”部分</strong>。例如，如果你的Endpoint是 <code>oss-cn-hangzhou.aliyuncs.com</code>，这里就填 <code>oss-cn-hangzhou</code>。你可以在Bucket的概览页面找到这个信息。</li>\n<li><code>存储路径</code>（可选）：可以指定一个文件夹来存放图片，例如 <code>blog/img/</code>。如果不填，图片会保存在Bucket根目录。</li>\n<li><code>自定义域名</code>（可选）：如果你为Bucket配置了自定义加速域名（CNAME），可以在这里填写，例如 <code>https://img.example.com</code>。</li>\n</ul>\n</li>\n<li>填写完毕后，点击<strong>确定</strong>或<strong>设为默认图床</strong>。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"验证上传与高级集成\"><a href=\"#验证上传与高级集成\" class=\"headerlink\" title=\"验证上传与高级集成\"></a>验证上传与高级集成</h3><ol>\n<li><p><strong>验证图床是否正常工作</strong></p>\n<ul>\n<li>在PicGo的<strong>上传区</strong>，拖拽一张图片或点击选择文件，然后点击<strong>上传</strong>。</li>\n<li>上传成功后，PicGo会自动将图片的URL链接复制到你的剪贴板，并会在相册中显示记录。你可以将链接粘贴到浏览器地址栏中访问，确认图片可以正常显示。</li>\n</ul>\n</li>\n<li><p><strong>在Typora中集成PicGo（实现自动上传）</strong></p>\n<ul>\n<li>如果你使用Typora编写Markdown文档，可以将其与PicGo无缝集成。打开Typora，进入<strong>文件</strong> &gt; <strong>偏好设置</strong> &gt; <strong>图像</strong>。</li>\n<li>在上传服务设置中，选择 <strong>PicGo (app)</strong>，并在下方指定PicGo的安装路径。</li>\n<li>点击<strong>验证图片上传选项</strong>，如果提示成功，说明配置正确。之后在Typora中插入的本地图片在保存时便会自动上传到OSS并替换为网络链接。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"实用技巧与注意事项\"><a href=\"#实用技巧与注意事项\" class=\"headerlink\" title=\"实用技巧与注意事项\"></a>实用技巧与注意事项</h3><p>为了让你的图床更安全、经济地运行，这里还有一些建议：</p>\n<ul>\n<li><strong>安全建议</strong><ul>\n<li><strong>防盗链</strong>：在OSS Bucket的<strong>权限管理</strong> &gt; <strong>防盗链</strong>设置中，可以添加允许访问你图片的域名白名单（如你的博客域名、<code>*.console.aliyun.com</code>等），防止图片被其他网站盗用。</li>\n<li><strong>权限最小化</strong>：授予子用户的权限遵循最小权限原则，仅授予其必要的OSS管理权限。</li>\n</ul>\n</li>\n<li><strong>成本优化</strong><ul>\n<li>阿里云OSS的费用主要包括存储容量、流量和请求次数。对于个人博客或小规模使用，消耗通常很低，甚至可以购买资源包来进一步降低成本。</li>\n</ul>\n</li>\n<li><strong>故障排查</strong><ul>\n<li><strong>上传失败</strong>：首先检查AccessKey、Bucket名称、存储区域（尤其是区域后缀是否正确）是否填写无误。确保子用户已被正确授权。</li>\n<li><strong>图片无法访问</strong>：检查Bucket的读写权限是否为“公共读”。如果使用了防盗链，请确认当前访问域名是否在白名单中。</li>\n</ul>\n</li>\n</ul>\n",
            "tags": [
                "图床"
            ]
        },
        {
            "id": "https://lzq-cv.github.io/2025/09/26/%E4%BD%BF%E7%94%A8PICGO-GitHub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/",
            "url": "https://lzq-cv.github.io/2025/09/26/%E4%BD%BF%E7%94%A8PICGO-GitHub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/",
            "title": "使用PICGO-GitHub搭建个人图床",
            "date_published": "2025-09-26T09:55:51.000Z",
            "content_html": "<p>通过 GitHub API 和 jsDelivr CDN 搭建图床，简单说就是<strong>用 GitHub 存图片，用 jsDelivr 加速访问</strong>。这个方案免费、可靠，对开发者尤其友好。</p>\n<h3 id=\"第一步：准备工作\"><a href=\"#第一步：准备工作\" class=\"headerlink\" title=\"第一步：准备工作\"></a>第一步：准备工作</h3><ol>\n<li><strong>创建 GitHub 仓库</strong>：<ul>\n<li>登录 GitHub，点击右上角 “+” 号，选择 “New repository”。</li>\n<li>取一个清晰的仓库名（如 <code>my-image-bed</code>）。</li>\n<li>仓库需设置为 <strong>Public</strong>（公开），因为 jsDelivr 无法加速私有仓库的资源。</li>\n<li>其他设置保持默认，点击 “Create repository”。</li>\n</ul>\n</li>\n<li><strong>生成 GitHub Personal Access Token (PAT)</strong>：<ul>\n<li>点击右上角头像 -&gt; “Settings” -&gt; 左侧 “Developer settings” -&gt; “Personal access tokens” -&gt; “Tokens (classic)” -&gt; “Generate new token (classic)”。</li>\n<li>为令牌添加一个<strong>备注</strong>（如 <code>For Image Bed</code>）。</li>\n<li><strong>选择权限</strong>：务必勾选 <code>repo</code>（完全控制私有仓库）下的所有权限，这样才允许通过 API 管理仓库内的文件。</li>\n<li>生成后，<strong>务必立即复制并妥善保存</strong>这个令牌字符串，关闭页面后就无法再次查看。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"第二步：配置上传工具-以-PicGo-为例\"><a href=\"#第二步：配置上传工具-以-PicGo-为例\" class=\"headerlink\" title=\"第二步：配置上传工具 (以 PicGo 为例)\"></a>第二步：配置上传工具 (以 PicGo 为例)</h3><p>手动上传和获取链接比较麻烦，使用工具可以自动化这个过程。<strong>PicGo</strong> 是一个很好的选择。</p>\n<ol>\n<li><strong>下载并安装 PicGo</strong>：从其 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL01vbHVuZXJmaW5uL1BpY0dvL3JlbGVhc2Vz\">GitHub Releases</span> 页面下载并安装。</li>\n<li><strong>安装 GitHub 图床插件</strong>：<ul>\n<li>打开 PicGo，在左侧找到 “插件设置”。</li>\n<li>搜索 <code>github-plus</code> 并安装。这个插件功能更丰富。</li>\n</ul>\n</li>\n<li><strong>配置图床设置</strong>：<ul>\n<li>在左侧 “图床设置” 中找到 “GitHubPlus”。</li>\n<li>按下表填写信息：</li>\n</ul>\n</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th align=\"left\">配置项</th>\n<th align=\"left\">填写说明</th>\n<th align=\"left\">示例（需替换为你自己的信息）</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><strong>仓库名</strong></td>\n<td align=\"left\">你的 GitHub 用户名&#x2F;仓库名</td>\n<td align=\"left\"><code>yourusername/my-image-bed</code></td>\n</tr>\n<tr>\n<td align=\"left\"><strong>分支名</strong></td>\n<td align=\"left\">一般为 <code>main</code> 或 <code>master</code></td>\n<td align=\"left\"><code>main</code></td>\n</tr>\n<tr>\n<td align=\"left\"><strong>Token</strong></td>\n<td align=\"left\">粘贴你刚才生成的 Personal Access Token</td>\n<td align=\"left\"><code>ghp_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</code></td>\n</tr>\n<tr>\n<td align=\"left\"><strong>存储路径</strong></td>\n<td align=\"left\">可选。图片在仓库中的存放目录，如 <code>images/</code>。若不填则保存在仓库根目录。</td>\n<td align=\"left\"><code>images/</code></td>\n</tr>\n<tr>\n<td align=\"left\"><strong>自定义域名</strong></td>\n<td align=\"left\"><strong>非常重要</strong>！填写 jsDelivr 的加速域名，格式：<code>https://cdn.jsdelivr.net/gh/你的用户名/你的仓库名</code></td>\n<td align=\"left\"><code>https://cdn.jsdelivr.net/gh/yourusername/my-image-bed</code></td>\n</tr>\n<tr>\n<td align=\"left\"><strong>设置提醒日期</strong></td>\n<td align=\"left\">可选。由于 PAT 可能有过期时间，建议在此设置提醒，以便及时更新 Token，避免上传失败。</td>\n<td align=\"left\">在 Token 过期前选择日期</td>\n</tr>\n</tbody></table>\n<ol start=\"4\">\n<li><strong>设为默认图床并上传测试</strong>：配置完成后，将其设为默认图床，然后拖拽一张图片上传试试。成功后，PicGo 会自动将<strong>加速后的图片链接</strong>复制到你的剪贴板。</li>\n</ol>\n<h3 id=\"第三步：获取-jsDelivr-加速链接\"><a href=\"#第三步：获取-jsDelivr-加速链接\" class=\"headerlink\" title=\"第三步：获取 jsDelivr 加速链接\"></a>第三步：获取 jsDelivr 加速链接</h3><p>无论你是否使用 PicGo 等工具，图片上传到 GitHub 仓库后，其 jsDelivr 的加速链接都遵循统一的格式：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/gh/你的GitHub用户名/你的仓库名@发布的版本号/文件路径</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong><code>@发布的版本号</code></strong>：这部分是可选的。可以是分支名（如 <code>@main</code>）、具体的发布版本号（如 <code>@v1.0</code>）或提交哈希值。<strong>如果不指定版本，默认会指向最新资源</strong>。<ul>\n<li><strong>最佳实践</strong>：对于图床，<strong>通常建议省略 <code>@版本号</code></strong>，这样总能访问到最新上传的图片。例如：<br><code>https://cdn.jsdelivr.net/gh/yourusername/my-image-bed/images/cat.jpg</code></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h3><ul>\n<li><strong>仓库必须公开</strong>：jsDelivr <strong>无法</strong>加速私有仓库的资源。</li>\n<li><strong>文件大小限制</strong>：jsDelivr 建议文件大小控制在 20MB 以内，这对于绝大多数图片来说足够了。</li>\n<li><strong>缓存问题</strong>：jsDelivr 会对文件进行缓存以提升速度。这意味着如果你更新了 GitHub 仓库中的同名图片，可能需要等待几分钟到几小时缓存刷新后，通过 jsDelivr 链接才能看到变更。<strong>强制更新缓存的方法是在链接后添加特定版本号、分支名或哈希值</strong>。</li>\n<li><strong>Token 安全</strong>：你的 GitHub Token 相当于密码，<strong>切勿泄露</strong>。一旦泄露，应立即到 GitHub 设置中撤销它。</li>\n<li><strong>API 速率限制</strong>：GitHub API 有调用频率限制。对于个人使用通常不会触限，但如果是极高频率调用，需要注意。</li>\n</ul>\n",
            "tags": [
                "图床"
            ]
        },
        {
            "id": "https://lzq-cv.github.io/2025/09/26/%E4%BD%BF%E7%94%A8PICGO-CloudflarR2%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/",
            "url": "https://lzq-cv.github.io/2025/09/26/%E4%BD%BF%E7%94%A8PICGO-CloudflarR2%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/",
            "title": "使用PICGO-CloudflarR2搭建个人图床",
            "date_published": "2025-09-26T09:54:33.000Z",
            "content_html": "<h3 id=\"Cloudflare-R2\"><a href=\"#Cloudflare-R2\" class=\"headerlink\" title=\"Cloudflare R2\"></a>Cloudflare R2</h3><p>自己搭建图床既能掌控数据，又能在长期节省成本。Cloudflare R2 因其<strong>免费额度慷慨</strong>（每月10GB存储、100万次A类操作、1000万次B类操作）且<strong>出口流量全免</strong>，成为了一个非常不错的选择。</p>\n<h3 id=\"Cloudflare-R2-免费额度\"><a href=\"#Cloudflare-R2-免费额度\" class=\"headerlink\" title=\"Cloudflare R2 免费额度\"></a>Cloudflare R2 免费额度</h3><p>首先，我们来了解一下 Cloudflare R2 的免费计划：</p>\n<table>\n<thead>\n<tr>\n<th>资源类型</th>\n<th>每月免费额度</th>\n<th>超额费率 (截至2025年)</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>存储空间</strong></td>\n<td>10 GB</td>\n<td>$0.015 &#x2F; GB</td>\n</tr>\n<tr>\n<td><strong>A 类操作</strong></td>\n<td>100 万次请求 (写入、列举等)</td>\n<td>$4.50 &#x2F; 100 万次请求</td>\n</tr>\n<tr>\n<td><strong>B 类操作</strong></td>\n<td>1000 万次请求 (读取等)</td>\n<td>$0.36 &#x2F; 100 万次请求</td>\n</tr>\n<tr>\n<td><strong>出口流量</strong></td>\n<td><strong>完全免费</strong></td>\n<td><strong>完全免费</strong></td>\n</tr>\n</tbody></table>\n<p><strong>注意</strong>：A类操作通常包括上传、列举文件等写入操作，而B类操作主要是下载、获取文件等读取操作。免费额度对于个人博客或小规模网站通常足够。</p>\n<h3 id=\"搭建步骤\"><a href=\"#搭建步骤\" class=\"headerlink\" title=\"搭建步骤\"></a>搭建步骤</h3><h3 id=\"第一步：准备工作\"><a href=\"#第一步：准备工作\" class=\"headerlink\" title=\"第一步：准备工作\"></a>第一步：准备工作</h3><ol>\n<li><strong>注册 Cloudflare 账号</strong>：访问 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9kYXNoLmNsb3VkZmxhcmUuY29tL3NpZ24tdXA=\">Cloudflare 官网</span> 并注册账号。</li>\n<li><strong>准备域名</strong>：需要一个<strong>已托管在 Cloudflare 上</strong>的域名（作为图床的最终访问域名）。你可以在 Cloudflare 添加现有的域名，或者注册新域名后将其 DNS 服务器改为 Cloudflare 指定的。</li>\n<li><strong>验证支付方式</strong>：虽然 R2 有免费额度，但 Cloudflare 仍需要你绑定一种支付方式（如信用卡或 PayPal）以验证身份。<strong>只要用量不超额，就不会产生费用</strong>。</li>\n</ol>\n<h3 id=\"第二步：配置-Cloudflare-R2\"><a href=\"#第二步：配置-Cloudflare-R2\" class=\"headerlink\" title=\"第二步：配置 Cloudflare R2\"></a>第二步：配置 Cloudflare R2</h3><ol>\n<li><strong>开通 R2 服务</strong>：<ul>\n<li>登录 Cloudflare 仪表板，在侧边栏找到 <strong>“R2”</strong> 并点击。</li>\n<li>按照提示完成支付方式的绑定以开通 R2。</li>\n</ul>\n</li>\n<li><strong>创建存储桶（Bucket）</strong>：<ul>\n<li>在 R2 页面点击 <strong>“创建存储桶”</strong>。</li>\n<li>填写存储桶名称（例如 <code>my-image-bed</code>）。</li>\n<li><strong>地区（Region）</strong> 选择离你的目标用户较近的区域，例如 <code>亚太地区 (APAC)</code> 对国内访问更友好。</li>\n<li>其他设置保持默认，点击创建。</li>\n</ul>\n</li>\n<li><strong>启用公共访问权限</strong>：<ul>\n<li>创建成功后，进入该存储桶的 <strong>“设置”</strong> 页。</li>\n<li>找到 <strong>“公共访问”</strong> 选项，点击 <strong>“启用”</strong> 并确认。这将生成一个临时的 <code>r2.dev</code> 子域名用于访问文件。</li>\n<li><strong>（强烈推荐）使用自定义域名</strong>：临时的 <code>r2.dev</code> 域名有速率限制。在存储桶设置的 <strong>“自定义域”</strong> 部分，添加你已托管在 CF 的域名（例如 <code>img.yourdomain.com</code>）。Cloudflare 会自动为你配置 DNS 记录。</li>\n</ul>\n</li>\n<li><strong>获取 API 凭证</strong>：<ul>\n<li>在仪表板左侧栏找到 <strong>“R2” &gt; “API 令牌”</strong>。</li>\n<li>点击 <strong>“创建 API 令牌”</strong>。</li>\n<li>选择 <strong>“编辑”</strong> 权限，并指定到你刚创建的存储桶。</li>\n<li>安全起见，可以设置令牌的 TTL（生存时间），对于长期使用的图床，可选择永久。</li>\n<li>创建成功后，<strong>务必妥善保存</strong>显示的 <code>访问密钥 ID</code> 和 <code>秘密访问密钥</code>，它们只会显示一次。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"第三步：配置图床管理工具（以-PicGo-为例）\"><a href=\"#第三步：配置图床管理工具（以-PicGo-为例）\" class=\"headerlink\" title=\"第三步：配置图床管理工具（以 PicGo 为例）\"></a>第三步：配置图床管理工具（以 PicGo 为例）</h3><p>PicGo 是一个开源图床客户端，可以简化上传操作。</p>\n<ol>\n<li><strong>下载并安装 PicGo</strong>：<ul>\n<li>访问 PicGo 的 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL01vbHVuZXJmaW5uL1BpY0dvL3JlbGVhc2Vz\">GitHub Releases 页面</span>，下载并安装适合你操作系统的最新版本。</li>\n</ul>\n</li>\n<li><strong>安装 S3 插件</strong>：<ul>\n<li>由于 Cloudflare R2 兼容 S3 API，我们需要在 PicGo 中安装 S3 插件。</li>\n<li>打开 PicGo，进入 <strong>“插件设置”</strong>。</li>\n<li>搜索并安装 <code>picgo-plugin-s3</code> 插件。</li>\n</ul>\n</li>\n<li><strong>配置 PicGo</strong>：<ul>\n<li>安装插件后，在 <strong>“图床设置”</strong> 中找到 <strong>“Amazon S3”</strong> 进行配置。</li>\n<li>关键配置项如下（请根据你的实际情况填写）：</li>\n</ul>\n</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>配置项</th>\n<th>填写值说明</th>\n<th>示例（请替换为你自己的信息）</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>应用密钥 ID</strong></td>\n<td>填写你刚才保存的 <code>访问密钥 ID</code></td>\n<td><code>1a2b3c4d5e6f7g8h9i0j</code></td>\n</tr>\n<tr>\n<td><strong>应用密钥</strong></td>\n<td>填写你刚才保存的 <code>秘密访问密钥</code></td>\n<td><code>z0y1x2w3v4u5t6s7r8q9p...</code></td>\n</tr>\n<tr>\n<td><strong>存储桶名</strong></td>\n<td>你创建的存储桶名称</td>\n<td><code>my-image-bed</code></td>\n</tr>\n<tr>\n<td><strong>存储区域</strong></td>\n<td>R2 无需填写特定区域，可填写 <code>auto</code> 或留空</td>\n<td><code>auto</code></td>\n</tr>\n<tr>\n<td><strong>自定义节点</strong></td>\n<td>填写你的 S3 API 端点（可在 R2 的 API 令牌页面找到）</td>\n<td><code>https://xxx.r2.cloudflarestorage.com</code></td>\n</tr>\n<tr>\n<td><strong>自定义域名</strong></td>\n<td><strong>填写你连接到存储桶的自定义域名</strong>，用于生成图片链接</td>\n<td><code>https://img.yourdomain.com</code></td>\n</tr>\n<tr>\n<td><strong>文件路径</strong></td>\n<td>定义图片在存储桶中的存储路径结构（可选，但建议设置以保持整洁）</td>\n<td><code>{year}/{month}/{day}/{fileName}</code></td>\n</tr>\n<tr>\n<td><strong>ACL 访问控制列表</strong></td>\n<td>必须设置为 <code>public-read</code>，这样图片链接才能被公开访问</td>\n<td><code>public-read</code></td>\n</tr>\n</tbody></table>\n<p><strong>提示</strong>：<code>{year}</code>, <code>{month}</code>, <code>{day}</code>, <code>{fileName}</code> 是 PicGo 的<strong>变量</strong>，会自动替换为实际值。</p>\n<ol>\n<li><strong>设为默认图床并上传测试</strong>：<ul>\n<li>配置完成后，可以点击 <strong>“设为默认图床”</strong>。</li>\n<li>在 <strong>“上传区”</strong> 拖拽或选择一张图片进行上传。</li>\n<li>上传成功后，PicGo 会自动将图片的 Markdown 链接复制到剪贴板。你可以粘贴到文本编辑器中测试一下是否能正常访问。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"第四步：访问优化与安全设置（可选但重要）\"><a href=\"#第四步：访问优化与安全设置（可选但重要）\" class=\"headerlink\" title=\"第四步：访问优化与安全设置（可选但重要）\"></a>第四步：访问优化与安全设置（可选但重要）</h3><p>为了让图床更高效、安全，建议进行如下设置：</p>\n<ol>\n<li><strong>配置缓存规则</strong>：利用 Cloudflare CDN 缓存图片，减少回源请求，提升速度并节省操作次数。<ul>\n<li>在 Cloudflare 仪表板中，进入你的<strong>域名</strong>（而非 R2）。</li>\n<li>转到 <strong>“规则” &gt; “缓存规则”</strong>。</li>\n<li>创建一条新规则，URL 填写 <code>img.yourdomain.com/*</code>（你的图床域名）。</li>\n<li>添加设置：<strong>缓存级别</strong> - 缓存所有内容。</li>\n<li>添加设置：<strong>边缘缓存 TTL</strong> - 设置为一个较长的时间，例如 “1 个月”。</li>\n</ul>\n</li>\n<li><strong>设置防盗链（WAF）</strong>：防止其他网站直接链接你的图片，消耗你的流量和请求次数。<ul>\n<li>在域名的 <strong>“安全性” &gt; “WAF”</strong> 中创建自定义规则。</li>\n<li>编写规则，例如：<code>(http.referer does not contain &quot;yourdomain.com&quot;) and (http.request.uri.path contains &quot;/images/&quot;)</code>，操作选择“阻止”。这表示仅允许来自你自己域名（<code>yourdomain.com</code>）的请求访问图片目录。</li>\n</ul>\n</li>\n<li><strong>配置 CORS（跨域资源共享）</strong>：如果你的图床图片需要被不同域名的网站引用（例如你的主站、CDN 等），需要在存储桶设置中配置 CORS。<ul>\n<li>在存储桶的 <strong>“设置”</strong> 中找到 <strong>“CORS 策略”</strong>。</li>\n<li>添加策略，允许所需域名的 <code>GET</code> 请求。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"总结与提醒\"><a href=\"#总结与提醒\" class=\"headerlink\" title=\"总结与提醒\"></a>总结与提醒</h3><p>通过以上步骤，你应该已经成功搭建了一个基于 Cloudflare R2 的免费图床。它<strong>免费额度充足</strong>、<strong>性能可靠</strong>，并且通过 PicGo 可以<strong>非常便捷地上传和管理图片</strong>。</p>\n<p>最后请注意：</p>\n<ul>\n<li><strong>保管好 API 令牌</strong>：如同密码，切勿泄露。</li>\n<li><strong>关注用量</strong>：定期在 Cloudflare 仪表板检查 R2 的使用情况，确保在免费额度内。</li>\n<li><strong>备份重要图片</strong>：虽然 R2 很可靠，但对于极其重要的图片，建议额外备份。</li>\n</ul>\n",
            "tags": [
                "图床"
            ]
        },
        {
            "id": "https://lzq-cv.github.io/2025/09/26/%E5%85%8D%E8%B4%B9%E5%9B%BE%E5%BA%8A%E8%B8%A9%E5%9D%91/",
            "url": "https://lzq-cv.github.io/2025/09/26/%E5%85%8D%E8%B4%B9%E5%9B%BE%E5%BA%8A%E8%B8%A9%E5%9D%91/",
            "title": "免费图床踩坑",
            "date_published": "2025-09-26T09:52:04.000Z",
            "content_html": "<h3 id=\"踩坑\"><a href=\"#踩坑\" class=\"headerlink\" title=\"踩坑\"></a>踩坑</h3><p>免费的图床是真的不稳定，上传的图片随时都有被清除的可能，想要长期使用还是需要自己搭建图床。但是，我对图床需求又不是特别多，只为博客网站提供图片源仅此而已。花钱去买阿里云OSS和腾讯云COS的云存储服务，又不太值。查了一些免费图床搭建方法，目前就2种比较推荐的：</p>\n<p>方法1：CloudflareR2+PICGO</p>\n<p>方法2：Github+PICGO</p>\n<h3 id=\"临时使用的免费图床：\"><a href=\"#临时使用的免费图床：\" class=\"headerlink\" title=\"临时使用的免费图床：\"></a>临时使用的免费图床：</h3><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9pbWcuMTMxMjEzLnh5ei8=\">图床</span></p>\n",
            "tags": [
                "图床"
            ]
        },
        {
            "id": "https://lzq-cv.github.io/2025/09/26/shoka%E4%B8%BB%E9%A2%98%E9%83%A8%E7%BD%B2/",
            "url": "https://lzq-cv.github.io/2025/09/26/shoka%E4%B8%BB%E9%A2%98%E9%83%A8%E7%BD%B2/",
            "title": "shoka主题部署",
            "date_published": "2025-09-26T09:48:44.000Z",
            "content_html": "<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">先要搭建好HEXO博客框架</span><br><span class=\"line\"># cd your-blog</span><br><span class=\"line\">git clone https://github.com/amehime/hexo-theme-shoka.git ./themes/shoka</span><br></pre></td></tr></table></figure>\n\n<p>1.<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvaGV4by1yZW5kZXJlci1tdWx0aS1tYXJrZG93bi1pdA==\">https://www.npmjs.com/package/hexo-renderer-multi-markdown-it</span></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm un hexo-renderer-marked --save</span><br><span class=\"line\">npm i hexo-renderer-multi-markdown-it --save</span><br><span class=\"line\">npm un hexo-renderer-multi-markdown-it --save</span><br><span class=\"line\"></span><br><span class=\"line\"># 1. 卸载旧渲染器 (如果已安装)</span><br><span class=\"line\">npm uninstall hexo-renderer-marked --save</span><br><span class=\"line\"></span><br><span class=\"line\"># 2. 设置跳过 Chromium 下载</span><br><span class=\"line\">set PUPPETEER_SKIP_DOWNLOAD=1  # Windows CMD</span><br><span class=\"line\"></span><br><span class=\"line\"># 3. 安装插件</span><br><span class=\"line\">npm i hexo-renderer-multi-markdown-it --save</span><br><span class=\"line\"></span><br><span class=\"line\"># 4. 验证安装</span><br><span class=\"line\">npm list hexo-renderer-multi-markdown-it</span><br></pre></td></tr></table></figure>\n\n<p>2.<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvaGV4by1hdXRvcHJlZml4ZXI=\">https://www.npmjs.com/package/hexo-autoprefixer</span></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-autoprefixer --save</span><br></pre></td></tr></table></figure>\n\n<p>3.<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvaGV4by1hbGdvbGlhc2VhcmNo\">https://www.npmjs.com/package/hexo-algoliasearch</span></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-algoliasearch --save</span><br></pre></td></tr></table></figure>\n\n<p>4.<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvaGV4by1zeW1ib2xzLWNvdW50LXRpbWU=\">https://www.npmjs.com/package/hexo-symbols-count-time</span></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-symbols-count-time</span><br></pre></td></tr></table></figure>\n\n<p>5.<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvaGV4by1mZWVk\">https://www.npmjs.com/package/hexo-feed</span></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-feed --save-dev</span><br></pre></td></tr></table></figure>\n\n",
            "tags": [
                "shoka"
            ]
        },
        {
            "id": "https://lzq-cv.github.io/2025/09/26/HEXO%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/",
            "url": "https://lzq-cv.github.io/2025/09/26/HEXO%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/",
            "title": "HEXO博客搭建",
            "date_published": "2025-09-26T09:43:28.000Z",
            "content_html": "<h2 id=\"HEXO博客搭建\"><a href=\"#HEXO博客搭建\" class=\"headerlink\" title=\"HEXO博客搭建\"></a>HEXO博客搭建</h2><h4 id=\"1-HEXO\"><a href=\"#1-HEXO\" class=\"headerlink\" title=\"1. HEXO\"></a>1. HEXO</h4><p>Hexo 是一个基于 Node.js 的快速、简洁的静态博客框架，适合通过 Markdown 编写内容并生成静态网页。有以下优点：  </p>\n<ul>\n<li>**支持Markdown：**文章以 Markdown 格式编写，简单易用。</li>\n<li>**部署简单：**一键部署到 GitHub Pages、Netlify 等平台，与 GitHub Pages 无缝集成。</li>\n<li>**主题丰富：**社区活跃，主题和插件丰富。</li>\n<li>**高效快速：**利用 Node.js 高效渲染，快速生成静态页面。轻量快速，适合博客和文档。</li>\n</ul>\n<h4 id=\"2-环境搭建\"><a href=\"#2-环境搭建\" class=\"headerlink\" title=\"2. 环境搭建\"></a>2. 环境搭建</h4><p>首先在官网下载并安装好node.js和git。  </p>\n<p>node.js官网：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ub2RlanMub3JnL3poLWNuL2Rvd25sb2Fk\">https://nodejs.org/zh-cn/download</span></p>\n<p>git官网：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXQtc2NtLmNvbS9kb3dubG9hZHM=\">https://git-scm.com/downloads</span></p>\n<p>然后，打开cmd或者鼠标右键git bash here，搭建本地HEXO博客。  </p>\n<p>HEXO官网：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL3poLWNuLw==\">https://hexo.io/zh-cn/</span></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-cli -g <span class=\"comment\">#安装hexo命令行工具</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#包管理工具</span></span><br><span class=\"line\">npm install -g pnpm <span class=\"comment\">#安装pnpm</span></span><br><span class=\"line\">pnpm config <span class=\"built_in\">set</span> registry https://registry.npmmirror.com/</span><br><span class=\"line\">npm install -g yarn <span class=\"comment\">#安装yarn</span></span><br><span class=\"line\">yarn config <span class=\"built_in\">set</span> registry https://registry.npmmirror.com/</span><br><span class=\"line\"></span><br><span class=\"line\">hexo init LZQ-CV.github.io <span class=\"comment\">#初始化创建</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> LZQ-CV.github.io  <span class=\"comment\">#进入创建的项目目录</span></span><br><span class=\"line\">npm install <span class=\"comment\">#安装依赖</span></span><br><span class=\"line\"></span><br><span class=\"line\">hexo new <span class=\"built_in\">test</span> <span class=\"comment\">#生成test.md文件</span></span><br><span class=\"line\"></span><br><span class=\"line\">hexo clean <span class=\"comment\">#清除缓存</span></span><br><span class=\"line\">hexo generate <span class=\"comment\">#生成禁态页面</span></span><br><span class=\"line\"></span><br><span class=\"line\">hexo server <span class=\"comment\">#启动本地服务器</span></span><br><span class=\"line\">hexo deploy <span class=\"comment\">#远程部署</span></span><br><span class=\"line\"></span><br><span class=\"line\">npm install hexo-deployer-git --save</span><br><span class=\"line\">pnpm install hexo-deployer-git --save <span class=\"comment\">#安装git部署插件</span></span><br><span class=\"line\">git init <span class=\"comment\">#git初始化</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">node_modules用于放置NPM包,无需注意</span><br><span class=\"line\">scaffolds储存文章模板,hexo new时会用到</span><br><span class=\"line\"><span class=\"built_in\">source</span>储存文章和部分资源</span><br><span class=\"line\">themes储存主题</span><br><span class=\"line\">_config.xxx.yml是主题的plus版配置文件(xxx须更改为主题名)</span><br><span class=\"line\">_config.yml是hexo的配置文件</span><br><span class=\"line\">package.jsonNPM的包json,无需注意</span><br></pre></td></tr></table></figure>\n\n<p>打开项目文件夹，找到_config.yml并修改。  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repo: https://LZQ-CV:填入token开发者令牌@github.com/LZQ-CV/LZQ-CV.github.io.git</span><br><span class=\"line\">  #远程仓库路径有HTTPs和SSH的区别，这里使用的是https。</span><br><span class=\"line\">  repo: git@github.com:LZQ-CV/LZQ-CV.github.io.git</span><br><span class=\"line\">  #远程仓库路径有HTTPs和SSH的区别，这里使用的是SSH。</span><br><span class=\"line\">  branch: main #GitHub仓库默认分支</span><br><span class=\"line\">  </span><br></pre></td></tr></table></figure>\n\n<p>安装HEXO的主题</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>\n\n<p>修改 <code>_config.yml</code> 中的 <code>theme: next</code>。  </p>\n<p>也可以直接把下载好的主题放到项目文件夹的themes文件夹中。</p>\n<h4 id=\"3-远程部署到GitHub\"><a href=\"#3-远程部署到GitHub\" class=\"headerlink\" title=\"3.远程部署到GitHub\"></a>3.远程部署到GitHub</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.email <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">git config --global user.name <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">git config --global --list <span class=\"comment\">#查看是否配置成功</span></span><br><span class=\"line\">ssh-keygen -t rsa -C <span class=\"string\">&quot;email&quot;</span> <span class=\"comment\">#生成ssh公钥</span></span><br><span class=\"line\">ssh -T git@github.com <span class=\"comment\">#验证是否链接成功</span></span><br><span class=\"line\"></span><br><span class=\"line\">hexo deploy <span class=\"comment\">#部署</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n",
            "tags": [
                "HEXO"
            ]
        },
        {
            "id": "https://lzq-cv.github.io/2025/09/26/hello-world/",
            "url": "https://lzq-cv.github.io/2025/09/26/hello-world/",
            "title": "Hello World",
            "date_published": "2025-09-26T08:47:49.801Z",
            "content_html": "<p>Welcome to <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvLw==\">Hexo</span>! This is your very first post. Check <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mv\">documentation</span> for more info. If you get any problems when using Hexo, you can find the answer in <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvdHJvdWJsZXNob290aW5nLmh0bWw=\">troubleshooting</span> or you can ask me on <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvL2lzc3Vlcw==\">GitHub</span>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvd3JpdGluZy5odG1s\">Writing</span></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvc2VydmVyLmh0bWw=\">Server</span></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZ2VuZXJhdGluZy5odG1s\">Generating</span></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvb25lLWNvbW1hbmQtZGVwbG95bWVudC5odG1s\">Deployment</span></p>\n",
            "tags": []
        }
    ]
}