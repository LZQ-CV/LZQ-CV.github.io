<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://LZQ-CV.github.io</id>
    <title>Learning-Sharing-Recording • Posts by &#34;图床&#34; tag</title>
    <link href="https://LZQ-CV.github.io" />
    <updated>2025-09-26T10:06:31.000Z</updated>
    <category term="CV" />
    <category term="English" />
    <category term="HEXO" />
    <category term="服务器" />
    <category term="shoka" />
    <category term="图床" />
    <category term="机器视觉" />
    <entry>
        <id>https://lzq-cv.github.io/2025/09/26/%E4%BD%BF%E7%94%A8PICGO-%E9%98%BF%E9%87%8C%E4%BA%91OSS%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/</id>
        <title>使用PICGO-阿里云OSS搭建个人图床</title>
        <link rel="alternate" href="https://lzq-cv.github.io/2025/09/26/%E4%BD%BF%E7%94%A8PICGO-%E9%98%BF%E9%87%8C%E4%BA%91OSS%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/"/>
        <content type="html">&lt;p&gt;使用阿里云 OSS 和 PicGo 搭建图床，可以让你非常方便地将本地图片自动上传到云端，并直接获取可用于博客、文档等处的图片链接。阿里云 OSS 还可以申请 3 个月免费试用。&lt;/p&gt;
&lt;h3 id=&#34;配置阿里云oss&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#配置阿里云oss&#34;&gt;#&lt;/a&gt; 配置阿里云 OSS&lt;/h3&gt;
&lt;p&gt;首先，我们需要在阿里云上创建存储空间（Bucket）并配置访问权限。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;创建 Bucket&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;登录阿里云控制台，进入&lt;strong&gt;对象存储 OSS&lt;/strong&gt; 服务。&lt;/li&gt;
&lt;li&gt;点击&lt;strong&gt;创建 Bucket&lt;/strong&gt;，填写 Bucket 名称（全局唯一），选择离你较近的&lt;strong&gt;地域&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;读写权限&lt;/strong&gt;务必设置为&lt;strong&gt;公共读&lt;/strong&gt;，这样图片才能被外部访问。其他选项如存储类型等，保持 “标准存储” 默认值即可。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;创建 RAM 子用户并授权&lt;/strong&gt;（为了安全，不建议直接使用主账号 AccessKey）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;进入&lt;strong&gt;访问控制 RAM&lt;/strong&gt; 控制台。&lt;/li&gt;
&lt;li&gt;创建一个子用户（例如命名为  &lt;code&gt;picgo-user&lt;/code&gt; ），&lt;strong&gt;访问方式&lt;/strong&gt;请勾选 &lt;strong&gt;“OpenAPI 调用访问”&lt;/strong&gt; 。系统会自动为该子用户创建 AccessKey（即 AccessKey ID 和 AccessKey Secret），请务必妥善保存这两项信息，后续配置 PicGo 时需要用到。&lt;/li&gt;
&lt;li&gt;为这个子用户&lt;strong&gt;添加权限&lt;/strong&gt;。建议直接授权系统策略  &lt;code&gt;AliyunOSSFullAccess&lt;/code&gt; （管理对象存储服务 OSS 的权限），或者按需授予更小粒度的权限。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;安装与配置picgo&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#安装与配置picgo&#34;&gt;#&lt;/a&gt; 安装与配置 PicGo&lt;/h3&gt;
&lt;p&gt;接下来，我们在电脑上配置 PicGo 客户端来连接 OSS。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;安装 PicGo&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;请前往 PicGo 的 GitHub Releases 页面&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL01vbHVuZXJmaW5uL1BpY0dvL3JlbGVhc2Vz&#34;&gt; https://github.com/Molunerfinn/PicGo/releases&lt;/span&gt; 下载并安装适合你操作系统的版本。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;配置阿里云 OSS 图床&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;打开 PicGo 应用，在左侧&lt;strong&gt;图床设置&lt;/strong&gt;中，找到并点击&lt;strong&gt;阿里云 OSS&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;根据获取的信息填写以下配置项：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;AccessKey ID&lt;/code&gt;  和  &lt;code&gt;AccessKey Secret&lt;/code&gt; ：填入之前保存的子用户的 AccessKey 信息。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Bucket&lt;/code&gt; ：填写你创建的 Bucket 名称。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;存储区域&lt;/code&gt; ：填写 Bucket 所在地域的&lt;strong&gt; Endpoint（访问域名）中的 “节点” 部分&lt;/strong&gt;。例如，如果你的 Endpoint 是  &lt;code&gt;oss-cn-hangzhou.aliyuncs.com&lt;/code&gt; ，这里就填  &lt;code&gt;oss-cn-hangzhou&lt;/code&gt; 。你可以在 Bucket 的概览页面找到这个信息。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;存储路径&lt;/code&gt; （可选）：可以指定一个文件夹来存放图片，例如  &lt;code&gt;blog/img/&lt;/code&gt; 。如果不填，图片会保存在 Bucket 根目录。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;自定义域名&lt;/code&gt; （可选）：如果你为 Bucket 配置了自定义加速域名（CNAME），可以在这里填写，例如  &lt;code&gt;https://img.example.com&lt;/code&gt; 。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;填写完毕后，点击&lt;strong&gt;确定&lt;/strong&gt;或&lt;strong&gt;设为默认图床&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;验证上传与高级集成&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#验证上传与高级集成&#34;&gt;#&lt;/a&gt; 验证上传与高级集成&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;验证图床是否正常工作&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在 PicGo 的&lt;strong&gt;上传区&lt;/strong&gt;，拖拽一张图片或点击选择文件，然后点击&lt;strong&gt;上传&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;上传成功后，PicGo 会自动将图片的 URL 链接复制到你的剪贴板，并会在相册中显示记录。你可以将链接粘贴到浏览器地址栏中访问，确认图片可以正常显示。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;在 Typora 中集成 PicGo（实现自动上传）&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果你使用 Typora 编写 Markdown 文档，可以将其与 PicGo 无缝集成。打开 Typora，进入&lt;strong&gt;文件&lt;/strong&gt; &amp;gt; &lt;strong&gt;偏好设置&lt;/strong&gt; &amp;gt; &lt;strong&gt;图像&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;在上传服务设置中，选择 &lt;strong&gt;PicGo (app)&lt;/strong&gt;，并在下方指定 PicGo 的安装路径。&lt;/li&gt;
&lt;li&gt;点击&lt;strong&gt;验证图片上传选项&lt;/strong&gt;，如果提示成功，说明配置正确。之后在 Typora 中插入的本地图片在保存时便会自动上传到 OSS 并替换为网络链接。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;实用技巧与注意事项&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#实用技巧与注意事项&#34;&gt;#&lt;/a&gt; 实用技巧与注意事项&lt;/h3&gt;
&lt;p&gt;为了让你的图床更安全、经济地运行，这里还有一些建议：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;安全建议&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;防盗链&lt;/strong&gt;：在 OSS Bucket 的&lt;strong&gt;权限管理&lt;/strong&gt; &amp;gt; &lt;strong&gt;防盗链&lt;/strong&gt;设置中，可以添加允许访问你图片的域名白名单（如你的博客域名、 &lt;code&gt;*.console.aliyun.com&lt;/code&gt;  等），防止图片被其他网站盗用。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;权限最小化&lt;/strong&gt;：授予子用户的权限遵循最小权限原则，仅授予其必要的 OSS 管理权限。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;成本优化&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;阿里云 OSS 的费用主要包括存储容量、流量和请求次数。对于个人博客或小规模使用，消耗通常很低，甚至可以购买资源包来进一步降低成本。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;故障排查&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;上传失败&lt;/strong&gt;：首先检查 AccessKey、Bucket 名称、存储区域（尤其是区域后缀是否正确）是否填写无误。确保子用户已被正确授权。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;图片无法访问&lt;/strong&gt;：检查 Bucket 的读写权限是否为 “公共读”。如果使用了防盗链，请确认当前访问域名是否在白名单中。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="图床" />
        <updated>2025-09-26T10:06:31.000Z</updated>
    </entry>
    <entry>
        <id>https://lzq-cv.github.io/2025/09/26/%E4%BD%BF%E7%94%A8PICGO-GitHub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/</id>
        <title>使用PICGO-GitHub搭建个人图床</title>
        <link rel="alternate" href="https://lzq-cv.github.io/2025/09/26/%E4%BD%BF%E7%94%A8PICGO-GitHub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/"/>
        <content type="html">&lt;p&gt;通过 GitHub API 和 jsDelivr CDN 搭建图床，简单说就是&lt;strong&gt;用 GitHub 存图片，用 jsDelivr 加速访问&lt;/strong&gt;。这个方案免费、可靠，对开发者尤其友好。&lt;/p&gt;
&lt;h3 id=&#34;第一步准备工作&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第一步准备工作&#34;&gt;#&lt;/a&gt; 第一步：准备工作&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;创建 GitHub 仓库&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;登录 GitHub，点击右上角 “+” 号，选择 “New repository”。&lt;/li&gt;
&lt;li&gt;取一个清晰的仓库名（如  &lt;code&gt;my-image-bed&lt;/code&gt; ）。&lt;/li&gt;
&lt;li&gt;仓库需设置为 &lt;strong&gt;Public&lt;/strong&gt;（公开），因为 jsDelivr 无法加速私有仓库的资源。&lt;/li&gt;
&lt;li&gt;其他设置保持默认，点击 “Create repository”。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;生成 GitHub Personal Access Token (PAT)&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;点击右上角头像 -&amp;gt; “Settings” -&amp;gt; 左侧 “Developer settings” -&amp;gt; “Personal access tokens” -&amp;gt; “Tokens (classic)” -&amp;gt; “Generate new token (classic)”。&lt;/li&gt;
&lt;li&gt;为令牌添加一个&lt;strong&gt;备注&lt;/strong&gt;（如  &lt;code&gt;For Image Bed&lt;/code&gt; ）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;选择权限&lt;/strong&gt;：务必勾选  &lt;code&gt;repo&lt;/code&gt; （完全控制私有仓库）下的所有权限，这样才允许通过 API 管理仓库内的文件。&lt;/li&gt;
&lt;li&gt;生成后，&lt;strong&gt;务必立即复制并妥善保存&lt;/strong&gt;这个令牌字符串，关闭页面后就无法再次查看。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;第二步配置上传工具-以-picgo-为例&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第二步配置上传工具-以-picgo-为例&#34;&gt;#&lt;/a&gt; 第二步：配置上传工具 (以 PicGo 为例)&lt;/h3&gt;
&lt;p&gt;手动上传和获取链接比较麻烦，使用工具可以自动化这个过程。&lt;strong&gt;PicGo&lt;/strong&gt; 是一个很好的选择。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;下载并安装 PicGo&lt;/strong&gt;：从其 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL01vbHVuZXJmaW5uL1BpY0dvL3JlbGVhc2Vz&#34;&gt;GitHub Releases&lt;/span&gt; 页面下载并安装。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;安装 GitHub 图床插件&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;打开 PicGo，在左侧找到 “插件设置”。&lt;/li&gt;
&lt;li&gt;搜索  &lt;code&gt;github-plus&lt;/code&gt;  并安装。这个插件功能更丰富。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;配置图床设置&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;在左侧 “图床设置” 中找到 “GitHubPlus”。&lt;/li&gt;
&lt;li&gt;按下表填写信息：&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;配置项&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;填写说明&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;示例（需替换为你自己的信息）&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;仓库名&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;你的 GitHub 用户名 / 仓库名&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;yourusername/my-image-bed&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;分支名&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;一般为  &lt;code&gt;main&lt;/code&gt;  或  &lt;code&gt;master&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;main&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Token&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;粘贴你刚才生成的 Personal Access Token&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;ghp_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;存储路径&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;可选。图片在仓库中的存放目录，如  &lt;code&gt;images/&lt;/code&gt; 。若不填则保存在仓库根目录。&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;images/&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;自定义域名&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;非常重要&lt;/strong&gt;！填写 jsDelivr 的加速域名，格式： &lt;code&gt;https://cdn.jsdelivr.net/gh/你的用户名/你的仓库名&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;https://cdn.jsdelivr.net/gh/yourusername/my-image-bed&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;设置提醒日期&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;可选。由于 PAT 可能有过期时间，建议在此设置提醒，以便及时更新 Token，避免上传失败。&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;在 Token 过期前选择日期&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;&lt;strong&gt;设为默认图床并上传测试&lt;/strong&gt;：配置完成后，将其设为默认图床，然后拖拽一张图片上传试试。成功后，PicGo 会自动将&lt;strong&gt;加速后的图片链接&lt;/strong&gt;复制到你的剪贴板。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;第三步获取-jsdelivr-加速链接&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第三步获取-jsdelivr-加速链接&#34;&gt;#&lt;/a&gt; 第三步：获取 jsDelivr 加速链接&lt;/h3&gt;
&lt;p&gt;无论你是否使用 PicGo 等工具，图片上传到 GitHub 仓库后，其 jsDelivr 的加速链接都遵循统一的格式：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;https://cdn.jsdelivr.net/gh/你的GitHub用户名/你的仓库名@发布的版本号/文件路径&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;@发布的版本号&lt;/code&gt; &lt;/strong&gt;：这部分是可选的。可以是分支名（如  &lt;code&gt;@main&lt;/code&gt; ）、具体的发布版本号（如  &lt;code&gt;@v1.0&lt;/code&gt; ）或提交哈希值。&lt;strong&gt;如果不指定版本，默认会指向最新资源&lt;/strong&gt;。
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;最佳实践&lt;/strong&gt;：对于图床，&lt;strong&gt;通常建议省略  &lt;code&gt;@版本号&lt;/code&gt; &lt;/strong&gt;，这样总能访问到最新上传的图片。例如：&lt;br&gt;
 &lt;code&gt;https://cdn.jsdelivr.net/gh/yourusername/my-image-bed/images/cat.jpg&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;注意事项&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#注意事项&#34;&gt;#&lt;/a&gt; 注意事项&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;仓库必须公开&lt;/strong&gt;：jsDelivr &lt;strong&gt;无法&lt;/strong&gt;加速私有仓库的资源。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;文件大小限制&lt;/strong&gt;：jsDelivr 建议文件大小控制在 20MB 以内，这对于绝大多数图片来说足够了。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缓存问题&lt;/strong&gt;：jsDelivr 会对文件进行缓存以提升速度。这意味着如果你更新了 GitHub 仓库中的同名图片，可能需要等待几分钟到几小时缓存刷新后，通过 jsDelivr 链接才能看到变更。&lt;strong&gt;强制更新缓存的方法是在链接后添加特定版本号、分支名或哈希值&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Token 安全&lt;/strong&gt;：你的 GitHub Token 相当于密码，&lt;strong&gt;切勿泄露&lt;/strong&gt;。一旦泄露，应立即到 GitHub 设置中撤销它。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;API 速率限制&lt;/strong&gt;：GitHub API 有调用频率限制。对于个人使用通常不会触限，但如果是极高频率调用，需要注意。&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="图床" />
        <updated>2025-09-26T09:55:51.000Z</updated>
    </entry>
    <entry>
        <id>https://lzq-cv.github.io/2025/09/26/%E4%BD%BF%E7%94%A8PICGO-CloudflarR2%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/</id>
        <title>使用PICGO-CloudflarR2搭建个人图床</title>
        <link rel="alternate" href="https://lzq-cv.github.io/2025/09/26/%E4%BD%BF%E7%94%A8PICGO-CloudflarR2%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/"/>
        <content type="html">&lt;h3 id=&#34;cloudflare-r2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#cloudflare-r2&#34;&gt;#&lt;/a&gt; Cloudflare R2&lt;/h3&gt;
&lt;p&gt;自己搭建图床既能掌控数据，又能在长期节省成本。Cloudflare R2 因其&lt;strong&gt;免费额度慷慨&lt;/strong&gt;（每月 10GB 存储、100 万次 A 类操作、1000 万次 B 类操作）且&lt;strong&gt;出口流量全免&lt;/strong&gt;，成为了一个非常不错的选择。&lt;/p&gt;
&lt;h3 id=&#34;cloudflare-r2-免费额度&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#cloudflare-r2-免费额度&#34;&gt;#&lt;/a&gt; Cloudflare R2 免费额度&lt;/h3&gt;
&lt;p&gt;首先，我们来了解一下 Cloudflare R2 的免费计划：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;资源类型&lt;/th&gt;
&lt;th&gt;每月免费额度&lt;/th&gt;
&lt;th&gt;超额费率 (截至 2025 年)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;存储空间&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;10 GB&lt;/td&gt;
&lt;td&gt;$0.015 / GB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;A 类操作&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;100 万次请求 (写入、列举等)&lt;/td&gt;
&lt;td&gt;$4.50 / 100 万次请求&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;B 类操作&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;1000 万次请求 (读取等)&lt;/td&gt;
&lt;td&gt;$0.36 / 100 万次请求&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;出口流量&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;完全免费&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;完全免费&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：A 类操作通常包括上传、列举文件等写入操作，而 B 类操作主要是下载、获取文件等读取操作。免费额度对于个人博客或小规模网站通常足够。&lt;/p&gt;
&lt;h3 id=&#34;搭建步骤&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#搭建步骤&#34;&gt;#&lt;/a&gt; 搭建步骤&lt;/h3&gt;
&lt;h3 id=&#34;第一步准备工作&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第一步准备工作&#34;&gt;#&lt;/a&gt; 第一步：准备工作&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;注册 Cloudflare 账号&lt;/strong&gt;：访问 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kYXNoLmNsb3VkZmxhcmUuY29tL3NpZ24tdXA=&#34;&gt;Cloudflare 官网&lt;/span&gt; 并注册账号。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;准备域名&lt;/strong&gt;：需要一个&lt;strong&gt;已托管在 Cloudflare 上&lt;/strong&gt;的域名（作为图床的最终访问域名）。你可以在 Cloudflare 添加现有的域名，或者注册新域名后将其 DNS 服务器改为 Cloudflare 指定的。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;验证支付方式&lt;/strong&gt;：虽然 R2 有免费额度，但 Cloudflare 仍需要你绑定一种支付方式（如信用卡或 PayPal）以验证身份。&lt;strong&gt;只要用量不超额，就不会产生费用&lt;/strong&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;第二步配置-cloudflare-r2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第二步配置-cloudflare-r2&#34;&gt;#&lt;/a&gt; 第二步：配置 Cloudflare R2&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;开通 R2 服务&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;登录 Cloudflare 仪表板，在侧边栏找到 &lt;strong&gt;“R2”&lt;/strong&gt; 并点击。&lt;/li&gt;
&lt;li&gt;按照提示完成支付方式的绑定以开通 R2。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;创建存储桶（Bucket）&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;在 R2 页面点击 &lt;strong&gt;“创建存储桶”&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;填写存储桶名称（例如  &lt;code&gt;my-image-bed&lt;/code&gt; ）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;地区（Region）&lt;/strong&gt; 选择离你的目标用户较近的区域，例如  &lt;code&gt;亚太地区 (APAC)&lt;/code&gt;  对国内访问更友好。&lt;/li&gt;
&lt;li&gt;其他设置保持默认，点击创建。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;启用公共访问权限&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;创建成功后，进入该存储桶的 &lt;strong&gt;“设置”&lt;/strong&gt; 页。&lt;/li&gt;
&lt;li&gt;找到 &lt;strong&gt;“公共访问”&lt;/strong&gt; 选项，点击 &lt;strong&gt;“启用”&lt;/strong&gt; 并确认。这将生成一个临时的  &lt;code&gt;r2.dev&lt;/code&gt;  子域名用于访问文件。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;（强烈推荐）使用自定义域名&lt;/strong&gt;：临时的  &lt;code&gt;r2.dev&lt;/code&gt;  域名有速率限制。在存储桶设置的 &lt;strong&gt;“自定义域”&lt;/strong&gt; 部分，添加你已托管在 CF 的域名（例如  &lt;code&gt;img.yourdomain.com&lt;/code&gt; ）。Cloudflare 会自动为你配置 DNS 记录。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;获取 API 凭证&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;在仪表板左侧栏找到 &lt;strong&gt;“R2” &amp;gt; “API 令牌”&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;点击 &lt;strong&gt;“创建 API 令牌”&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;选择 &lt;strong&gt;“编辑”&lt;/strong&gt; 权限，并指定到你刚创建的存储桶。&lt;/li&gt;
&lt;li&gt;安全起见，可以设置令牌的 TTL（生存时间），对于长期使用的图床，可选择永久。&lt;/li&gt;
&lt;li&gt;创建成功后，&lt;strong&gt;务必妥善保存&lt;/strong&gt;显示的  &lt;code&gt;访问密钥 ID&lt;/code&gt;  和  &lt;code&gt;秘密访问密钥&lt;/code&gt; ，它们只会显示一次。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;第三步配置图床管理工具以-picgo-为例&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第三步配置图床管理工具以-picgo-为例&#34;&gt;#&lt;/a&gt; 第三步：配置图床管理工具（以 PicGo 为例）&lt;/h3&gt;
&lt;p&gt;PicGo 是一个开源图床客户端，可以简化上传操作。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;下载并安装 PicGo&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;访问 PicGo 的 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL01vbHVuZXJmaW5uL1BpY0dvL3JlbGVhc2Vz&#34;&gt;GitHub Releases 页面&lt;/span&gt;，下载并安装适合你操作系统的最新版本。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;安装 S3 插件&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;由于 Cloudflare R2 兼容 S3 API，我们需要在 PicGo 中安装 S3 插件。&lt;/li&gt;
&lt;li&gt;打开 PicGo，进入 &lt;strong&gt;“插件设置”&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;搜索并安装  &lt;code&gt;picgo-plugin-s3&lt;/code&gt;  插件。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;配置 PicGo&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;安装插件后，在 &lt;strong&gt;“图床设置”&lt;/strong&gt; 中找到 &lt;strong&gt;“Amazon S3”&lt;/strong&gt; 进行配置。&lt;/li&gt;
&lt;li&gt;关键配置项如下（请根据你的实际情况填写）：&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;配置项&lt;/th&gt;
&lt;th&gt;填写值说明&lt;/th&gt;
&lt;th&gt;示例（请替换为你自己的信息）&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;应用密钥 ID&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;填写你刚才保存的  &lt;code&gt;访问密钥 ID&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;1a2b3c4d5e6f7g8h9i0j&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;应用密钥&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;填写你刚才保存的  &lt;code&gt;秘密访问密钥&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;z0y1x2w3v4u5t6s7r8q9p...&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;存储桶名&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;你创建的存储桶名称&lt;/td&gt;
&lt;td&gt;&lt;code&gt;my-image-bed&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;存储区域&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;R2 无需填写特定区域，可填写  &lt;code&gt;auto&lt;/code&gt;  或留空&lt;/td&gt;
&lt;td&gt;&lt;code&gt;auto&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;自定义节点&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;填写你的 S3 API 端点（可在 R2 的 API 令牌页面找到）&lt;/td&gt;
&lt;td&gt;&lt;code&gt;https://xxx.r2.cloudflarestorage.com&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;自定义域名&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;填写你连接到存储桶的自定义域名&lt;/strong&gt;，用于生成图片链接&lt;/td&gt;
&lt;td&gt;&lt;code&gt;https://img.yourdomain.com&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;文件路径&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;定义图片在存储桶中的存储路径结构（可选，但建议设置以保持整洁）&lt;/td&gt;
&lt;td&gt;&lt;code&gt;{year}/{month}/{day}/{fileName}&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;ACL 访问控制列表&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;必须设置为  &lt;code&gt;public-read&lt;/code&gt; ，这样图片链接才能被公开访问&lt;/td&gt;
&lt;td&gt;&lt;code&gt;public-read&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;提示&lt;/strong&gt;： &lt;code&gt;{year}&lt;/code&gt; ,  &lt;code&gt;{month}&lt;/code&gt; ,  &lt;code&gt;{day}&lt;/code&gt; ,  &lt;code&gt;{fileName}&lt;/code&gt;  是 PicGo 的&lt;strong&gt;变量&lt;/strong&gt;，会自动替换为实际值。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;设为默认图床并上传测试&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;配置完成后，可以点击 &lt;strong&gt;“设为默认图床”&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;在 &lt;strong&gt;“上传区”&lt;/strong&gt; 拖拽或选择一张图片进行上传。&lt;/li&gt;
&lt;li&gt;上传成功后，PicGo 会自动将图片的 Markdown 链接复制到剪贴板。你可以粘贴到文本编辑器中测试一下是否能正常访问。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;第四步访问优化与安全设置可选但重要&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第四步访问优化与安全设置可选但重要&#34;&gt;#&lt;/a&gt; 第四步：访问优化与安全设置（可选但重要）&lt;/h3&gt;
&lt;p&gt;为了让图床更高效、安全，建议进行如下设置：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;配置缓存规则&lt;/strong&gt;：利用 Cloudflare CDN 缓存图片，减少回源请求，提升速度并节省操作次数。
&lt;ul&gt;
&lt;li&gt;在 Cloudflare 仪表板中，进入你的&lt;strong&gt;域名&lt;/strong&gt;（而非 R2）。&lt;/li&gt;
&lt;li&gt;转到 &lt;strong&gt;“规则” &amp;gt; “缓存规则”&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;创建一条新规则，URL 填写  &lt;code&gt;img.yourdomain.com/*&lt;/code&gt; （你的图床域名）。&lt;/li&gt;
&lt;li&gt;添加设置：&lt;strong&gt;缓存级别&lt;/strong&gt; - 缓存所有内容。&lt;/li&gt;
&lt;li&gt;添加设置：&lt;strong&gt;边缘缓存 TTL&lt;/strong&gt; - 设置为一个较长的时间，例如 “1 个月”。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;设置防盗链（WAF）&lt;/strong&gt;：防止其他网站直接链接你的图片，消耗你的流量和请求次数。
&lt;ul&gt;
&lt;li&gt;在域名的 &lt;strong&gt;“安全性” &amp;gt; “WAF”&lt;/strong&gt; 中创建自定义规则。&lt;/li&gt;
&lt;li&gt;编写规则，例如： &lt;code&gt;(http.referer does not contain &amp;quot;yourdomain.com&amp;quot;) and (http.request.uri.path contains &amp;quot;/images/&amp;quot;)&lt;/code&gt; ，操作选择 “阻止”。这表示仅允许来自你自己域名（ &lt;code&gt;yourdomain.com&lt;/code&gt; ）的请求访问图片目录。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;配置 CORS（跨域资源共享）&lt;/strong&gt;：如果你的图床图片需要被不同域名的网站引用（例如你的主站、CDN 等），需要在存储桶设置中配置 CORS。
&lt;ul&gt;
&lt;li&gt;在存储桶的 &lt;strong&gt;“设置”&lt;/strong&gt; 中找到 &lt;strong&gt;“CORS 策略”&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;添加策略，允许所需域名的  &lt;code&gt;GET&lt;/code&gt;  请求。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;总结与提醒&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#总结与提醒&#34;&gt;#&lt;/a&gt; 总结与提醒&lt;/h3&gt;
&lt;p&gt;通过以上步骤，你应该已经成功搭建了一个基于 Cloudflare R2 的免费图床。它&lt;strong&gt;免费额度充足&lt;/strong&gt;、&lt;strong&gt;性能可靠&lt;/strong&gt;，并且通过 PicGo 可以&lt;strong&gt;非常便捷地上传和管理图片&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;最后请注意：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;保管好 API 令牌&lt;/strong&gt;：如同密码，切勿泄露。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;关注用量&lt;/strong&gt;：定期在 Cloudflare 仪表板检查 R2 的使用情况，确保在免费额度内。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;备份重要图片&lt;/strong&gt;：虽然 R2 很可靠，但对于极其重要的图片，建议额外备份。&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="图床" />
        <updated>2025-09-26T09:54:33.000Z</updated>
    </entry>
    <entry>
        <id>https://lzq-cv.github.io/2025/09/26/%E5%85%8D%E8%B4%B9%E5%9B%BE%E5%BA%8A%E8%B8%A9%E5%9D%91/</id>
        <title>免费图床踩坑</title>
        <link rel="alternate" href="https://lzq-cv.github.io/2025/09/26/%E5%85%8D%E8%B4%B9%E5%9B%BE%E5%BA%8A%E8%B8%A9%E5%9D%91/"/>
        <content type="html">&lt;h3 id=&#34;踩坑&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#踩坑&#34;&gt;#&lt;/a&gt; 踩坑&lt;/h3&gt;
&lt;p&gt;免费的图床是真的不稳定，上传的图片随时都有被清除的可能，想要长期使用还是需要自己搭建图床。但是，我对图床需求又不是特别多，只为博客网站提供图片源仅此而已。花钱去买阿里云 OSS 和腾讯云 COS 的云存储服务，又不太值。查了一些免费图床搭建方法，目前就 2 种比较推荐的：&lt;/p&gt;
&lt;p&gt;方法 1：CloudflareR2+PICGO&lt;/p&gt;
&lt;p&gt;方法 2：Github+PICGO&lt;/p&gt;
&lt;h3 id=&#34;临时使用的免费图床&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#临时使用的免费图床&#34;&gt;#&lt;/a&gt; 临时使用的免费图床：&lt;/h3&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9pbWcuMTMxMjEzLnh5ei8=&#34;&gt;图床&lt;/span&gt;&lt;/p&gt;
</content>
        <category term="图床" />
        <updated>2025-09-26T09:52:04.000Z</updated>
    </entry>
</feed>
