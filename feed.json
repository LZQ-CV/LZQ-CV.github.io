{
    "version": "https://jsonfeed.org/version/1",
    "title": "Learning-Sharing-Recording",
    "subtitle": "To be,or not to be,that is the question",
    "icon": "https://lzq-cv.github.io/images/favicon.ico",
    "description": "CV Engineer",
    "home_page_url": "https://LZQ-CV.github.io",
    "items": [
        {
            "id": "https://lzq-cv.github.io/PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA/",
            "url": "https://lzq-cv.github.io/PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA/",
            "title": "PyTorch深度学习框架搭建",
            "date_published": "2025-09-29T13:15:52.000Z",
            "content_html": "<h1 id=\"pytorch深度学习环境搭建\"><a class=\"anchor\" href=\"#pytorch深度学习环境搭建\">#</a> PyTorch 深度学习环境搭建</h1>\n<h3 id=\"一python\"><a class=\"anchor\" href=\"#一python\">#</a> 一，Python</h3>\n<p>官方网站：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucHl0aG9uLm9yZy9kb3dubG9hZHMvd2luZG93cy8=\">python.org/downloads/windows/</span></p>\n<p>安装好后查看版本</p>\n<p><figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 推荐<span class=\"number\">3</span>.<span class=\"number\">10</span></span><br><span class=\"line\">python -V or python --version</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"二cuda-toolkit\"><a class=\"anchor\" href=\"#二cuda-toolkit\">#</a> 二，CUDA Toolkit</h3>\n<p>官方网站：[<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIubnZpZGlhLmNvbS9jdWRhLXRvb2xraXQtYXJjaGl2ZQ==\">CUDA Toolkit Archive | NVIDIA Developer</span>](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIubnZpZGlhLmNvbS9jdWRhLWRvd25sb2Fkcw==\">https://developer.nvidia.com/cuda-downloads</span>)</p>\n<p>先查看当前显卡驱动支持的最高 CUDA 版本</p>\n<p><img data-src=\"https://lzq-cv.oss-cn-shanghai.aliyuncs.com/GPU.png\" alt=\"\" /></p>\n<p>然后，安装 CUDA，这里最高支持 12.3，推荐安装 CUDA11.8 稳定版本</p>\n<p>CUDA 安装好后，查看 CUDA 安装的版本</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvcc --version</span><br></pre></td></tr></table></figure></p>\n<p><img data-src=\"https://lzq-cv.oss-cn-shanghai.aliyuncs.com/CUDA.png\" alt=\"\" /></p>\n<h3 id=\"三anaconda\"><a class=\"anchor\" href=\"#三anaconda\">#</a> 三，Anaconda</h3>\n<p>官方网站：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYW5hY29uZGEuY29tL2Rvd25sb2Fk\">https://www.anaconda.com/download</span></p>\n<p>选择与 python 版本对应的版本安装</p>\n<p>安装好后查看当前版本</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda --version</span><br></pre></td></tr></table></figure></p>\n<p><img data-src=\"https://lzq-cv.oss-cn-shanghai.aliyuncs.com/anaconda.png\" alt=\"\" /></p>\n<h3 id=\"四cudnn\"><a class=\"anchor\" href=\"#四cudnn\">#</a> 四，cuDNN</h3>\n<p>官方网站：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIubnZpZGlhLmNvbS9jdWRubi1kb3dubG9hZHM=\">https://developer.nvidia.com/cudnn-downloads</span></p>\n<p>解压缩后拖入，如图</p>\n<p><img data-src=\"https://lzq-cv.oss-cn-shanghai.aliyuncs.com/cuDNN.png\" alt=\"\" /></p>\n<h3 id=\"五pytorch\"><a class=\"anchor\" href=\"#五pytorch\">#</a> 五，PyTorch</h3>\n<p>官方网站：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9weXRvcmNoLm9yZy9nZXQtc3RhcnRlZC9wcmV2aW91cy12ZXJzaW9ucy8=\">Previous PyTorch Versions</span></p>\n<p><img data-src=\"https://lzq-cv.oss-cn-shanghai.aliyuncs.com/pytorch.png\" alt=\"\" /></p>\n<h3 id=\"六pycharm\"><a class=\"anchor\" href=\"#六pycharm\">#</a> 六，Pycharm</h3>\n<p>官方网站：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamV0YnJhaW5zLmNvbS96aC1jbi9weWNoYXJtL2Rvd25sb2FkL290aGVyLmh0bWw=\">https://www.jetbrains.com/zh-cn/pycharm/download/other.html</span></p>\n<p><img data-src=\"https://lzq-cv.oss-cn-shanghai.aliyuncs.com/6.png\" alt=\"\" /></p>\n<h3 id=\"七测试代码\"><a class=\"anchor\" href=\"#七测试代码\">#</a> 七，测试代码</h3>\n<p><img data-src=\"https://lzq-cv.oss-cn-shanghai.aliyuncs.com/PyTorchGPU.png\" alt=\"\" /></p>\n",
            "tags": [
                "Artificial-Intelligence",
                "Deep-Learning",
                "PyTorch"
            ]
        },
        {
            "id": "https://lzq-cv.github.io/Excerpts-from-The-Little-Prince/",
            "url": "https://lzq-cv.github.io/Excerpts-from-The-Little-Prince/",
            "title": "Excerpts-from-The-Little-Prince",
            "date_published": "2025-09-28T08:17:17.000Z",
            "content_html": "<h1 id=\"excerpts-from-the-little-prince\"><a class=\"anchor\" href=\"#excerpts-from-the-little-prince\">#</a> Excerpts from <em>The-Little-Prince</em></h1>\n<p>It was then that the fox appeared.<br />\n 这时来了一只狐狸。</p>\n<p>“Good morning,” said the fox.<br />\n“早上好，” 狐狸说。</p>\n<p>“Good morning,” the little prince responded politely, although when he turned around he saw nothing.<br />\n“早上好，” 小王子彬彬有礼地回答。他转过身，却没看到什么人。</p>\n<p>“I am right here,” the voice said, “under the apple tree.”<br />\n“我在这儿呢，苹果树底下，” 这声音提醒他。</p>\n<p>“Who are you?” asked the little prince, and added, “You are very pretty to look at.”<br />\n“你是谁？” 小王子问道，“你长得真漂亮。”</p>\n<p>“I am a fox,’ said the fox.<br />\n“我是一只狐狸，” 狐狸回答道。</p>\n<p>“Come and play with me,” proposed the little prince. “I am so unhappy.”<br />\n“和我一起玩吧，” 小王子向狐狸建议，“我苦恼极了。”</p>\n<p>“I cannot play with you,” the fox said. “I am not tamed.”<br />\n“我不能和你玩，” 狐狸说，“我还没有被你驯养呢。”</p>\n<p>“Ah! Please excuse me,” said the little prince. But, after some thought, he added: “What does that mean—‘tame’?”<br />\n“啊！对不起，” 小王子说道。但是他思索了一会儿，又说：“‘驯养’是什么意思？”</p>\n<p>“You do not live here,” said the fox. “What is it that you are looking for?”<br />\n“你不是本地人，” 狐狸说道，“你来这儿找寻什么呢？”</p>\n<p>“I am looking for men,” said the little prince. “What does that mean—‘tame’?”<br />\n“我正在找人，” 小王子答道，“‘驯养’是什么意思？”</p>\n<p>“Men,” said the fox. “They have guns, and they hunt. It is very disturbing. They also raise chickens. These are their only interests. Are you looking for chickens?”<br />\n“人，” 狐狸说道，“人有枪，他们会打猎。这可真讨厌。他们养鸡。这两件事是他们唯一的爱好。你也寻找鸡吗？”</p>\n<p>“No,” said the little prince. “I am looking for friends. What does that mean—‘tame’?”<br />\n“不，” 小王子说道，“我是来找朋友的。‘驯养’是什么意思呢？</p>\n<p>“It is an act too often neglected,” said the fox. “It means to establish ties .”<br />\n“它是经常被人们遗忘的一种行为，” 狐狸答道，“它的意思是‘建立联系’。”</p>\n<p>“To establish ties?”<br />\n“建立联系？”</p>\n<p>“Just that,” said the fox. “To me, you are still nothing more than a little boy who is just like a hundred thousand other little boys. And I have no need of you. And you, on your part, have no need of me. To you, I am nothing more than a fox like a hundred thousand other foxes. But if you tame me, then we shall need each other. To me, you will be unique in all the world. To you, I shall be unique in all the world...”<br />\n“当然了，” 狐狸说道，“对我来说，你与其他成千上万个小男孩没什么区别。我不需要你，你也不需要我。对你来说，我与其他成千上万只狐狸毫无差别。但是，如果你驯服了我，我们就谁也离不开谁了。那时候，对我来说，在这个世界上你就是独一无二的。而对你而言，我也是这个世界上独一无二的……”</p>\n<p>“I am beginning to understand,” said the little prince. “There is a flower... I think that she has tamed me...”<br />\n“我有点明白了，” 小王子说，“我有一朵花…… 我想，她已经驯服了我……”</p>\n<p>“It is possible,” said the fox. “On the Earth one sees all sorts of things… ”<br />\n“这是可能的，” 狐狸说，“在这个地球上，什么千奇百怪的事情都有可能发生……”</p>\n<p>“My life is very monotonous ,” the fox said. “I hunt chickens; men hunt me. All the chickens are just alike, and all the men are just alike. And, in consequence, I am a little bored. But if you tame me, it will be as if the sun came to shine on my life. I shall know the sound of a step that will be different from all the others. Other steps send me hurrying back underneath the ground. Yours will call me, like music, out of my burrow . And then look: you see the grain-fields down yonder ? I do not eat bread. Wheat is of no use to me. The wheat fields have nothing to say to me. And that is sad. But you have hair that is the colour of gold. Think how wonderful that will be when you have tamed me! The grain, which is also golden, will bring me back the thought of you. And I shall love to listen to the wind in the wheat... ”<br />\n“我的生活单调乏味，” 狐狸说，“我捉鸡，人捉我。所有的鸡都是一模一样的，所有的人也都是一模一样的。因此，我感到有些厌烦了。但是如果你驯服了我，我的生活将会充满阳光和欢乐。我将会分辨出一种与众不同的脚步声。听到别的脚步声，我会急急忙忙躲进地下洞穴。而唯独你的脚步声会像音乐一样，唤我出洞。再说，你瞧瞧，你看到那边的麦田了吗？我从来不吃面包，小麦也对我毫无用处。麦田也不会使我产生任何联想。这是多么可悲啊！但是，你有一头金黄色的头发。一旦你驯养我，想象一下那该是多美好的事啊：那金黄色的小麦会让我联想起你来。于是，我也会喜欢听穿过麦田的风声……”</p>\n<p>The fox gazed at the little prince, for a long time. “Please—tame me!” he said.<br />\n 狐狸盯着小王子看了很久。“请你…… 请你驯养我吧！” 狐狸最后说道。</p>\n<p>“I want to, very much,” the little prince replied. “But I have not much time. I have friends to discover, and a great many things to understand.”<br />\n“我很想驯养你，” 小王子回答道，“但是我没有那么多时间。我得去找朋友，还要去学习理解许多许多的事情。”</p>\n<p>“One only understands the things that one tames,” said the fox. “Men have no more time to understand anything. They buy things all ready made at the shops. But there is no shop anywhere where one can buy friendship, and so men have no friends any more. If you want a friend, tame me... ”<br />\n“只有被人们驯服了的事物，才能被人们所理解，” 狐狸说道，“人们再也没有时间去认识新的事物了。他们总是到商店里买现成的东西。但是，世界上还没有贩卖友谊的商店，因此人们再也没有朋友了。要是你想交一个朋友，就请驯养我吧……”</p>\n<p>“What must I do, to tame you?” asked the little prince.<br />\n“驯养你，那我应该怎么做呢？” 小王子问道。</p>\n<p>“You must be very patient,” replied the fox. “First you will sit down at a little distance from me—like that—in the grass. I shall look at you out of the corner of my eye, and you will say nothing. Words are the source of misunderstandings. But you will sit a little closer to me, every day... ”<br />\n“你必须很耐心，” 狐狸答道，“首先，你坐在草地上，离我有一些距离 —— 就像这样。我偷偷地用眼角观察你，你什么也别说。言语是误会的根源。但是，你每天都可以坐得离我更近一些……”</p>\n<p>The next day the little prince came back.<br />\n 第二天，小王子又来了。</p>\n<p>“It would have been better to come back at the same hour,” said the fox. “If, for example, you come at four o’clock in the afternoon, then at three o’clock I shall begin to be happy. I shall feel happier and happier as the hour advances. At four o’clock, I shall already be worrying and jumping about. I shall show you how happy I am! But if you come at just any time, I shall never know at what hour my heart is to be ready to greet you... One must observe the proper rites... ”<br />\n“你最好每天都在同一个时刻过来，” 狐狸说道，“比如说你下午四点来，那我从三点开始就会感到快乐。离四点越近，我就会越来越快乐。四点一到，我就会坐立不安。我会让你看到我究竟有多快乐！但是如果你来的时间不固定，我就不知道该什么时候开始准备迎接你…… 我们应该遵循正确的仪式……”</p>\n<p>“What is a rite?” asked the little prince.<br />\n“什么是仪式？” 小王子问道。</p>\n<p>“Those also are actions too often neglected,” said the fox. “They are what make one day different from other days, one hour from other hours. There is a rite, for example, among my hunters. Every Thursday they dance with the village girls. So Thursday is a wonderful day for me! I can take a walk as far as the vineyards. But if the hunters danced at just any time, every day would be like every other day, and I should never have any vacation at all.”<br />\n“这也是经常被人遗忘的行为，” 狐狸说，“所谓仪式，就是使某一天不同于其他日子，使某一时刻不同于其他时刻。比如说，捉我的那些猎人们就有一个仪式。每逢周四，他们都和村里的姑娘们跳舞。因此，周四成为了一个多么美妙的日子啊！我可以外出散步，直到葡萄园边上。如果猎人们随便什么时候都跳舞，每天都如此，那我也就没有休息的时候了。”</p>\n<p>“Go and look again at the roses. You will understand now that yours is unique in all the world. Then come back to say goodbye to me, and I will make you a present of a secret.”<br />\n“你再去看看那些玫瑰花吧。你一定会明白，你的那朵花为什么是天下独一无二的玫瑰了。然后再回到我的身边向我告别，那时我将赠予你一个秘密作为离别礼物。”</p>\n<p>The little prince went away, to look again at the roses. “You are not at all like my rose,” he said. “As yet you are nothing. No one has tamed you, and you have tamed no one. You are like my fox when I first knew him. He was only a fox like a hundred thousand other foxes. But I have made him my friend, and now he is unique in all the world… ”<br />\n 于是小王子就跑去看那些玫瑰花。“你们一点也不像我的那朵玫瑰花，” 他说道，“对我而言，你们什么都不是。没有人驯养过你们，你们也没有驯养过别人。你们就像我第一次见到狐狸一样，它那时和其他成千上万的狐狸没什么区别。但是，现在它成为了我的朋友，现在它就是世界上独一无二的狐狸了……”</p>\n<p>And he went back to meet the fox.<br />\n 说完，小王子回到了狐狸的身边。</p>\n<p>“Goodbye,” he said.<br />\n“再见，” 他说道。</p>\n<p>“Goodbye,” said the fox. “And now here is my secret, a very simple secret: It is only with the heart that one can see rightly; what is essential is invisible to the eye.”<br />\n“再见，” 狐狸回应道，“这就是我的秘密，它很简单：只有心灵才能洞察一切，事物的本质是肉眼无法看到的。”</p>\n<p>“What is essential is invisible to the eye,” the little prince repeated, so that he would be sure to remember…<br />\n“事物的本质是肉眼无法看到的，” 小王子重复着这句话，要把它记在心间。</p>\n<p>“Men have forgotten this truth,” said the fox. “But you must not forget it. You become responsible, forever, for what you have tamed. You are responsible for your rose... ”<br />\n“人们已经忘记了这个真理，” 狐狸说，“但是你千万不要忘记：你要对你驯服过的一切永远负责，你要对你的那朵玫瑰花负责……”</p>\n<p>“I am responsible for my rose,” the little prince repeated, so that he would be sure to remember.<br />\n“我要对我的那朵玫瑰花负责……” 小王子重复着这句话，要把它记在心间。</p>\n",
            "tags": [
                "English",
                "Excerpts",
                "English"
            ]
        },
        {
            "id": "https://lzq-cv.github.io/2D%E8%A7%86%E8%A7%89%E7%9A%84%E4%B8%BB%E6%B5%81%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/",
            "url": "https://lzq-cv.github.io/2D%E8%A7%86%E8%A7%89%E7%9A%84%E4%B8%BB%E6%B5%81%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/",
            "title": "2D视觉的主流应用场景",
            "date_published": "2025-09-27T01:45:29.000Z",
            "content_html": "<h3 id=\"2d视觉主流应用场景与技术栈详解\"><a class=\"anchor\" href=\"#2d视觉主流应用场景与技术栈详解\">#</a> 2D 视觉主流应用场景与技术栈详解</h3>\n<p>主流的 2D 视觉应用分为以下几个大类。</p>\n<hr />\n<h4 id=\"1-安防与监控\"><a class=\"anchor\" href=\"#1-安防与监控\">#</a> 1. 安防与监控</h4>\n<p>这是 2D 视觉最经典、最广泛的应用领域。</p>\n<ul>\n<li>\n<p><strong>核心任务：</strong></p>\n<ul>\n<li><strong>人脸识别与身份验证：</strong> 门禁系统、手机解锁、公共安全排查。</li>\n<li><strong>人体检测与行为分析：</strong> 入侵检测、人群密度估计、徘徊检测、跌倒检测、打架斗殴识别。</li>\n<li><strong>车辆识别与交通监控：</strong> 车牌识别、车辆违章检测（闯红灯、压线）、交通流量分析。</li>\n<li><strong>物体遗留 / 消失检测：</strong> 在机场、火车站等场景检测可疑包裹。</li>\n</ul>\n</li>\n<li>\n<p><strong>主流技术栈：</strong></p>\n<ul>\n<li><strong>检测模型：</strong>\n<ul>\n<li><strong>YOLO 系列 (v5, v8, v9)：</strong> 绝对是该领域的首选，因其极高的速度和良好的精度，非常适合实时视频流分析。</li>\n<li><strong>SSD, RetinaNet：</strong> 也是常用的单阶段检测器。</li>\n</ul>\n</li>\n<li><strong>识别 / 分类模型：</strong>\n<ul>\n<li><strong>人脸识别：</strong> 使用专门的人脸检测（如 MTCNN、RetinaFace）加上人脸识别模型（如<strong> ArcFace</strong>、FaceNet、CosFace）。这些模型将人脸图像映射为一个高维特征向量，通过比对向量相似度进行身份识别。</li>\n<li><strong>行为识别：</strong> 相对复杂，通常需要处理视频序列。技术包括：\n<ul>\n<li><strong>3D CNN：</strong> 直接处理视频片段。</li>\n<li><strong>CNN + RNN/LSTM：</strong> 用 CNN 提取每一帧的特征，再用 RNN/LSTM 学习时序关系。</li>\n<li><strong>基于 Transformer 的方法：</strong> 如 TimeSformer，更好地捕捉长距离依赖。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>关键工具：</strong>\n<ul>\n<li><strong>OpenCV：</strong> 用于视频流捕获、图像预处理、绘制检测框、车牌识别中的字符分割等。</li>\n<li><strong>深度学习框架：</strong> PyTorch（研究和新模型部署主流）、TensorFlow（现有系统较多）。</li>\n<li><strong>部署工具：</strong> <strong>NVIDIA TensorRT</strong>（用于在 NVIDIA GPU 上极致加速推理）、<strong>OpenVINO</strong>（用于 Intel CPU/GPU 等硬件）。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>实际考量：</strong></p>\n<ul>\n<li><strong>实时性要求极高：</strong> 模型必须轻量化，通常需要在边缘设备（如 Jetson Nano、华为 Atlas）上运行。</li>\n<li><strong>光照、角度变化大：</strong> 要求模型有很强的鲁棒性，数据增强（如随机亮度、对比度变化）非常重要。</li>\n<li><strong>隐私问题：</strong> 需要遵循相关法律法规。</li>\n</ul>\n</li>\n</ul>\n<hr />\n<h4 id=\"2-工业质检与自动化\"><a class=\"anchor\" href=\"#2-工业质检与自动化\">#</a> 2. 工业质检与自动化</h4>\n<p>这是 2D 视觉在工业界创造巨大价值的核心应用。</p>\n<ul>\n<li>\n<p><strong>核心任务：</strong></p>\n<ul>\n<li><strong>缺陷检测：</strong> 检测产品表面的划痕、凹陷、污点、毛刺等。</li>\n<li><strong>分类与分拣：</strong> 根据外观对产品进行合格 / 不合格分类，或按不同品类分拣。</li>\n<li><strong>定位与引导：</strong> 精确识别零件的位置和姿态，引导机械臂进行抓取、装配。</li>\n<li><strong>OCR 读取：</strong> 读取产品上的生产日期、批次号、序列号。</li>\n</ul>\n</li>\n<li>\n<p><strong>主流技术栈：</strong></p>\n<ul>\n<li><strong>缺陷检测：</strong>\n<ul>\n<li><strong>传统方法：</strong> 在规则、可控的照明环境下，传统算法依然非常有效且快速。例如，使用<strong> Blob 分析</strong>（找连通域）、<strong>模板匹配</strong>、<strong>形态学操作</strong>、<strong>频域滤波</strong>（如傅里叶变换找周期性缺陷）等。<strong>Halcon</strong> 和 <strong>VisionPro</strong> 是商业软件中的佼佼者。</li>\n<li><strong>深度学习方法：</strong> 对于复杂、不规则的缺陷，深度学习是更好的选择。\n<ul>\n<li><strong>语义分割：</strong> <strong>U-Net</strong> 及其变体是主流，可以像素级精确地定位缺陷区域。</li>\n<li><strong>生成式方法：</strong> 使用<strong>自编码器</strong> 或<strong>生成对抗网络</strong> 学习正常样本的特征，然后通过重建误差来检测异常（缺陷被视为异常）。这种方法特别适合<strong>缺陷样本稀少</strong>的场景。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>定位与 OCR：</strong>\n<ul>\n<li><strong>定位：</strong> 通常使用<strong>模板匹配</strong>（传统）或训练一个目标检测模型（如 YOLO）来预测物体的边界框或角点。</li>\n<li><strong>OCR：</strong> 通用场景可用 <strong>PaddleOCR</strong>、<strong>Tesseract</strong>。工业场景中字符通常规则且背景固定，也可以自己训练 CRNN（CNN+RNN+CTC）等模型，精度更高。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>实际考量：</strong></p>\n<ul>\n<li><strong>环境可控：</strong> 光照、相机位置、背景都是固定的，这是与安防场景的最大不同。</li>\n<li><strong>精度要求极高：</strong> 漏检和误检的成本很高，模型评估指标（如 mAP, IoU）要求严格。</li>\n<li><strong>速度要求：</strong> 需跟上生产线节奏，但通常不如安防实时性要求高。</li>\n<li><strong>数据瓶颈：</strong> 缺陷样本难以收集，小样本学习和无监督 / 半监督方法备受关注。</li>\n</ul>\n</li>\n</ul>\n<hr />\n<h4 id=\"3-医疗影像分析\"><a class=\"anchor\" href=\"#3-医疗影像分析\">#</a> 3. 医疗影像分析</h4>\n<p>2D 视觉在辅助诊断方面发挥着越来越重要的作用。</p>\n<ul>\n<li>\n<p><strong>核心任务：</strong></p>\n<ul>\n<li><strong>病灶检测与分割：</strong> 在 X 光、CT 切片、MRI、病理切片中定位和勾画肿瘤、结节、出血点等。</li>\n<li><strong>分类与筛查：</strong> 判断影像是否异常（如胸片筛查肺结核、眼底照片筛查糖尿病视网膜病变）。</li>\n<li><strong>量化分析：</strong> 测量肿瘤大小、体积变化等。</li>\n</ul>\n</li>\n<li>\n<p><strong>主流技术栈：</strong></p>\n<ul>\n<li><strong>核心架构：</strong>\n<ul>\n<li><strong>U-Net：</strong> 在医学图像分割领域是<strong>事实上的标准</strong>，因其能有效利用有限的标注数据并产生精确的分割结果。</li>\n<li><strong>DeepLab 系列、nnUNet：</strong> nnUNet 是一个强大的自动化框架，在众多医学分割挑战中取得优异成绩。</li>\n</ul>\n</li>\n<li><strong>检测与分类：</strong>\n<ul>\n<li>使用在 ImageNet 上预训练的<strong> CNN 骨干网络</strong>（如 ResNet, DenseNet, EfficientNet）进行迁移学习，作为分类或检测模型的特征提取器。</li>\n</ul>\n</li>\n<li><strong>关键挑战与技术：</strong>\n<ul>\n<li><strong>数据量小、标注成本极高：</strong> 迁移学习、<strong>半监督学习</strong>（如 FixMatch）、<strong>自监督学习</strong>（先在无标签数据上预训练）是关键。</li>\n<li><strong>模型可解释性：</strong> 医生需要知道模型为何做出判断。<strong>类激活图</strong> 等技术可以高亮显示图像中对决策最重要的区域。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>实际考量：</strong></p>\n<ul>\n<li><strong>伦理与监管：</strong> 模型需通过严格的临床验证，并符合医疗器械监管标准（如 FDA、NMPA）。</li>\n<li><strong>模型必须是 “辅助” 角色：</strong> 最终诊断权在医生，系统需要提供置信度和可解释性。</li>\n</ul>\n</li>\n</ul>\n<hr />\n<h4 id=\"4-自动驾驶与智能交通\"><a class=\"anchor\" href=\"#4-自动驾驶与智能交通\">#</a> 4. 自动驾驶与智能交通</h4>\n<p>虽然自动驾驶重度依赖 3D 感知，但其视觉子系统大量使用 2D 技术。</p>\n<ul>\n<li>\n<p><strong>核心任务：</strong></p>\n<ul>\n<li><strong>2D 目标检测：</strong> 实时检测车辆、行人、骑行者、交通标志、交通灯。</li>\n<li><strong>车道线检测：</strong> 识别车辆可行驶区域的车道线。</li>\n<li><strong>可行驶区域分割：</strong> 分割出道路区域。</li>\n<li><strong>多目标跟踪：</strong> 跟踪周围动态目标的运动轨迹。</li>\n</ul>\n</li>\n<li>\n<p><strong>主流技术栈：</strong></p>\n<ul>\n<li><strong>检测模型：</strong>\n<ul>\n<li><strong>YOLO 系列、SSD：</strong> 对实时性要求极高，单阶段检测器是主流。</li>\n<li><strong>CNN + FPN：</strong> 特征金字塔网络用于有效检测不同尺度的目标。</li>\n</ul>\n</li>\n<li><strong>分割模型：</strong>\n<ul>\n<li><strong>基于编码器 - 解码器的实时分割网络：</strong> 如<strong> DeepLabv3+</strong>（配合轻量级主干网）、<strong>BiSeNet</strong>（专为实时语义分割设计）。</li>\n</ul>\n</li>\n<li><strong>跟踪算法：</strong>\n<ul>\n<li><strong>SORT/DeepSORT：</strong> 经典的跟踪范式，使用卡尔曼滤波预测运动，并用外观特征（由小型 CNN 提取）进行数据关联。</li>\n</ul>\n</li>\n<li><strong>数据集：</strong>\n<ul>\n<li><strong>KITTI, BDD100K, Cityscapes</strong> 是公开的权威基准。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>实际考量：</strong></p>\n<ul>\n<li><strong>安全性第一：</strong> 任何错误都可能导致严重后果，要求模型有极高的召回率（尽可能不漏检）。</li>\n<li><strong>复杂场景：</strong> 天气变化、遮挡、光照变化剧烈，对模型的鲁棒性是巨大挑战。</li>\n<li><strong>系统集成：</strong> 2D 视觉结果通常需要与激光雷达、高精地图等 3D 信息进行融合，做出最终决策。</li>\n</ul>\n</li>\n</ul>\n<hr />\n<h4 id=\"5-零售与电商\"><a class=\"anchor\" href=\"#5-零售与电商\">#</a> 5. 零售与电商</h4>\n<ul>\n<li>\n<p><strong>核心任务：</strong></p>\n<ul>\n<li><strong>智能货柜：</strong> 利用摄像头识别用户拿取的商品，实现自动结算。</li>\n<li><strong>商品识别与搜索：</strong> 拍照搜同款、商品自动分类。</li>\n<li><strong>顾客行为分析：</strong> 分析客流、热力图、顾客动线、停留时间。</li>\n</ul>\n</li>\n<li>\n<p><strong>主流技术栈：</strong></p>\n<ul>\n<li><strong>商品识别：</strong>\n<ul>\n<li><strong>检测 + 识别：</strong> 先用目标检测（YOLO）框出商品，再用分类网络（ResNet）识别具体品类。对于细粒度识别（不同型号的鞋子），需要更精细的网络设计。</li>\n<li><strong>度量学习：</strong> 类似人脸识别，将商品图像映射为特征向量，通过计算向量相似度来搜索同类商品。<strong>Triplet Loss</strong> 是常用方法。</li>\n</ul>\n</li>\n<li><strong>客流统计：</strong>\n<ul>\n<li>使用<strong>人体检测</strong>（YOLO）和<strong>跟踪</strong>（DeepSORT）来统计进出人数和轨迹。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>实际考量：</strong></p>\n<ul>\n<li><strong>SKU 繁多且更新快：</strong> 模型需要能够快速适应新商品，<strong>小样本学习</strong>和<strong>在线学习</strong>能力很重要。</li>\n<li><strong>对精度要求高：</strong> 直接关系到结算金额，不能出错。</li>\n</ul>\n</li>\n</ul>\n<hr />\n<h4 id=\"6-互联网娱乐与aigc\"><a class=\"anchor\" href=\"#6-互联网娱乐与aigc\">#</a> 6. 互联网娱乐与 AIGC</h4>\n<p>这是近年来最火爆的方向。</p>\n<ul>\n<li>\n<p><strong>核心任务：</strong></p>\n<ul>\n<li><strong>图像分类与打标：</strong> 为相册、社交媒体图片自动添加标签。</li>\n<li><strong>人脸特效与美颜：</strong> 美颜相机、贴纸、年龄变化、表情迁移。</li>\n<li><strong>图像生成与编辑：</strong> 文生图、图生图、风格迁移、老照片修复、图像超分辨率。</li>\n</ul>\n</li>\n<li>\n<p><strong>主流技术栈：</strong></p>\n<ul>\n<li><strong>传统图像处理：</strong> OpenCV 中的滤波、形变、色彩调整等是美颜算法的基础。</li>\n<li><strong>人脸相关：</strong>\n<ul>\n<li><strong>人脸关键点检测：</strong> 用于精准贴纸、美颜（瘦脸、大眼）。</li>\n<li><strong>人脸分割：</strong> 用于虚化背景、染发试色。</li>\n<li><strong>GAN / 扩散模型：</strong> 用于生成虚拟形象、换脸等。</li>\n</ul>\n</li>\n<li><strong>生成式 AI：</strong>\n<ul>\n<li><strong>扩散模型：</strong> <strong>Stable Diffusion</strong> 是当前绝对的主流，用于文生图、图生图、inpainting（局部重绘）等。</li>\n<li><strong>GAN：</strong> StyleGAN 系列在高质量人脸生成上仍有应用。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>实际考量：</strong></p>\n<ul>\n<li><strong>追求视觉效果和创造性。</strong></li>\n<li><strong>对计算资源要求高：</strong> 尤其是扩散模型，推理需要强大的 GPU。</li>\n<li><strong>伦理问题：</strong> 深度伪造技术带来的滥用风险。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">应用领域</th>\n<th style=\"text-align:left\">核心任务</th>\n<th style=\"text-align:left\">主流技术栈（模型 / 算法）</th>\n<th style=\"text-align:left\">关键工具 / 框架</th>\n<th style=\"text-align:left\">特殊考量</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><strong>安防与监控</strong></td>\n<td style=\"text-align:left\">人脸识别、行为分析、车辆检测</td>\n<td style=\"text-align:left\">YOLO, SSD, ArcFace, DeepSORT, 3D CNN/LSTM</td>\n<td style=\"text-align:left\">OpenCV, PyTorch, TensorRT, OpenVINO</td>\n<td style=\"text-align:left\">实时性、边缘计算、鲁棒性、隐私</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>工业质检</strong></td>\n<td style=\"text-align:left\">缺陷检测、定位、OCR</td>\n<td style=\"text-align:left\">U-Net, AE/VAE（异常检测）, YOLO, 模板匹配，Blob 分析</td>\n<td style=\"text-align:left\">Halcon, OpenCV, PyTorch/TensorFlow</td>\n<td style=\"text-align:left\">高精度、环境可控、小样本缺陷</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>医疗影像</strong></td>\n<td style=\"text-align:left\">病灶分割、分类筛查</td>\n<td style=\"text-align:left\">U-Net, nnUNet, ResNet/DenseNet（迁移学习）</td>\n<td style=\"text-align:left\">PyTorch, TensorFlow, 类激活图</td>\n<td style=\"text-align:left\">数据稀缺、高标注成本、可解释性、法规</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>自动驾驶</strong></td>\n<td style=\"text-align:left\">2D 检测、车道线 / 可行驶区域分割</td>\n<td style=\"text-align:left\">YOLO, DeepLabv3+, BiSeNet, DeepSORT</td>\n<td style=\"text-align:left\">PyTorch, TensorRT, CUDA</td>\n<td style=\"text-align:left\">安全性、极端鲁棒性、多传感器融合</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>零售电商</strong></td>\n<td style=\"text-align:left\">商品识别、客流分析</td>\n<td style=\"text-align:left\">YOLO, ResNet（度量学习）, DeepSORT</td>\n<td style=\"text-align:left\">PyTorch, TensorFlow, OpenCV</td>\n<td style=\"text-align:left\">SKU 更新快、细粒度识别、结算精度</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>互联网娱乐</strong></td>\n<td style=\"text-align:left\">美颜、图像生成、标签推荐</td>\n<td style=\"text-align:left\">人脸关键点模型，Stable Diffusion, StyleGAN</td>\n<td style=\"text-align:left\">OpenCV, PyTorch, Diffusers 库</td>\n<td style=\"text-align:left\">计算资源、创意效果、伦理风险</td>\n</tr>\n</tbody>\n</table>\n",
            "tags": [
                "Computer-Vision",
                "Opencv",
                "CV"
            ]
        },
        {
            "id": "https://lzq-cv.github.io/2D%E8%A7%86%E8%A7%89%E5%92%8C3D%E8%A7%86%E8%A7%89%E7%9A%84%E4%B8%BB%E6%B5%81%E6%8A%80%E6%9C%AF%E6%A0%88/",
            "url": "https://lzq-cv.github.io/2D%E8%A7%86%E8%A7%89%E5%92%8C3D%E8%A7%86%E8%A7%89%E7%9A%84%E4%B8%BB%E6%B5%81%E6%8A%80%E6%9C%AF%E6%A0%88/",
            "title": "2D视觉和3D视觉的主流技术栈",
            "date_published": "2025-09-27T01:38:14.000Z",
            "content_html": "<p>计算机视觉（CV）领域的主流技术栈，2D 视觉和 3D 视觉的技术、应用与区别。</p>\n<h3 id=\"一-计算机视觉技术栈总览\"><a class=\"anchor\" href=\"#一-计算机视觉技术栈总览\">#</a> 一、 计算机视觉技术栈总览</h3>\n<p>计算机视觉的技术栈可以大致分为三个层次，从底层的基础工具到顶层的具体应用：</p>\n<ol>\n<li>\n<p><strong>底层基础层：</strong></p>\n<ul>\n<li><strong>编程语言：</strong> <strong>Python</strong> 是绝对的主流，因其丰富的库和社区生态。C++ 在需要高性能、低延迟的场合（如嵌入式、自动驾驶）中不可或缺。</li>\n<li><strong>数学基础：</strong> 线性代数、微积分、概率论、数值分析是理解算法的基石。</li>\n<li><strong>硬件：</strong> <strong>GPU（NVIDIA）</strong> 是训练和部署深度学习模型的核心。专用的 AI 芯片（如 Google TPU, NVIDIA Jetson, Intel Movidius）也在边缘计算中扮演重要角色。</li>\n</ul>\n</li>\n<li>\n<p><strong>核心工具与框架层：</strong></p>\n<ul>\n<li><strong>深度学习框架：</strong>\n<ul>\n<li><strong>PyTorch：</strong> 当前学术界和工业界的首选，以其动态图和简洁的 API 深受研究人员喜爱。</li>\n<li><strong>TensorFlow：</strong> 由 Google 支持，在工业界部署（尤其是使用 TensorFlow Lite, TensorRT 时）仍有强大优势。Keras 是其高级 API，易于上手。</li>\n</ul>\n</li>\n<li><strong>传统计算机视觉库：</strong>\n<ul>\n<li><strong>OpenCV：</strong> 计算机视觉的 “瑞士军刀”，提供了从图像 / 视频读写、预处理、几何变换、特征提取到目标检测（传统方法）等海量功能，是必备基础库。</li>\n</ul>\n</li>\n<li><strong>3D 视觉专用库：</strong>\n<ul>\n<li><strong>Open3D：</strong> 一个现代化的 3D 数据处理库，支持点云、网格的可视化、配准、重建等。</li>\n<li><strong>PCL：</strong> 点云库，功能非常强大但接口相对陈旧，在 C++ 项目中广泛使用。</li>\n<li><strong>VTK, ITK：</strong> 主要用于科学可视化和医学图像处理。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>模型与算法层：</strong></p>\n<ul>\n<li>这是技术栈的核心，下面将分 2D 和 3D 详细展开。</li>\n</ul>\n</li>\n</ol>\n<hr />\n<h3 id=\"二-2d-计算机视觉\"><a class=\"anchor\" href=\"#二-2d-计算机视觉\">#</a> 二、 2D 计算机视觉</h3>\n<p>2D 视觉处理的是像素矩阵，即我们常见的 RGB 或灰度图像。</p>\n<h4 id=\"核心任务与技术\"><a class=\"anchor\" href=\"#核心任务与技术\">#</a> 核心任务与技术</h4>\n<ol>\n<li>\n<p><strong>图像分类：</strong> 判断图像中包含什么物体。</p>\n<ul>\n<li><strong>核心技术：</strong> 卷积神经网络。</li>\n<li><strong>经典模型：</strong>\n<ul>\n<li><strong>开创者：</strong> AlexNet (2012)</li>\n<li><strong>深度代表：</strong> VGGNet</li>\n<li><strong>革新者：</strong> GoogLeNet (Inception 模块), ResNet (残差连接，解决了深层网络梯度消失问题)，这些模型至今仍是强大的<strong>骨干网络</strong>。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>目标检测：</strong> 找出图像中所有感兴趣物体的位置（用边界框表示）和类别。</p>\n<ul>\n<li><strong>两阶段检测器（精度高，速度慢）：</strong>\n<ul>\n<li><strong>R-CNN 系列：</strong> R-CNN -&gt; Fast R-CNN -&gt; <strong>Faster R-CNN</strong>。先产生候选区域，再对区域进行分类和微调。</li>\n</ul>\n</li>\n<li><strong>单阶段检测器（速度快，精度可媲美两阶段）：</strong>\n<ul>\n<li><strong>YOLO 系列：</strong> 特别是 <strong>v3, v5, v8, v9</strong>，将检测视为单一的回归问题，速度极快，是实时应用的首选。</li>\n<li><strong>SSD：</strong> 另一个经典的单阶段检测器。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>图像分割：</strong> 对每个像素进行分类，为每个物体生成精确的轮廓。</p>\n<ul>\n<li><strong>语义分割：</strong> 只区分类别，不区分个体（例如，图中所有的 “人” 都是同一类）。\n<ul>\n<li><strong>核心架构：</strong> <strong>编码器 - 解码器</strong>结构。编码器（如 ResNet）提取特征，解码器（如<strong> U-Net</strong>）恢复空间维度并进行像素级预测。<strong>DeepLab</strong> 系列（使用空洞卷积）也是主流。</li>\n</ul>\n</li>\n<li><strong>实例分割：</strong> 既区分类别，也区分不同的个体（例如，区分出第一个人，第二个人）。\n<ul>\n<li><strong>经典模型：</strong> <strong>Mask R-CNN</strong>，是在 Faster R-CNN 基础上的扩展，增加了一个分支来预测每个目标的二值掩码。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>关键点检测：</strong> 检测物体上具有特定意义的点。</p>\n<ul>\n<li><strong>应用：</strong> 人脸关键点（眼、鼻、嘴）、人体姿态估计（关节点的位置）。</li>\n<li><strong>典型方法：</strong> 通常建模为热图回归问题，即预测每个关键点可能出现的概率分布图。<strong>HRNet</strong> 是当前人体姿态估计的 SOTA 方法之一。</li>\n</ul>\n</li>\n<li>\n<p><strong>图像生成与编辑：</strong></p>\n<ul>\n<li><strong>生成对抗网络（GANs）：</strong> 如 StyleGAN 系列，用于生成逼真的人脸、艺术品等。</li>\n<li><strong>扩散模型：</strong> 如 Stable Diffusion、DALL-E，已成为图像生成的新范式，生成质量更高、更可控。</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"2d视觉技术栈总结\"><a class=\"anchor\" href=\"#2d视觉技术栈总结\">#</a> 2D 视觉技术栈总结</h4>\n<ul>\n<li><strong>输入：</strong> RGB 图像（H x W x 3）。</li>\n<li><strong>核心网络：</strong> <strong>卷积神经网络</strong>。</li>\n<li><strong>主要框架：</strong> PyTorch / TensorFlow + OpenCV。</li>\n<li><strong>趋势：</strong> Vision Transformer (ViT) 正在挑战 CNN 的统治地位，显示出强大的性能。轻量化模型（如 MobileNet, ShuffleNet）用于移动端和嵌入式设备是重要方向。</li>\n</ul>\n<hr />\n<h3 id=\"三-3d-计算机视觉\"><a class=\"anchor\" href=\"#三-3d-计算机视觉\">#</a> 三、 3D 计算机视觉</h3>\n<p>3D 视觉旨在理解和重建三维世界的信息，其输入和数据表示形式远比 2D 丰富。</p>\n<h4 id=\"数据表示形式\"><a class=\"anchor\" href=\"#数据表示形式\">#</a> 数据表示形式</h4>\n<ol>\n<li><strong>深度图：</strong> 每个像素的值代表该点到相机的距离。通常由 RGB-D 相机（如 Kinect, RealSense）或立体视觉直接获得。</li>\n<li><strong>点云：</strong> 一组三维空间中的点（x, y, z）的集合，可以包含颜色、法向量等信息。是激光雷达的直接输出。</li>\n<li><strong>体素网格：</strong> 将 3D 空间离散化为一个个小立方体（类似于 2D 的像素），是 3D 卷积的自然延伸，但内存消耗大。</li>\n<li><strong>网格：</strong> 由顶点、边和面（通常是三角面片）构成的曲面，是 3D 建模和渲染的通用格式。</li>\n<li><strong>多视图图像：</strong> 从不同视角拍摄的同一物体的多张 2D 图像，可通过运动恢复结构技术生成 3D 模型。</li>\n</ol>\n<h4 id=\"核心任务与技术-2\"><a class=\"anchor\" href=\"#核心任务与技术-2\">#</a> 核心任务与技术</h4>\n<ol>\n<li>\n<p><strong>3D 重建：</strong> 从一组 2D 图像或深度传感器数据中恢复物体的 3D 模型。</p>\n<ul>\n<li><strong>运动恢复结构：</strong> 从多视角图像中计算相机姿态和稀疏的 3D 点云。</li>\n<li><strong>多视图立体视觉：</strong> 在 SfM 的基础上，生成稠密的 3D 点云或网格。</li>\n<li><strong>深度学习方法：</strong> 如 MVSNet 等，利用神经网络直接从多视图图像中学习生成深度图或点云。</li>\n</ul>\n</li>\n<li>\n<p><strong>点云处理：</strong></p>\n<ul>\n<li><strong>点云分类与分割：</strong> 对点云中的每个点或整个点云进行分类。\n<ul>\n<li><strong>开创性工作：</strong> <strong>PointNet</strong> / <strong>PointNet++</strong>，直接处理无序的点云集合。</li>\n<li><strong>后续发展：</strong> 基于图卷积、稀疏卷积（如<strong> Minkowski Engine</strong>）的方法能更好地捕捉局部特征。</li>\n</ul>\n</li>\n<li><strong>点云配准：</strong> 将不同视角扫描的点云对齐到同一个坐标系下。经典算法有 ICP，深度学习如 PointNetLK, DCP 等。</li>\n</ul>\n</li>\n<li>\n<p><strong>3D 目标检测：</strong></p>\n<ul>\n<li><strong>基于 LiDAR：</strong> 直接在点云中检测 3D bounding box（包含中心点、长宽高、朝向）。<strong>VoxelNet</strong>、<strong>PointPillars</strong>、<strong>SECOND</strong> 是经典且高效的模型。</li>\n<li><strong>基于视觉：</strong> 仅使用单目或双目 RGB 图像来估计 3D 框，难度更大，是当前研究热点。</li>\n<li><strong>多模态融合：</strong> 结合相机（RGB）和激光雷达（点云）的信息，提升检测精度，是自动驾驶领域的核心。</li>\n</ul>\n</li>\n<li>\n<p><strong>SLAM：</strong> 即时定位与地图构建。</p>\n<ul>\n<li>机器人在未知环境中移动，同时估计自身位置并构建环境地图。</li>\n<li><strong>视觉 SLAM：</strong> 使用单目、双目或 RGB-D 相机作为主要传感器。ORB-SLAM 系列是里程碑式的工作。</li>\n<li><strong>激光 SLAM：</strong> 使用激光雷达，如 LOAM、Cartographer，通常更精确。</li>\n</ul>\n</li>\n<li>\n<p><strong>神经辐射场：</strong> 一种革命性的 3D 场景表示和渲染技术。</p>\n<ul>\n<li><strong>核心思想（NeRF）：</strong> 用一个神经网络将空间位置和观看视角映射为颜色和密度，从而可以从任意视角生成逼真的新视图。衍生出了大量快速、动态的 NeRF 变体。</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"3d视觉技术栈总结\"><a class=\"anchor\" href=\"#3d视觉技术栈总结\">#</a> 3D 视觉技术栈总结</h4>\n<ul>\n<li><strong>输入：</strong> 点云、深度图、多视图图像等。</li>\n<li><strong>核心挑战：</strong> 数据的<strong>无序性</strong>（点云）、<strong>稀疏性</strong>、<strong>非结构化</strong>。</li>\n<li><strong>核心技术：</strong>\n<ul>\n<li><strong>传统几何方法：</strong> 多视图几何、光束法平差、ICP。</li>\n<li><strong>深度学习方法：</strong> 针对 3D 数据特化的网络（PointNet 系列、3D 稀疏卷积、Transformer）。</li>\n</ul>\n</li>\n<li><strong>主要框架：</strong> PyTorch / TensorFlow + Open3D / PCL。</li>\n</ul>\n<hr />\n<h3 id=\"四-2d视觉-vs-3d视觉-对比总结\"><a class=\"anchor\" href=\"#四-2d视觉-vs-3d视觉-对比总结\">#</a> 四、 2D 视觉 vs. 3D 视觉 对比总结</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">特性</th>\n<th style=\"text-align:left\">2D 计算机视觉</th>\n<th style=\"text-align:left\">3D 计算机视觉</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><strong>数据输入</strong></td>\n<td style=\"text-align:left\">二维像素矩阵（RGB / 灰度图）</td>\n<td style=\"text-align:left\">点云、深度图、多视图图像、网格等</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>信息维度</strong></td>\n<td style=\"text-align:left\">缺少深度和真实的几何信息</td>\n<td style=\"text-align:left\">包含丰富的三维几何和空间关系信息</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>核心任务</strong></td>\n<td style=\"text-align:left\">分类、检测、分割（在像素层面）</td>\n<td style=\"text-align:left\">3D 重建、3D 检测、SLAM、点云处理</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>核心技术</strong></td>\n<td style=\"text-align:left\">卷积神经网络（CNN），Transformer</td>\n<td style=\"text-align:left\">多视图几何、点云网络（PointNet）、3D 卷积、神经辐射场（NeRF）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>应用场景</strong></td>\n<td style=\"text-align:left\">图像检索、照片美化、安防监控、图像内容审核</td>\n<td style=\"text-align:left\"><strong>自动驾驶</strong>、<strong>机器人导航</strong>、<strong>AR/VR</strong>、无人机、工业三维测量</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>数据获取</strong></td>\n<td style=\"text-align:left\">简单、廉价（普通摄像头）</td>\n<td style=\"text-align:left\">相对复杂、昂贵（RGB-D 相机、激光雷达）或需要计算（SfM）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>挑战</strong></td>\n<td style=\"text-align:left\">光照变化、遮挡、视角变化、类内差异</td>\n<td style=\"text-align:left\">数据稀疏、噪声大、计算复杂度高、标注成本极高</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"五-融合与未来趋势\"><a class=\"anchor\" href=\"#五-融合与未来趋势\">#</a> 五、 融合与未来趋势</h3>\n<p>未来的发展方向绝不是 2D 和 3D 的割裂，而是<strong>深度融合</strong>：</p>\n<ul>\n<li><strong>多模态学习：</strong> 将 2D 图像的丰富纹理和语义信息与 3D 数据的精确几何结构相结合。例如，在自动驾驶中，用 2D 检测的结果辅助 3D 检测，或者用 3D 信息为 2D 分割提供空间上下文。</li>\n<li><strong>2D 引导的 3D 理解：</strong> 利用在大型 2D 图像数据集（如 ImageNet）上预训练的模型，通过知识蒸馏或迁移学习来提升 3D 模型的性能，解决 3D 数据稀缺的问题。</li>\n<li><strong>AIGC 在 3D 中的应用：</strong> 利用扩散模型等生成式 AI 技术，从文本或单张图像直接生成高质量的 3D 模型（如 TripoSR、Shap-E 等），这将极大降低 3D 内容创作的门槛。</li>\n</ul>\n",
            "tags": [
                "Computer-Vision",
                "Opencv",
                "CV"
            ]
        },
        {
            "id": "https://lzq-cv.github.io/LAMP%E5%92%8CLNMP%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%9E%B6%E6%9E%84%E7%9A%84%E5%8C%BA%E5%88%AB/",
            "url": "https://lzq-cv.github.io/LAMP%E5%92%8CLNMP%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%9E%B6%E6%9E%84%E7%9A%84%E5%8C%BA%E5%88%AB/",
            "title": "LAMP和LNMP服务器架构的区别",
            "date_published": "2025-09-27T00:51:01.000Z",
            "content_html": "<p>LAMP 和 LNMP 是两种最流行的传统网站服务器架构组合。它们的核心区别在于 <strong>Web 服务器</strong> 的不同。</p>\n<ul>\n<li><strong>LAMP</strong>: Linux + <strong>A</strong>pache + MySQL/MariaDB + PHP/Python/Perl</li>\n<li><strong>LNMP</strong>: Linux + <strong>N</strong>ginx + MySQL/MariaDB + PHP/Python/Perl\n<ul>\n<li>有时也被称为 <strong>LEMP</strong>（因为 Nginx 读作 “engine-x”，所以取首字母 “E”）。<strong>LNMP 和 LEMP 指的是同一个架构</strong>。</li>\n</ul>\n</li>\n</ul>\n<hr />\n<h3 id=\"一-核心组件对比\"><a class=\"anchor\" href=\"#一-核心组件对比\">#</a> 一、核心组件对比</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">组件</th>\n<th style=\"text-align:left\">LAMP 栈</th>\n<th style=\"text-align:left\">LNMP 栈</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><strong>操作系统 (L)</strong></td>\n<td style=\"text-align:left\"><strong>L</strong>inux</td>\n<td style=\"text-align:left\"><strong>L</strong>inux</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>Web 服务器</strong></td>\n<td style=\"text-align:left\"><strong>A</strong>pache HTTP Server</td>\n<td style=\"text-align:left\"><strong>N</strong>ginx</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>数据库 (M)</strong></td>\n<td style=\"text-align:left\"><strong>M</strong>ySQL / MariaDB</td>\n<td style=\"text-align:left\"><strong>M</strong>ySQL / MariaDB</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>编程语言 (P)</strong></td>\n<td style=\"text-align:left\"><strong>P</strong>HP, Python, Perl（PHP 最经典）</td>\n<td style=\"text-align:left\"><strong>P</strong>HP, Python, Perl（PHP 最经典）</td>\n</tr>\n</tbody>\n</table>\n<hr />\n<h3 id=\"二-核心区别apache-vs-nginx\"><a class=\"anchor\" href=\"#二-核心区别apache-vs-nginx\">#</a> 二、核心区别：Apache vs. Nginx</h3>\n<p>这是两个技术栈最根本的差异，其他区别都源于此。</p>\n<h4 id=\"apachelamp-的核心\"><a class=\"anchor\" href=\"#apachelamp-的核心\">#</a> Apache（LAMP 的核心）</h4>\n<ul>\n<li>\n<p><strong>工作模型</strong>：</p>\n<ul>\n<li>传统上采用 <strong>多进程 / 多线程预生成（MPM Prefork/Worker）模型</strong>。每个并发连接都会由一个独立的进程或线程处理。</li>\n<li><strong>优点</strong>： 模型简单稳定，与各种 PHP 模块兼容性好。</li>\n<li><strong>缺点</strong>： 当面对成千上万的并发连接时，创建和管理大量进程 / 线程会消耗大量的内存和 CPU 资源，成为性能瓶颈。</li>\n</ul>\n</li>\n<li>\n<p><strong>配置方式</strong>：</p>\n<ul>\n<li>支持通过目录下的 <strong>.htaccess</strong> 文件进行分布式配置。这意味着可以在网站根目录下的任何文件夹里放置一个 <code>.htaccess</code>  文件来重写主配置（如 URL 重写、访问控制等）。</li>\n<li><strong>优点</strong>： 对共享主机环境极其友好，用户无需重启 Apache 即可修改配置，非常灵活。</li>\n<li><strong>缺点</strong>： 带来性能损失，因为 Apache 需要遍历目录树来查找和解析 <code>.htaccess</code>  文件。</li>\n</ul>\n</li>\n<li>\n<p><strong>特性</strong>：</p>\n<ul>\n<li>模块化程度极高，功能全面，拥有一个巨大的模块生态。任何需求（如认证、缓存、重写等）几乎都能找到对应模块。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"nginxlnmp-的核心\"><a class=\"anchor\" href=\"#nginxlnmp-的核心\">#</a> Nginx（LNMP 的核心）</h4>\n<ul>\n<li>\n<p><strong>工作模型</strong>：</p>\n<ul>\n<li>采用 <strong>事件驱动、异步非阻塞</strong> 的架构。它使用一个（或少量）工作进程，每个进程可以高效地处理数千个并发连接。</li>\n<li><strong>优点</strong>： 资源占用（尤其是内存）极低，在高并发场景下性能远超 Apache，特别适合静态内容处理、反向代理和负载均衡。</li>\n<li><strong>缺点</strong>： 架构相对复杂。</li>\n</ul>\n</li>\n<li>\n<p><strong>配置方式</strong>：</p>\n<ul>\n<li><strong>不支持  <code>.htaccess</code> </strong>。所有配置都必须集中在主配置文件或 <code>/etc/nginx/sites-available/</code>  这样的虚拟主机文件中，然后重载 Nginx 服务才能生效。</li>\n<li><strong>优点</strong>： 配置更集中，性能更高，因为不需要遍历目录查找配置文件。</li>\n<li><strong>缺点</strong>： 对共享主机用户不友好，修改配置需要服务器权限和重载服务。</li>\n</ul>\n</li>\n<li>\n<p><strong>处理 PHP 的方式（关键区别）</strong>：</p>\n<ul>\n<li>Nginx <strong>自身不能直接处理 PHP 等动态语言</strong>。它需要一个额外的处理器（如 PHP-FPM）。</li>\n<li>当用户请求一个 PHP 文件时，Nginx 会将请求<strong>反向代理</strong>给 PHP-FPM 进程进行处理，PHP-FPM 处理完毕后将结果返回给 Nginx，再由 Nginx 发送给用户。</li>\n<li>这种 “各司其职” 的架构反而更清晰、高效。</li>\n</ul>\n</li>\n</ul>\n<hr />\n<h3 id=\"三-详细对比表格\"><a class=\"anchor\" href=\"#三-详细对比表格\">#</a> 三、详细对比表格</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">特性</th>\n<th style=\"text-align:left\">LAMP (Apache)</th>\n<th style=\"text-align:left\">LNMP (Nginx)</th>\n<th style=\"text-align:left\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><strong>性能</strong></td>\n<td style=\"text-align:left\">处理动态内容稳定，但<strong>高并发下性能较差</strong></td>\n<td style=\"text-align:left\"><strong>高并发性能极佳</strong>，尤其擅长处理静态文件</td>\n<td style=\"text-align:left\">Nginx 的事件驱动模型在并发性能上具有先天优势</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>资源占用</strong></td>\n<td style=\"text-align:left\">相对较高（进程 / 线程模型）</td>\n<td style=\"text-align:left\"><strong>非常低</strong>（事件驱动模型）</td>\n<td style=\"text-align:left\">对于内存有限的 VPS 服务器，LNMP 优势明显</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>配置灵活性</strong></td>\n<td style=\"text-align:left\"><strong>高</strong>（支持.htaccess）</td>\n<td style=\"text-align:left\">较低（需修改主配置并重载）</td>\n<td style=\"text-align:left\">对于需要频繁修改.htaccess 的 CMS（如 WordPress），LAMP 更方便</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>静态内容处理</strong></td>\n<td style=\"text-align:left\">良好</td>\n<td style=\"text-align:left\"><strong>极快</strong></td>\n<td style=\"text-align:left\">Nginx 设计之初就是为解决 C10K 问题，静态文件响应速度一流</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>动态内容处理</strong></td>\n<td style=\"text-align:left\">直接通过模块（如 mod_php）处理</td>\n<td style=\"text-align:left\">需通过 PHP-FPM 等外部处理器</td>\n<td style=\"text-align:left\">LAMP 方式更 “一体化”，LNMP 方式更 “解耦”</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>安全性</strong></td>\n<td style=\"text-align:left\">良好，历史悠久，问题暴露充分</td>\n<td style=\"text-align:left\">良好，因设计简单，攻击面相对较小</td>\n<td style=\"text-align:left\">两者都非常安全，安全更多取决于运维人员的技术</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>学习曲线</strong></td>\n<td style=\"text-align:left\">较为简单，资料丰富</td>\n<td style=\"text-align:left\">配置语法独特，需要理解其工作流程</td>\n<td style=\"text-align:left\">有 Apache 基础的人需要适应 Nginx 的配置思维</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>适用场景</strong></td>\n<td style=\"text-align:left\">传统虚拟主机、共享主机、中小型网站、需要.htaccess 功能的项目</td>\n<td style=\"text-align:left\"><strong>高并发网站</strong>、API 服务器、静态资源服务器、反向代理 / 负载均衡器、VPS / 云服务器</td>\n<td style=\"text-align:left\"></td>\n</tr>\n</tbody>\n</table>\n<hr />\n<h3 id=\"四-如何选择\"><a class=\"anchor\" href=\"#四-如何选择\">#</a> 四、如何选择？</h3>\n<ol>\n<li>\n<p><strong>选择 LAMP 的情况：</strong></p>\n<ul>\n<li>你使用的是传统的共享虚拟主机（cPanel 等面板通常内置 Apache）。</li>\n<li>你的网站严重依赖 <code>.htaccess</code>  文件（例如，使用了复杂的 WordPress 重写规则插件）。</li>\n<li>项目规模不大，并发用户数不高，更追求配置的便捷性。</li>\n<li>你对 Apache 非常熟悉。</li>\n</ul>\n</li>\n<li>\n<p><strong>选择 LNMP 的情况：</strong></p>\n<ul>\n<li>使用的是 VPS、独立服务器或云服务器，拥有 root 权限。</li>\n<li>网站<strong>预期有高并发访问量</strong>（如新闻门户、电商平台等）。</li>\n<li>服务器资源（内存）有限，需要尽可能优化性能。</li>\n<li>需要将服务器同时用作 Web 服务器和反向代理 / 负载均衡器。</li>\n<li>网站有大量静态资源（图片、CSS、JS）需要快速响应。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h3>\n<p>简单来说，可以这样理解：</p>\n<ul>\n<li><strong>LAMP</strong> 像一个<strong>全能型选手</strong>，开箱即用，配置灵活，非常成熟稳定，但在极限压力下（高并发）会显得吃力。</li>\n<li><strong>LNMP</strong> 像一个<strong>专项冠军</strong>，它在高并发和低资源消耗方面表现卓越，尤其适合现代 Web 架构，但需要更多的配置工作，灵活性稍差。</li>\n</ul>\n<p>如今，随着 Nginx 的普及，<strong>LNMP 架构已经成为大多数新项目和追求性能的运维人员的首选</strong>。甚至出现了一种混合架构：用 Nginx 作为前端反向代理处理静态请求，并将动态请求转发给后端的 Apache，结合两者的优点。但对于绝大多数场景，直接使用完整的 LNMP 栈是更优的选择。</p>\n",
            "tags": [
                "服务器"
            ]
        },
        {
            "id": "https://lzq-cv.github.io/%E6%9C%BA%E5%99%A8%E8%A7%86%E8%A7%89%E7%A1%AC%E4%BB%B6%E5%A6%82%E4%BD%95%E9%80%89%E5%9E%8B/",
            "url": "https://lzq-cv.github.io/%E6%9C%BA%E5%99%A8%E8%A7%86%E8%A7%89%E7%A1%AC%E4%BB%B6%E5%A6%82%E4%BD%95%E9%80%89%E5%9E%8B/",
            "title": "机器视觉硬件如何选型",
            "date_published": "2025-09-26T10:08:56.000Z",
            "content_html": "<h1 id=\"机器视觉硬件选型指南\"><a class=\"anchor\" href=\"#机器视觉硬件选型指南\">#</a> 机器视觉硬件选型指南</h1>\n<h2 id=\"概述\"><a class=\"anchor\" href=\"#概述\">#</a> 概述</h2>\n<p>机器视觉硬件选型是为特定的机器视觉应用需求，从众多硬件组件中科学地挑选出最合适的相机、镜头、光源、处理器及其他辅助设备的过程。其核心目标是构建一套能稳定、精确、高效地完成指定视觉任务（如检测、测量、识别、定位等）的硬件系统。</p>\n<hr />\n<h2 id=\"核心组件选型\"><a class=\"anchor\" href=\"#核心组件选型\">#</a> 核心组件选型</h2>\n<h3 id=\"相机\"><a class=\"anchor\" href=\"#相机\">#</a> 相机</h3>\n<h4 id=\"类型\"><a class=\"anchor\" href=\"#类型\">#</a> 类型</h4>\n<ul>\n<li><strong>面阵相机</strong>：最常用，适用于静止或连续运动的物体成像（如传送带）\n<ul>\n<li>选型重点：分辨率、帧率、传感器尺寸、像元尺寸、快门类型</li>\n</ul>\n</li>\n<li><strong>线阵相机</strong>：适用于高速连续运动物体或需要超高分辨率的场景（如卷材检测、印刷检测）\n<ul>\n<li>选型重点：行频、分辨率（线数）、传感器长度、像元尺寸、行曝光时间控制</li>\n</ul>\n</li>\n<li><strong>区域扫描相机</strong>：即面阵相机</li>\n<li><strong>3D 相机</strong>：用于获取深度信息（如体积测量、引导抓取）\n<ul>\n<li>技术包括：双目立体视觉、结构光、激光三角测量、飞行时间</li>\n<li>选型重点：精度、量程、点云密度、抗环境光能力、速度</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"传感器技术\"><a class=\"anchor\" href=\"#传感器技术\">#</a> 传感器技术</h4>\n<ul>\n<li><strong>CMOS</strong>：主流技术，性价比高，速度快，功耗低，抗拖影能力好，支持全局快门或卷帘快门</li>\n<li><strong>CCD</strong>：成像质量（尤其是低照度、均一性）通常优于 CMOS，但速度慢、功耗高、成本高、易产生拖影，逐渐被 CMOS 取代</li>\n</ul>\n<h4 id=\"分辨率\"><a class=\"anchor\" href=\"#分辨率\">#</a> 分辨率</h4>\n<ul>\n<li>根据检测精度要求计算： <code>所需最小像素数 = (待测特征尺寸 / 检测精度要求) × 2</code> （满足奈奎斯特采样定理）</li>\n<li>示例：检测 0.1mm 缺陷，精度要求 0.05mm，则单个特征至少需要  <code>(0.1 / 0.05) × 2 = 4</code>  个像素覆盖</li>\n<li>避免过度追求高分辨率：增加成本、降低帧率、增大数据量</li>\n</ul>\n<h4 id=\"帧率\"><a class=\"anchor\" href=\"#帧率\">#</a> 帧率</h4>\n<ul>\n<li>计算公式： <code>所需最小帧率 = (物体移动速度 / 相机视野内允许的最大物体位移)</code></li>\n<li>高帧率需求：高速运动物体检测、需要捕捉快速瞬变过程</li>\n</ul>\n<h4 id=\"快门类型\"><a class=\"anchor\" href=\"#快门类型\">#</a> 快门类型</h4>\n<ul>\n<li><strong>全局快门</strong>：所有像素同时曝光，适合拍摄运动物体，无运动模糊（工业应用首选）</li>\n<li><strong>卷帘快门</strong>：像素逐行曝光，拍摄运动物体时会产生果冻效应</li>\n</ul>\n<h4 id=\"接口\"><a class=\"anchor\" href=\"#接口\">#</a> 接口</h4>\n<ul>\n<li><strong>GigE Vision</strong>：主流，性价比高，线缆长（可达 100m）</li>\n<li><strong>USB3 Vision</strong>：即插即用方便，带宽高，但线缆短（&lt;5m）</li>\n<li><strong>Camera Link</strong>：传统高速接口，需要专用采集卡</li>\n<li><strong>CoaXPress</strong>：新兴高速接口，带宽极高，线缆长，抗干扰强</li>\n<li><strong>MIPI</strong>：主要用于嵌入式系统</li>\n</ul>\n<h4 id=\"色彩\"><a class=\"anchor\" href=\"#色彩\">#</a> 色彩</h4>\n<ul>\n<li><strong>黑白</strong>：灵敏度高，分辨率高，速度快，成本低</li>\n<li><strong>彩色</strong>：用于需要区分颜色的应用，需注意拜耳滤镜带来的分辨率和灵敏度损失</li>\n</ul>\n<h4 id=\"其他特性\"><a class=\"anchor\" href=\"#其他特性\">#</a> 其他特性</h4>\n<ul>\n<li>传感器尺寸：影响视野和景深</li>\n<li>像元尺寸：影响分辨率和灵敏度</li>\n<li>灵敏度 / 量子效率：在低光照条件下尤其重要</li>\n<li>动态范围：反映相机同时捕捉亮部和暗部细节的能力</li>\n</ul>\n<hr />\n<h3 id=\"镜头\"><a class=\"anchor\" href=\"#镜头\">#</a> 镜头</h3>\n<h4 id=\"焦距\"><a class=\"anchor\" href=\"#焦距\">#</a> 焦距</h4>\n<ul>\n<li>计算公式： <code>焦距 f ≈ (传感器尺寸 × 工作距离) / 视野</code></li>\n<li>根据视野和工作距离计算所需焦距范围</li>\n</ul>\n<h4 id=\"光圈\"><a class=\"anchor\" href=\"#光圈\">#</a> 光圈</h4>\n<ul>\n<li><strong>大光圈</strong>：进光量大，适合低照度环境，但景深小</li>\n<li><strong>小光圈</strong>：景深大，适合有一定厚度或不在同一平面的物体</li>\n<li>F 值越小，光圈越大</li>\n</ul>\n<h4 id=\"接口-2\"><a class=\"anchor\" href=\"#接口-2\">#</a> 接口</h4>\n<ul>\n<li>必须与相机接口匹配</li>\n<li>常见工业接口：C 口（最普遍）、CS 口、F 口、M42、M58 等</li>\n</ul>\n<h4 id=\"分辨率-2\"><a class=\"anchor\" href=\"#分辨率-2\">#</a> 分辨率</h4>\n<ul>\n<li>镜头的解析能力必须匹配相机的分辨率</li>\n<li>镜头分辨率用 MTF 曲线表示，应略高于传感器需求</li>\n</ul>\n<h4 id=\"畸变\"><a class=\"anchor\" href=\"#畸变\">#</a> 畸变</h4>\n<ul>\n<li>高精度测量应用需选择低畸变镜头（&lt;0.1%）</li>\n</ul>\n<h4 id=\"类型-2\"><a class=\"anchor\" href=\"#类型-2\">#</a> 类型</h4>\n<ul>\n<li><strong>定焦镜头</strong>：最常见，性价比高</li>\n<li><strong>变焦镜头</strong>：焦距可调，灵活性高</li>\n<li><strong>远心镜头</strong>：精密测量必备，消除透视误差</li>\n<li><strong>微距镜头</strong>：专为高倍率、短工作距离设计</li>\n<li><strong>液态镜头</strong>：通过电压控制焦距，实现毫秒级自动对焦</li>\n</ul>\n<hr />\n<h3 id=\"光源\"><a class=\"anchor\" href=\"#光源\">#</a> 光源</h3>\n<h4 id=\"目的\"><a class=\"anchor\" href=\"#目的\">#</a> 目的</h4>\n<p>突出被测特征，抑制背景干扰，提高对比度，保证成像稳定性和一致性</p>\n<h4 id=\"类型led光源为主\"><a class=\"anchor\" href=\"#类型led光源为主\">#</a> 类型（LED 光源为主）</h4>\n<ul>\n<li><strong>环形光</strong>：通用性好，提供漫射光，减少阴影</li>\n<li><strong>条形光</strong>：用于长条状物体或需要定向照明</li>\n<li><strong>背光源</strong>：轮廓检测、透明物体杂质检测</li>\n<li><strong>同轴光</strong>：检测光滑平面上的划痕、凹凸</li>\n<li><strong>穹顶光</strong>：提供均匀漫射光，消除反光</li>\n<li><strong>点光源 / 线光源</strong>：用于特殊角度照明</li>\n<li><strong>结构光</strong>：投射特定图案用于 3D 测量</li>\n</ul>\n<h4 id=\"颜色选择\"><a class=\"anchor\" href=\"#颜色选择\">#</a> 颜色选择</h4>\n<ul>\n<li>选择能最大化目标特征与背景对比度的颜色</li>\n<li>互补色原理：物体颜色与光源颜色互为补色时对比度最高</li>\n<li>单色光常能提高对比度</li>\n</ul>\n<h4 id=\"照明方式\"><a class=\"anchor\" href=\"#照明方式\">#</a> 照明方式</h4>\n<ul>\n<li><strong>明场照明</strong>：光线反射进入镜头</li>\n<li><strong>暗场照明</strong>：光线以低角度照射，用于检测划痕、凹凸、纹理</li>\n<li><strong>透射照明</strong>：即背光</li>\n</ul>\n<hr />\n<h3 id=\"图像采集卡\"><a class=\"anchor\" href=\"#图像采集卡\">#</a> 图像采集卡</h3>\n<h4 id=\"作用\"><a class=\"anchor\" href=\"#作用\">#</a> 作用</h4>\n<p>对于需要 Camera Link 或 CoaXPress 接口的相机，采集卡负责将高速图像数据传输到 PC 内存</p>\n<h4 id=\"选型要点\"><a class=\"anchor\" href=\"#选型要点\">#</a> 选型要点</h4>\n<ul>\n<li>接口类型和带宽必须匹配相机</li>\n<li>通道数：支持单相机或多相机</li>\n<li>内存：板载内存大小影响传输稳定性</li>\n<li>I/O 支持：触发输入 / 输出、编码器输入等</li>\n<li>软件兼容性</li>\n</ul>\n<hr />\n<h3 id=\"处理器工控机\"><a class=\"anchor\" href=\"#处理器工控机\">#</a> 处理器 / 工控机</h3>\n<h4 id=\"cpu\"><a class=\"anchor\" href=\"#cpu\">#</a> CPU</h4>\n<p>选择性能强劲的多核处理器（Intel Core i5/i7/i9, Xeon）</p>\n<h4 id=\"内存\"><a class=\"anchor\" href=\"#内存\">#</a> 内存</h4>\n<ul>\n<li>推荐 16GB 起步</li>\n<li>复杂应用需要 32GB 甚至更多</li>\n</ul>\n<h4 id=\"存储\"><a class=\"anchor\" href=\"#存储\">#</a> 存储</h4>\n<p>SSD 固态硬盘（NVMe 更好）用于快速启动和存储</p>\n<h4 id=\"gpu\"><a class=\"anchor\" href=\"#gpu\">#</a> GPU</h4>\n<p>对于深度学习应用、复杂的 3D 点云处理非常关键</p>\n<h4 id=\"操作系统\"><a class=\"anchor\" href=\"#操作系统\">#</a> 操作系统</h4>\n<ul>\n<li>Windows 10/11 IoT Enterprise LTSC（工业推荐）</li>\n<li>Linux（开源，定制性强）</li>\n</ul>\n<hr />\n<h3 id=\"其他硬件\"><a class=\"anchor\" href=\"#其他硬件\">#</a> 其他硬件</h3>\n<h4 id=\"光学滤镜\"><a class=\"anchor\" href=\"#光学滤镜\">#</a> 光学滤镜</h4>\n<ul>\n<li><strong>偏振片</strong>：消除眩光、反光</li>\n<li><strong>带通 / 窄带滤光片</strong>：抑制环境光干扰</li>\n<li><strong>中性密度滤光片</strong>：防止过曝</li>\n</ul>\n<h4 id=\"传感器编码器\"><a class=\"anchor\" href=\"#传感器编码器\">#</a> 传感器 / 编码器</h4>\n<p>用于提供物体位置信号触发相机 / 光源</p>\n<h4 id=\"io模块\"><a class=\"anchor\" href=\"#io模块\">#</a> I/O 模块</h4>\n<p>连接 PLC、传感器、执行器等自动化设备</p>\n<h4 id=\"防护罩机械支架\"><a class=\"anchor\" href=\"#防护罩机械支架\">#</a> 防护罩 / 机械支架</h4>\n<p>保护设备，确保安装稳固</p>\n<hr />\n<h2 id=\"关键选型考量因素\"><a class=\"anchor\" href=\"#关键选型考量因素\">#</a> 关键选型考量因素</h2>\n<h3 id=\"应用需求\"><a class=\"anchor\" href=\"#应用需求\">#</a> 应用需求</h3>\n<ul>\n<li>检测目标（尺寸、缺陷、有无、定位等）</li>\n<li>精度要求（亚像素级？微米级？毫米级？）</li>\n<li>速度要求（产线节拍）</li>\n<li>视野大小和工作距离</li>\n<li>被测物体特性（材质、颜色、表面反光性等）</li>\n<li>环境条件（温度、湿度、粉尘、振动等）</li>\n</ul>\n<h3 id=\"性能指标\"><a class=\"anchor\" href=\"#性能指标\">#</a> 性能指标</h3>\n<p>基于应用需求推导出的具体参数：分辨率、帧率、景深、曝光时间等</p>\n<h3 id=\"成本预算\"><a class=\"anchor\" href=\"#成本预算\">#</a> 成本预算</h3>\n<p>在满足性能要求的前提下，平衡各组件成本</p>\n<h3 id=\"系统集成与兼容性\"><a class=\"anchor\" href=\"#系统集成与兼容性\">#</a> 系统集成与兼容性</h3>\n<ul>\n<li>各组件之间的兼容性</li>\n<li>与现有自动化设备的通信接口</li>\n<li>视觉软件的选择</li>\n</ul>\n<h3 id=\"可靠性与维护\"><a class=\"anchor\" href=\"#可靠性与维护\">#</a> 可靠性与维护</h3>\n<p>工业环境要求硬件具有高可靠性和长寿命</p>\n<h3 id=\"供应商支持与服务\"><a class=\"anchor\" href=\"#供应商支持与服务\">#</a> 供应商支持与服务</h3>\n<p>良好的技术支持和售后服务至关重要</p>\n<hr />\n<h2 id=\"选型流程建议\"><a class=\"anchor\" href=\"#选型流程建议\">#</a> 选型流程建议</h2>\n<ol>\n<li><strong>明确定义需求</strong>：详细列出所有应用要求、目标和约束条件</li>\n<li><strong>计算核心参数</strong>：分辨率、帧率、工作距离和景深</li>\n<li><strong>初步选择相机</strong>：基于分辨率、帧率、接口等筛选</li>\n<li><strong>选择镜头</strong>：基于相机传感器尺寸、工作距离、视野计算焦距</li>\n<li><strong>设计光源方案</strong>：确定光源类型、颜色、照明方式</li>\n<li><strong>选择处理器 / 工控机</strong>：根据算法复杂度、图像数据量选择配置</li>\n<li><strong>选择其他组件</strong>：采集卡、光源控制器、滤镜等</li>\n<li><strong>验证与测试</strong>：搭建原型系统进行实际测试</li>\n<li><strong>评估供应商与成本</strong>：综合评估技术指标、价格、服务等</li>\n<li><strong>最终决策与采购</strong></li>\n</ol>\n<hr />\n<h2 id=\"选型案例手机屏缺陷检测\"><a class=\"anchor\" href=\"#选型案例手机屏缺陷检测\">#</a> 选型案例：手机屏缺陷检测</h2>\n<h3 id=\"需求\"><a class=\"anchor\" href=\"#需求\">#</a> 需求</h3>\n<ul>\n<li>检测 6 英寸手机屏表面划痕、脏污、亮点 / 暗点</li>\n<li>精度要求：0.05mm 缺陷</li>\n<li>产线速度：1 秒 / 片</li>\n</ul>\n<h3 id=\"计算\"><a class=\"anchor\" href=\"#计算\">#</a> 计算</h3>\n<ul>\n<li><strong>视野</strong>：略大于屏幕尺寸，约 180mm × 90mm</li>\n<li><strong>精度</strong>：0.05mm 缺陷 → 至少需要 4 个像素覆盖\n<ul>\n<li>单方向最小像素数 = (180mm / 0.05mm) × 2 = 7200 像素</li>\n<li>选择 800 万像素以上相机</li>\n</ul>\n</li>\n<li><strong>帧率</strong>：检测时间 &lt; 1 秒，选择 30fps 相机较宽裕</li>\n</ul>\n<h3 id=\"选型方案\"><a class=\"anchor\" href=\"#选型方案\">#</a> 选型方案</h3>\n<ul>\n<li><strong>相机</strong>：高分辨率面阵 CMOS 全局快门相机，800 万像素以上，GigE 或 USB3 接口，黑白</li>\n<li><strong>镜头</strong>：远心镜头或低畸变定焦镜头，高分辨率</li>\n<li><strong>光源</strong>：同轴光或低角度条形光（暗场）突出划痕、脏污</li>\n<li><strong>处理器</strong>：性能较强的工控机（i7 CPU, 32GB RAM），配备 GPU</li>\n<li><strong>其他</strong>：编码器触发相机抓拍，I/O 与 PLC 通信</li>\n</ul>\n",
            "tags": [
                "机器视觉"
            ]
        },
        {
            "id": "https://lzq-cv.github.io/%E4%BD%BF%E7%94%A8PICGO-%E9%98%BF%E9%87%8C%E4%BA%91OSS%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/",
            "url": "https://lzq-cv.github.io/%E4%BD%BF%E7%94%A8PICGO-%E9%98%BF%E9%87%8C%E4%BA%91OSS%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/",
            "title": "使用PICGO-阿里云OSS搭建个人图床",
            "date_published": "2025-09-26T10:06:31.000Z",
            "content_html": "<p>使用阿里云 OSS 和 PicGo 搭建图床，可以让你非常方便地将本地图片自动上传到云端，并直接获取可用于博客、文档等处的图片链接。阿里云 OSS 还可以申请 3 个月免费试用。</p>\n<h3 id=\"配置阿里云oss\"><a class=\"anchor\" href=\"#配置阿里云oss\">#</a> 配置阿里云 OSS</h3>\n<p>首先，我们需要在阿里云上创建存储空间（Bucket）并配置访问权限。</p>\n<ol>\n<li>\n<p><strong>创建 Bucket</strong></p>\n<ul>\n<li>登录阿里云控制台，进入<strong>对象存储 OSS</strong> 服务。</li>\n<li>点击<strong>创建 Bucket</strong>，填写 Bucket 名称（全局唯一），选择离你较近的<strong>地域</strong>。</li>\n<li><strong>读写权限</strong>务必设置为<strong>公共读</strong>，这样图片才能被外部访问。其他选项如存储类型等，保持 “标准存储” 默认值即可。</li>\n</ul>\n</li>\n<li>\n<p><strong>创建 RAM 子用户并授权</strong>（为了安全，不建议直接使用主账号 AccessKey）</p>\n<ul>\n<li>进入<strong>访问控制 RAM</strong> 控制台。</li>\n<li>创建一个子用户（例如命名为  <code>picgo-user</code> ），<strong>访问方式</strong>请勾选 <strong>“OpenAPI 调用访问”</strong> 。系统会自动为该子用户创建 AccessKey（即 AccessKey ID 和 AccessKey Secret），请务必妥善保存这两项信息，后续配置 PicGo 时需要用到。</li>\n<li>为这个子用户<strong>添加权限</strong>。建议直接授权系统策略  <code>AliyunOSSFullAccess</code> （管理对象存储服务 OSS 的权限），或者按需授予更小粒度的权限。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"安装与配置picgo\"><a class=\"anchor\" href=\"#安装与配置picgo\">#</a> 安装与配置 PicGo</h3>\n<p>接下来，我们在电脑上配置 PicGo 客户端来连接 OSS。</p>\n<ol>\n<li>\n<p><strong>安装 PicGo</strong></p>\n<ul>\n<li>请前往 PicGo 的 GitHub Releases 页面<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL01vbHVuZXJmaW5uL1BpY0dvL3JlbGVhc2Vz\"> https://github.com/Molunerfinn/PicGo/releases</span> 下载并安装适合你操作系统的版本。</li>\n</ul>\n</li>\n<li>\n<p><strong>配置阿里云 OSS 图床</strong></p>\n<ul>\n<li>打开 PicGo 应用，在左侧<strong>图床设置</strong>中，找到并点击<strong>阿里云 OSS</strong>。</li>\n<li>根据获取的信息填写以下配置项：\n<ul>\n<li><code>AccessKey ID</code>  和  <code>AccessKey Secret</code> ：填入之前保存的子用户的 AccessKey 信息。</li>\n<li><code>Bucket</code> ：填写你创建的 Bucket 名称。</li>\n<li><code>存储区域</code> ：填写 Bucket 所在地域的<strong> Endpoint（访问域名）中的 “节点” 部分</strong>。例如，如果你的 Endpoint 是  <code>oss-cn-hangzhou.aliyuncs.com</code> ，这里就填  <code>oss-cn-hangzhou</code> 。你可以在 Bucket 的概览页面找到这个信息。</li>\n<li><code>存储路径</code> （可选）：可以指定一个文件夹来存放图片，例如  <code>blog/img/</code> 。如果不填，图片会保存在 Bucket 根目录。</li>\n<li><code>自定义域名</code> （可选）：如果你为 Bucket 配置了自定义加速域名（CNAME），可以在这里填写，例如  <code>https://img.example.com</code> 。</li>\n</ul>\n</li>\n<li>填写完毕后，点击<strong>确定</strong>或<strong>设为默认图床</strong>。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"验证上传与高级集成\"><a class=\"anchor\" href=\"#验证上传与高级集成\">#</a> 验证上传与高级集成</h3>\n<ol>\n<li>\n<p><strong>验证图床是否正常工作</strong></p>\n<ul>\n<li>在 PicGo 的<strong>上传区</strong>，拖拽一张图片或点击选择文件，然后点击<strong>上传</strong>。</li>\n<li>上传成功后，PicGo 会自动将图片的 URL 链接复制到你的剪贴板，并会在相册中显示记录。你可以将链接粘贴到浏览器地址栏中访问，确认图片可以正常显示。</li>\n</ul>\n</li>\n<li>\n<p><strong>在 Typora 中集成 PicGo（实现自动上传）</strong></p>\n<ul>\n<li>如果你使用 Typora 编写 Markdown 文档，可以将其与 PicGo 无缝集成。打开 Typora，进入<strong>文件</strong> &gt; <strong>偏好设置</strong> &gt; <strong>图像</strong>。</li>\n<li>在上传服务设置中，选择 <strong>PicGo (app)</strong>，并在下方指定 PicGo 的安装路径。</li>\n<li>点击<strong>验证图片上传选项</strong>，如果提示成功，说明配置正确。之后在 Typora 中插入的本地图片在保存时便会自动上传到 OSS 并替换为网络链接。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"实用技巧与注意事项\"><a class=\"anchor\" href=\"#实用技巧与注意事项\">#</a> 实用技巧与注意事项</h3>\n<p>为了让你的图床更安全、经济地运行，这里还有一些建议：</p>\n<ul>\n<li><strong>安全建议</strong>\n<ul>\n<li><strong>防盗链</strong>：在 OSS Bucket 的<strong>权限管理</strong> &gt; <strong>防盗链</strong>设置中，可以添加允许访问你图片的域名白名单（如你的博客域名、 <code>*.console.aliyun.com</code>  等），防止图片被其他网站盗用。</li>\n<li><strong>权限最小化</strong>：授予子用户的权限遵循最小权限原则，仅授予其必要的 OSS 管理权限。</li>\n</ul>\n</li>\n<li><strong>成本优化</strong>\n<ul>\n<li>阿里云 OSS 的费用主要包括存储容量、流量和请求次数。对于个人博客或小规模使用，消耗通常很低，甚至可以购买资源包来进一步降低成本。</li>\n</ul>\n</li>\n<li><strong>故障排查</strong>\n<ul>\n<li><strong>上传失败</strong>：首先检查 AccessKey、Bucket 名称、存储区域（尤其是区域后缀是否正确）是否填写无误。确保子用户已被正确授权。</li>\n<li><strong>图片无法访问</strong>：检查 Bucket 的读写权限是否为 “公共读”。如果使用了防盗链，请确认当前访问域名是否在白名单中。</li>\n</ul>\n</li>\n</ul>\n",
            "tags": [
                "图床"
            ]
        },
        {
            "id": "https://lzq-cv.github.io/%E4%BD%BF%E7%94%A8PICGO-GitHub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/",
            "url": "https://lzq-cv.github.io/%E4%BD%BF%E7%94%A8PICGO-GitHub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/",
            "title": "使用PICGO-GitHub搭建个人图床",
            "date_published": "2025-09-26T09:55:51.000Z",
            "content_html": "<p>通过 GitHub API 和 jsDelivr CDN 搭建图床，简单说就是<strong>用 GitHub 存图片，用 jsDelivr 加速访问</strong>。这个方案免费、可靠，对开发者尤其友好。</p>\n<h3 id=\"第一步准备工作\"><a class=\"anchor\" href=\"#第一步准备工作\">#</a> 第一步：准备工作</h3>\n<ol>\n<li><strong>创建 GitHub 仓库</strong>：\n<ul>\n<li>登录 GitHub，点击右上角 “+” 号，选择 “New repository”。</li>\n<li>取一个清晰的仓库名（如  <code>my-image-bed</code> ）。</li>\n<li>仓库需设置为 <strong>Public</strong>（公开），因为 jsDelivr 无法加速私有仓库的资源。</li>\n<li>其他设置保持默认，点击 “Create repository”。</li>\n</ul>\n</li>\n<li><strong>生成 GitHub Personal Access Token (PAT)</strong>：\n<ul>\n<li>点击右上角头像 -&gt; “Settings” -&gt; 左侧 “Developer settings” -&gt; “Personal access tokens” -&gt; “Tokens (classic)” -&gt; “Generate new token (classic)”。</li>\n<li>为令牌添加一个<strong>备注</strong>（如  <code>For Image Bed</code> ）。</li>\n<li><strong>选择权限</strong>：务必勾选  <code>repo</code> （完全控制私有仓库）下的所有权限，这样才允许通过 API 管理仓库内的文件。</li>\n<li>生成后，<strong>务必立即复制并妥善保存</strong>这个令牌字符串，关闭页面后就无法再次查看。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"第二步配置上传工具-以-picgo-为例\"><a class=\"anchor\" href=\"#第二步配置上传工具-以-picgo-为例\">#</a> 第二步：配置上传工具 (以 PicGo 为例)</h3>\n<p>手动上传和获取链接比较麻烦，使用工具可以自动化这个过程。<strong>PicGo</strong> 是一个很好的选择。</p>\n<ol>\n<li><strong>下载并安装 PicGo</strong>：从其 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL01vbHVuZXJmaW5uL1BpY0dvL3JlbGVhc2Vz\">GitHub Releases</span> 页面下载并安装。</li>\n<li><strong>安装 GitHub 图床插件</strong>：\n<ul>\n<li>打开 PicGo，在左侧找到 “插件设置”。</li>\n<li>搜索  <code>github-plus</code>  并安装。这个插件功能更丰富。</li>\n</ul>\n</li>\n<li><strong>配置图床设置</strong>：\n<ul>\n<li>在左侧 “图床设置” 中找到 “GitHubPlus”。</li>\n<li>按下表填写信息：</li>\n</ul>\n</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">配置项</th>\n<th style=\"text-align:left\">填写说明</th>\n<th style=\"text-align:left\">示例（需替换为你自己的信息）</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><strong>仓库名</strong></td>\n<td style=\"text-align:left\">你的 GitHub 用户名 / 仓库名</td>\n<td style=\"text-align:left\"><code>yourusername/my-image-bed</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>分支名</strong></td>\n<td style=\"text-align:left\">一般为  <code>main</code>  或  <code>master</code></td>\n<td style=\"text-align:left\"><code>main</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>Token</strong></td>\n<td style=\"text-align:left\">粘贴你刚才生成的 Personal Access Token</td>\n<td style=\"text-align:left\"><code>ghp_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>存储路径</strong></td>\n<td style=\"text-align:left\">可选。图片在仓库中的存放目录，如  <code>images/</code> 。若不填则保存在仓库根目录。</td>\n<td style=\"text-align:left\"><code>images/</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>自定义域名</strong></td>\n<td style=\"text-align:left\"><strong>非常重要</strong>！填写 jsDelivr 的加速域名，格式： <code>https://cdn.jsdelivr.net/gh/你的用户名/你的仓库名</code></td>\n<td style=\"text-align:left\"><code>https://cdn.jsdelivr.net/gh/yourusername/my-image-bed</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>设置提醒日期</strong></td>\n<td style=\"text-align:left\">可选。由于 PAT 可能有过期时间，建议在此设置提醒，以便及时更新 Token，避免上传失败。</td>\n<td style=\"text-align:left\">在 Token 过期前选择日期</td>\n</tr>\n</tbody>\n</table>\n<ol start=\"4\">\n<li><strong>设为默认图床并上传测试</strong>：配置完成后，将其设为默认图床，然后拖拽一张图片上传试试。成功后，PicGo 会自动将<strong>加速后的图片链接</strong>复制到你的剪贴板。</li>\n</ol>\n<h3 id=\"第三步获取-jsdelivr-加速链接\"><a class=\"anchor\" href=\"#第三步获取-jsdelivr-加速链接\">#</a> 第三步：获取 jsDelivr 加速链接</h3>\n<p>无论你是否使用 PicGo 等工具，图片上传到 GitHub 仓库后，其 jsDelivr 的加速链接都遵循统一的格式：</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/gh/你的GitHub用户名/你的仓库名@发布的版本号/文件路径</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><strong> <code>@发布的版本号</code> </strong>：这部分是可选的。可以是分支名（如  <code>@main</code> ）、具体的发布版本号（如  <code>@v1.0</code> ）或提交哈希值。<strong>如果不指定版本，默认会指向最新资源</strong>。\n<ul>\n<li><strong>最佳实践</strong>：对于图床，<strong>通常建议省略  <code>@版本号</code> </strong>，这样总能访问到最新上传的图片。例如：<br />\n <code>https://cdn.jsdelivr.net/gh/yourusername/my-image-bed/images/cat.jpg</code></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"注意事项\"><a class=\"anchor\" href=\"#注意事项\">#</a> 注意事项</h3>\n<ul>\n<li><strong>仓库必须公开</strong>：jsDelivr <strong>无法</strong>加速私有仓库的资源。</li>\n<li><strong>文件大小限制</strong>：jsDelivr 建议文件大小控制在 20MB 以内，这对于绝大多数图片来说足够了。</li>\n<li><strong>缓存问题</strong>：jsDelivr 会对文件进行缓存以提升速度。这意味着如果你更新了 GitHub 仓库中的同名图片，可能需要等待几分钟到几小时缓存刷新后，通过 jsDelivr 链接才能看到变更。<strong>强制更新缓存的方法是在链接后添加特定版本号、分支名或哈希值</strong>。</li>\n<li><strong>Token 安全</strong>：你的 GitHub Token 相当于密码，<strong>切勿泄露</strong>。一旦泄露，应立即到 GitHub 设置中撤销它。</li>\n<li><strong>API 速率限制</strong>：GitHub API 有调用频率限制。对于个人使用通常不会触限，但如果是极高频率调用，需要注意。</li>\n</ul>\n",
            "tags": [
                "图床"
            ]
        },
        {
            "id": "https://lzq-cv.github.io/%E4%BD%BF%E7%94%A8PICGO-CloudflarR2%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/",
            "url": "https://lzq-cv.github.io/%E4%BD%BF%E7%94%A8PICGO-CloudflarR2%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/",
            "title": "使用PICGO-CloudflarR2搭建个人图床",
            "date_published": "2025-09-26T09:54:33.000Z",
            "content_html": "<h3 id=\"cloudflare-r2\"><a class=\"anchor\" href=\"#cloudflare-r2\">#</a> Cloudflare R2</h3>\n<p>自己搭建图床既能掌控数据，又能在长期节省成本。Cloudflare R2 因其<strong>免费额度慷慨</strong>（每月 10GB 存储、100 万次 A 类操作、1000 万次 B 类操作）且<strong>出口流量全免</strong>，成为了一个非常不错的选择。</p>\n<h3 id=\"cloudflare-r2-免费额度\"><a class=\"anchor\" href=\"#cloudflare-r2-免费额度\">#</a> Cloudflare R2 免费额度</h3>\n<p>首先，我们来了解一下 Cloudflare R2 的免费计划：</p>\n<table>\n<thead>\n<tr>\n<th>资源类型</th>\n<th>每月免费额度</th>\n<th>超额费率 (截至 2025 年)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>存储空间</strong></td>\n<td>10 GB</td>\n<td>$0.015 / GB</td>\n</tr>\n<tr>\n<td><strong>A 类操作</strong></td>\n<td>100 万次请求 (写入、列举等)</td>\n<td>$4.50 / 100 万次请求</td>\n</tr>\n<tr>\n<td><strong>B 类操作</strong></td>\n<td>1000 万次请求 (读取等)</td>\n<td>$0.36 / 100 万次请求</td>\n</tr>\n<tr>\n<td><strong>出口流量</strong></td>\n<td><strong>完全免费</strong></td>\n<td><strong>完全免费</strong></td>\n</tr>\n</tbody>\n</table>\n<p><strong>注意</strong>：A 类操作通常包括上传、列举文件等写入操作，而 B 类操作主要是下载、获取文件等读取操作。免费额度对于个人博客或小规模网站通常足够。</p>\n<h3 id=\"搭建步骤\"><a class=\"anchor\" href=\"#搭建步骤\">#</a> 搭建步骤</h3>\n<h3 id=\"第一步准备工作\"><a class=\"anchor\" href=\"#第一步准备工作\">#</a> 第一步：准备工作</h3>\n<ol>\n<li><strong>注册 Cloudflare 账号</strong>：访问 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9kYXNoLmNsb3VkZmxhcmUuY29tL3NpZ24tdXA=\">Cloudflare 官网</span> 并注册账号。</li>\n<li><strong>准备域名</strong>：需要一个<strong>已托管在 Cloudflare 上</strong>的域名（作为图床的最终访问域名）。你可以在 Cloudflare 添加现有的域名，或者注册新域名后将其 DNS 服务器改为 Cloudflare 指定的。</li>\n<li><strong>验证支付方式</strong>：虽然 R2 有免费额度，但 Cloudflare 仍需要你绑定一种支付方式（如信用卡或 PayPal）以验证身份。<strong>只要用量不超额，就不会产生费用</strong>。</li>\n</ol>\n<h3 id=\"第二步配置-cloudflare-r2\"><a class=\"anchor\" href=\"#第二步配置-cloudflare-r2\">#</a> 第二步：配置 Cloudflare R2</h3>\n<ol>\n<li><strong>开通 R2 服务</strong>：\n<ul>\n<li>登录 Cloudflare 仪表板，在侧边栏找到 <strong>“R2”</strong> 并点击。</li>\n<li>按照提示完成支付方式的绑定以开通 R2。</li>\n</ul>\n</li>\n<li><strong>创建存储桶（Bucket）</strong>：\n<ul>\n<li>在 R2 页面点击 <strong>“创建存储桶”</strong>。</li>\n<li>填写存储桶名称（例如  <code>my-image-bed</code> ）。</li>\n<li><strong>地区（Region）</strong> 选择离你的目标用户较近的区域，例如  <code>亚太地区 (APAC)</code>  对国内访问更友好。</li>\n<li>其他设置保持默认，点击创建。</li>\n</ul>\n</li>\n<li><strong>启用公共访问权限</strong>：\n<ul>\n<li>创建成功后，进入该存储桶的 <strong>“设置”</strong> 页。</li>\n<li>找到 <strong>“公共访问”</strong> 选项，点击 <strong>“启用”</strong> 并确认。这将生成一个临时的  <code>r2.dev</code>  子域名用于访问文件。</li>\n<li><strong>（强烈推荐）使用自定义域名</strong>：临时的  <code>r2.dev</code>  域名有速率限制。在存储桶设置的 <strong>“自定义域”</strong> 部分，添加你已托管在 CF 的域名（例如  <code>img.yourdomain.com</code> ）。Cloudflare 会自动为你配置 DNS 记录。</li>\n</ul>\n</li>\n<li><strong>获取 API 凭证</strong>：\n<ul>\n<li>在仪表板左侧栏找到 <strong>“R2” &gt; “API 令牌”</strong>。</li>\n<li>点击 <strong>“创建 API 令牌”</strong>。</li>\n<li>选择 <strong>“编辑”</strong> 权限，并指定到你刚创建的存储桶。</li>\n<li>安全起见，可以设置令牌的 TTL（生存时间），对于长期使用的图床，可选择永久。</li>\n<li>创建成功后，<strong>务必妥善保存</strong>显示的  <code>访问密钥 ID</code>  和  <code>秘密访问密钥</code> ，它们只会显示一次。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"第三步配置图床管理工具以-picgo-为例\"><a class=\"anchor\" href=\"#第三步配置图床管理工具以-picgo-为例\">#</a> 第三步：配置图床管理工具（以 PicGo 为例）</h3>\n<p>PicGo 是一个开源图床客户端，可以简化上传操作。</p>\n<ol>\n<li><strong>下载并安装 PicGo</strong>：\n<ul>\n<li>访问 PicGo 的 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL01vbHVuZXJmaW5uL1BpY0dvL3JlbGVhc2Vz\">GitHub Releases 页面</span>，下载并安装适合你操作系统的最新版本。</li>\n</ul>\n</li>\n<li><strong>安装 S3 插件</strong>：\n<ul>\n<li>由于 Cloudflare R2 兼容 S3 API，我们需要在 PicGo 中安装 S3 插件。</li>\n<li>打开 PicGo，进入 <strong>“插件设置”</strong>。</li>\n<li>搜索并安装  <code>picgo-plugin-s3</code>  插件。</li>\n</ul>\n</li>\n<li><strong>配置 PicGo</strong>：\n<ul>\n<li>安装插件后，在 <strong>“图床设置”</strong> 中找到 <strong>“Amazon S3”</strong> 进行配置。</li>\n<li>关键配置项如下（请根据你的实际情况填写）：</li>\n</ul>\n</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>配置项</th>\n<th>填写值说明</th>\n<th>示例（请替换为你自己的信息）</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>应用密钥 ID</strong></td>\n<td>填写你刚才保存的  <code>访问密钥 ID</code></td>\n<td><code>1a2b3c4d5e6f7g8h9i0j</code></td>\n</tr>\n<tr>\n<td><strong>应用密钥</strong></td>\n<td>填写你刚才保存的  <code>秘密访问密钥</code></td>\n<td><code>z0y1x2w3v4u5t6s7r8q9p...</code></td>\n</tr>\n<tr>\n<td><strong>存储桶名</strong></td>\n<td>你创建的存储桶名称</td>\n<td><code>my-image-bed</code></td>\n</tr>\n<tr>\n<td><strong>存储区域</strong></td>\n<td>R2 无需填写特定区域，可填写  <code>auto</code>  或留空</td>\n<td><code>auto</code></td>\n</tr>\n<tr>\n<td><strong>自定义节点</strong></td>\n<td>填写你的 S3 API 端点（可在 R2 的 API 令牌页面找到）</td>\n<td><code>https://xxx.r2.cloudflarestorage.com</code></td>\n</tr>\n<tr>\n<td><strong>自定义域名</strong></td>\n<td><strong>填写你连接到存储桶的自定义域名</strong>，用于生成图片链接</td>\n<td><code>https://img.yourdomain.com</code></td>\n</tr>\n<tr>\n<td><strong>文件路径</strong></td>\n<td>定义图片在存储桶中的存储路径结构（可选，但建议设置以保持整洁）</td>\n<td><code>{year}/{month}/{day}/{fileName}</code></td>\n</tr>\n<tr>\n<td><strong>ACL 访问控制列表</strong></td>\n<td>必须设置为  <code>public-read</code> ，这样图片链接才能被公开访问</td>\n<td><code>public-read</code></td>\n</tr>\n</tbody>\n</table>\n<p><strong>提示</strong>： <code>{year}</code> ,  <code>{month}</code> ,  <code>{day}</code> ,  <code>{fileName}</code>  是 PicGo 的<strong>变量</strong>，会自动替换为实际值。</p>\n<ol>\n<li><strong>设为默认图床并上传测试</strong>：\n<ul>\n<li>配置完成后，可以点击 <strong>“设为默认图床”</strong>。</li>\n<li>在 <strong>“上传区”</strong> 拖拽或选择一张图片进行上传。</li>\n<li>上传成功后，PicGo 会自动将图片的 Markdown 链接复制到剪贴板。你可以粘贴到文本编辑器中测试一下是否能正常访问。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"第四步访问优化与安全设置可选但重要\"><a class=\"anchor\" href=\"#第四步访问优化与安全设置可选但重要\">#</a> 第四步：访问优化与安全设置（可选但重要）</h3>\n<p>为了让图床更高效、安全，建议进行如下设置：</p>\n<ol>\n<li><strong>配置缓存规则</strong>：利用 Cloudflare CDN 缓存图片，减少回源请求，提升速度并节省操作次数。\n<ul>\n<li>在 Cloudflare 仪表板中，进入你的<strong>域名</strong>（而非 R2）。</li>\n<li>转到 <strong>“规则” &gt; “缓存规则”</strong>。</li>\n<li>创建一条新规则，URL 填写  <code>img.yourdomain.com/*</code> （你的图床域名）。</li>\n<li>添加设置：<strong>缓存级别</strong> - 缓存所有内容。</li>\n<li>添加设置：<strong>边缘缓存 TTL</strong> - 设置为一个较长的时间，例如 “1 个月”。</li>\n</ul>\n</li>\n<li><strong>设置防盗链（WAF）</strong>：防止其他网站直接链接你的图片，消耗你的流量和请求次数。\n<ul>\n<li>在域名的 <strong>“安全性” &gt; “WAF”</strong> 中创建自定义规则。</li>\n<li>编写规则，例如： <code>(http.referer does not contain &quot;yourdomain.com&quot;) and (http.request.uri.path contains &quot;/images/&quot;)</code> ，操作选择 “阻止”。这表示仅允许来自你自己域名（ <code>yourdomain.com</code> ）的请求访问图片目录。</li>\n</ul>\n</li>\n<li><strong>配置 CORS（跨域资源共享）</strong>：如果你的图床图片需要被不同域名的网站引用（例如你的主站、CDN 等），需要在存储桶设置中配置 CORS。\n<ul>\n<li>在存储桶的 <strong>“设置”</strong> 中找到 <strong>“CORS 策略”</strong>。</li>\n<li>添加策略，允许所需域名的  <code>GET</code>  请求。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"总结与提醒\"><a class=\"anchor\" href=\"#总结与提醒\">#</a> 总结与提醒</h3>\n<p>通过以上步骤，你应该已经成功搭建了一个基于 Cloudflare R2 的免费图床。它<strong>免费额度充足</strong>、<strong>性能可靠</strong>，并且通过 PicGo 可以<strong>非常便捷地上传和管理图片</strong>。</p>\n<p>最后请注意：</p>\n<ul>\n<li><strong>保管好 API 令牌</strong>：如同密码，切勿泄露。</li>\n<li><strong>关注用量</strong>：定期在 Cloudflare 仪表板检查 R2 的使用情况，确保在免费额度内。</li>\n<li><strong>备份重要图片</strong>：虽然 R2 很可靠，但对于极其重要的图片，建议额外备份。</li>\n</ul>\n",
            "tags": [
                "图床"
            ]
        },
        {
            "id": "https://lzq-cv.github.io/%E5%85%8D%E8%B4%B9%E5%9B%BE%E5%BA%8A%E8%B8%A9%E5%9D%91/",
            "url": "https://lzq-cv.github.io/%E5%85%8D%E8%B4%B9%E5%9B%BE%E5%BA%8A%E8%B8%A9%E5%9D%91/",
            "title": "免费图床踩坑",
            "date_published": "2025-09-26T09:52:04.000Z",
            "content_html": "<h3 id=\"踩坑\"><a class=\"anchor\" href=\"#踩坑\">#</a> 踩坑</h3>\n<p>免费的图床是真的不稳定，上传的图片随时都有被清除的可能，想要长期使用还是需要自己搭建图床。但是，我对图床需求又不是特别多，只为博客网站提供图片源仅此而已。花钱去买阿里云 OSS 和腾讯云 COS 的云存储服务，又不太值。查了一些免费图床搭建方法，目前就 2 种比较推荐的：</p>\n<p>方法 1：CloudflareR2+PICGO</p>\n<p>方法 2：Github+PICGO</p>\n<h3 id=\"临时使用的免费图床\"><a class=\"anchor\" href=\"#临时使用的免费图床\">#</a> 临时使用的免费图床：</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9pbWcuMTMxMjEzLnh5ei8=\">图床</span></p>\n",
            "tags": [
                "图床"
            ]
        },
        {
            "id": "https://lzq-cv.github.io/shoka%E4%B8%BB%E9%A2%98%E9%83%A8%E7%BD%B2/",
            "url": "https://lzq-cv.github.io/shoka%E4%B8%BB%E9%A2%98%E9%83%A8%E7%BD%B2/",
            "title": "shoka主题部署",
            "date_published": "2025-09-26T09:48:44.000Z",
            "content_html": "<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">先要搭建好HEXO博客框架</span><br><span class=\"line\"># cd your-blog</span><br><span class=\"line\">git clone https://github.com/amehime/hexo-theme-shoka.git ./themes/shoka</span><br></pre></td></tr></table></figure></p>\n<p>1.<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvaGV4by1yZW5kZXJlci1tdWx0aS1tYXJrZG93bi1pdA==\">https://www.npmjs.com/package/hexo-renderer-multi-markdown-it</span></p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm un hexo-renderer-marked --save</span><br><span class=\"line\">npm i hexo-renderer-multi-markdown-it --save</span><br><span class=\"line\">npm un hexo-renderer-multi-markdown-it --save</span><br><span class=\"line\"></span><br><span class=\"line\"># 1. 卸载旧渲染器 (如果已安装)</span><br><span class=\"line\">npm uninstall hexo-renderer-marked --save</span><br><span class=\"line\"></span><br><span class=\"line\"># 2. 设置跳过 Chromium 下载</span><br><span class=\"line\">set PUPPETEER_SKIP_DOWNLOAD=1  # Windows CMD</span><br><span class=\"line\"></span><br><span class=\"line\"># 3. 安装插件</span><br><span class=\"line\">npm i hexo-renderer-multi-markdown-it --save</span><br><span class=\"line\"></span><br><span class=\"line\"># 4. 验证安装</span><br><span class=\"line\">npm list hexo-renderer-multi-markdown-it</span><br></pre></td></tr></table></figure></p>\n<p>2.<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvaGV4by1hdXRvcHJlZml4ZXI=\">https://www.npmjs.com/package/hexo-autoprefixer</span></p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-autoprefixer --save</span><br></pre></td></tr></table></figure></p>\n<p>3.<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvaGV4by1hbGdvbGlhc2VhcmNo\">https://www.npmjs.com/package/hexo-algoliasearch</span></p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-algoliasearch --save</span><br></pre></td></tr></table></figure></p>\n<p>4.<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvaGV4by1zeW1ib2xzLWNvdW50LXRpbWU=\">https://www.npmjs.com/package/hexo-symbols-count-time</span></p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-symbols-count-time</span><br></pre></td></tr></table></figure></p>\n<p>5.<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvaGV4by1mZWVk\">https://www.npmjs.com/package/hexo-feed</span></p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-feed --save-dev</span><br></pre></td></tr></table></figure></p>\n",
            "tags": [
                "shoka"
            ]
        },
        {
            "id": "https://lzq-cv.github.io/HEXO%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/",
            "url": "https://lzq-cv.github.io/HEXO%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/",
            "title": "HEXO博客搭建",
            "date_published": "2025-09-26T09:43:28.000Z",
            "content_html": "<h2 id=\"hexo博客搭建\"><a class=\"anchor\" href=\"#hexo博客搭建\">#</a> HEXO 博客搭建</h2>\n<h4 id=\"1-hexo\"><a class=\"anchor\" href=\"#1-hexo\">#</a> 1. HEXO</h4>\n<p>Hexo 是一个基于 Node.js 的快速、简洁的静态博客框架，适合通过 Markdown 编写内容并生成静态网页。有以下优点：</p>\n<ul>\n<li>** 支持 Markdown：** 文章以 Markdown 格式编写，简单易用。</li>\n<li>** 部署简单：** 一键部署到 GitHub Pages、Netlify 等平台，与 GitHub Pages 无缝集成。</li>\n<li>** 主题丰富：** 社区活跃，主题和插件丰富。</li>\n<li>** 高效快速：** 利用 Node.js 高效渲染，快速生成静态页面。轻量快速，适合博客和文档。</li>\n</ul>\n<h4 id=\"2-环境搭建\"><a class=\"anchor\" href=\"#2-环境搭建\">#</a> 2. 环境搭建</h4>\n<p>首先在官网下载并安装好 node.js 和 git。</p>\n<p>node.js 官网：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ub2RlanMub3JnL3poLWNuL2Rvd25sb2Fk\">https://nodejs.org/zh-cn/download</span></p>\n<p>git 官网：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXQtc2NtLmNvbS9kb3dubG9hZHM=\">https://git-scm.com/downloads</span></p>\n<p>然后，打开 cmd 或者鼠标右键 git bash here，搭建本地 HEXO 博客。</p>\n<p>HEXO 官网：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL3poLWNuLw==\">https://hexo.io/zh-cn/</span></p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-cli -g <span class=\"comment\">#安装hexo命令行工具</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#包管理工具</span></span><br><span class=\"line\">npm install -g pnpm <span class=\"comment\">#安装pnpm</span></span><br><span class=\"line\">pnpm config <span class=\"built_in\">set</span> registry https://registry.npmmirror.com/</span><br><span class=\"line\">npm install -g yarn <span class=\"comment\">#安装yarn</span></span><br><span class=\"line\">yarn config <span class=\"built_in\">set</span> registry https://registry.npmmirror.com/</span><br><span class=\"line\"></span><br><span class=\"line\">hexo init LZQ-CV.github.io <span class=\"comment\">#初始化创建</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> LZQ-CV.github.io  <span class=\"comment\">#进入创建的项目目录</span></span><br><span class=\"line\">npm install <span class=\"comment\">#安装依赖</span></span><br><span class=\"line\"></span><br><span class=\"line\">hexo new <span class=\"built_in\">test</span> <span class=\"comment\">#生成test.md文件</span></span><br><span class=\"line\"></span><br><span class=\"line\">hexo clean <span class=\"comment\">#清除缓存</span></span><br><span class=\"line\">hexo generate <span class=\"comment\">#生成禁态页面</span></span><br><span class=\"line\"></span><br><span class=\"line\">hexo server <span class=\"comment\">#启动本地服务器</span></span><br><span class=\"line\">hexo deploy <span class=\"comment\">#远程部署</span></span><br><span class=\"line\"></span><br><span class=\"line\">npm install hexo-deployer-git --save</span><br><span class=\"line\">pnpm install hexo-deployer-git --save <span class=\"comment\">#安装git部署插件</span></span><br><span class=\"line\">git init <span class=\"comment\">#git初始化</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">node_modules用于放置NPM包,无需注意</span><br><span class=\"line\">scaffolds储存文章模板,hexo new时会用到</span><br><span class=\"line\"><span class=\"built_in\">source</span>储存文章和部分资源</span><br><span class=\"line\">themes储存主题</span><br><span class=\"line\">_config.xxx.yml是主题的plus版配置文件(xxx须更改为主题名)</span><br><span class=\"line\">_config.yml是hexo的配置文件</span><br><span class=\"line\">package.jsonNPM的包json,无需注意</span><br></pre></td></tr></table></figure></p>\n<p>打开项目文件夹，找到_config.yml 并修改。</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repo: https://LZQ-CV:填入token开发者令牌@github.com/LZQ-CV/LZQ-CV.github.io.git</span><br><span class=\"line\">  #远程仓库路径有HTTPs和SSH的区别，这里使用的是https。</span><br><span class=\"line\">  repo: git@github.com:LZQ-CV/LZQ-CV.github.io.git</span><br><span class=\"line\">  #远程仓库路径有HTTPs和SSH的区别，这里使用的是SSH。</span><br><span class=\"line\">  branch: main #GitHub仓库默认分支</span><br><span class=\"line\">  </span><br></pre></td></tr></table></figure></p>\n<p>安装 HEXO 的主题</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure></p>\n<p>修改  <code>_config.yml</code>  中的  <code>theme: next</code> 。</p>\n<p>也可以直接把下载好的主题放到项目文件夹的 themes 文件夹中。</p>\n<h4 id=\"3远程部署到github\"><a class=\"anchor\" href=\"#3远程部署到github\">#</a> 3. 远程部署到 GitHub</h4>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.email <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">git config --global user.name <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">git config --global --list <span class=\"comment\">#查看是否配置成功</span></span><br><span class=\"line\">ssh-keygen -t rsa -C <span class=\"string\">&quot;email&quot;</span> <span class=\"comment\">#生成ssh公钥</span></span><br><span class=\"line\">ssh -T git@github.com <span class=\"comment\">#验证是否链接成功</span></span><br><span class=\"line\"></span><br><span class=\"line\">hexo deploy <span class=\"comment\">#部署</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n",
            "tags": [
                "HEXO"
            ]
        },
        {
            "id": "https://lzq-cv.github.io/hello-world/",
            "url": "https://lzq-cv.github.io/hello-world/",
            "title": "Hello World",
            "date_published": "2025-09-26T08:47:49.801Z",
            "content_html": "<p>Welcome to <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvLw==\">Hexo</span>! This is your very first post. Check <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mv\">documentation</span> for more info. If you get any problems when using Hexo, you can find the answer in <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvdHJvdWJsZXNob290aW5nLmh0bWw=\">troubleshooting</span> or you can ask me on <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvL2lzc3Vlcw==\">GitHub</span>.</p>\n<h2 id=\"quick-start\"><a class=\"anchor\" href=\"#quick-start\">#</a> Quick Start</h2>\n<h3 id=\"create-a-new-post\"><a class=\"anchor\" href=\"#create-a-new-post\">#</a> Create a new post</h3>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure></p>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvd3JpdGluZy5odG1s\">Writing</span></p>\n<h3 id=\"run-server\"><a class=\"anchor\" href=\"#run-server\">#</a> Run server</h3>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure></p>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvc2VydmVyLmh0bWw=\">Server</span></p>\n<h3 id=\"generate-static-files\"><a class=\"anchor\" href=\"#generate-static-files\">#</a> Generate static files</h3>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure></p>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZ2VuZXJhdGluZy5odG1s\">Generating</span></p>\n<h3 id=\"deploy-to-remote-sites\"><a class=\"anchor\" href=\"#deploy-to-remote-sites\">#</a> Deploy to remote sites</h3>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure></p>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvb25lLWNvbW1hbmQtZGVwbG95bWVudC5odG1s\">Deployment</span></p>\n",
            "tags": []
        }
    ]
}