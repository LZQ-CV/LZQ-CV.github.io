{
    "version": "https://jsonfeed.org/version/1",
    "title": "Learning-Sharing-Recording • All posts by \"lamp lnmp\" tag",
    "description": "CV Engineer",
    "home_page_url": "https://LZQ-CV.github.io",
    "items": [
        {
            "id": "https://lzq-cv.github.io/2025/09/27/LAMP%E5%92%8CLNMP%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%9E%B6%E6%9E%84%E7%9A%84%E5%8C%BA%E5%88%AB/",
            "url": "https://lzq-cv.github.io/2025/09/27/LAMP%E5%92%8CLNMP%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%9E%B6%E6%9E%84%E7%9A%84%E5%8C%BA%E5%88%AB/",
            "title": "LAMP和LNMP服务器架构的区别",
            "date_published": "2025-09-27T00:51:01.000Z",
            "content_html": "<p>LAMP 和 LNMP 是两种最流行的传统网站服务器架构组合。它们的核心区别在于 <strong>Web 服务器</strong> 的不同。</p>\n<ul>\n<li><strong>LAMP</strong>: Linux + <strong>A</strong>pache + MySQL/MariaDB + PHP/Python/Perl</li>\n<li><strong>LNMP</strong>: Linux + <strong>N</strong>ginx + MySQL/MariaDB + PHP/Python/Perl\n<ul>\n<li>有时也被称为 <strong>LEMP</strong>（因为 Nginx 读作 “engine-x”，所以取首字母 “E”）。<strong>LNMP 和 LEMP 指的是同一个架构</strong>。</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"一-核心组件对比\"><a class=\"markdownIt-Anchor\" href=\"#一-核心组件对比\">#</a> 一、核心组件对比</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">组件</th>\n<th style=\"text-align:left\">LAMP 栈</th>\n<th style=\"text-align:left\">LNMP 栈</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><strong>操作系统 (L)</strong></td>\n<td style=\"text-align:left\"><strong>L</strong>inux</td>\n<td style=\"text-align:left\"><strong>L</strong>inux</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>Web 服务器</strong></td>\n<td style=\"text-align:left\"><strong>A</strong>pache HTTP Server</td>\n<td style=\"text-align:left\"><strong>N</strong>ginx</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>数据库 (M)</strong></td>\n<td style=\"text-align:left\"><strong>M</strong>ySQL / MariaDB</td>\n<td style=\"text-align:left\"><strong>M</strong>ySQL / MariaDB</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>编程语言 §</strong></td>\n<td style=\"text-align:left\"><strong>P</strong>HP, Python, Perl（PHP 最经典）</td>\n<td style=\"text-align:left\"><strong>P</strong>HP, Python, Perl（PHP 最经典）</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h3 id=\"二-核心区别apache-vs-nginx\"><a class=\"markdownIt-Anchor\" href=\"#二-核心区别apache-vs-nginx\">#</a> 二、核心区别：Apache vs. Nginx</h3>\n<p>这是两个技术栈最根本的差异，其他区别都源于此。</p>\n<h4 id=\"apachelamp-的核心\"><a class=\"markdownIt-Anchor\" href=\"#apachelamp-的核心\">#</a> Apache（LAMP 的核心）</h4>\n<ul>\n<li>\n<p><strong>工作模型</strong>：</p>\n<ul>\n<li>传统上采用 <strong>多进程 / 多线程预生成（MPM Prefork/Worker）模型</strong>。每个并发连接都会由一个独立的进程或线程处理。</li>\n<li><strong>优点</strong>： 模型简单稳定，与各种 PHP 模块兼容性好。</li>\n<li><strong>缺点</strong>： 当面对成千上万的并发连接时，创建和管理大量进程 / 线程会消耗大量的内存和 CPU 资源，成为性能瓶颈。</li>\n</ul>\n</li>\n<li>\n<p><strong>配置方式</strong>：</p>\n<ul>\n<li>支持通过目录下的 <strong>.htaccess</strong> 文件进行分布式配置。这意味着可以在网站根目录下的任何文件夹里放置一个 <code>.htaccess</code>  文件来重写主配置（如 URL 重写、访问控制等）。</li>\n<li><strong>优点</strong>： 对共享主机环境极其友好，用户无需重启 Apache 即可修改配置，非常灵活。</li>\n<li><strong>缺点</strong>： 带来性能损失，因为 Apache 需要遍历目录树来查找和解析 <code>.htaccess</code>  文件。</li>\n</ul>\n</li>\n<li>\n<p><strong>特性</strong>：</p>\n<ul>\n<li>模块化程度极高，功能全面，拥有一个巨大的模块生态。任何需求（如认证、缓存、重写等）几乎都能找到对应模块。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"nginxlnmp-的核心\"><a class=\"markdownIt-Anchor\" href=\"#nginxlnmp-的核心\">#</a> Nginx（LNMP 的核心）</h4>\n<ul>\n<li>\n<p><strong>工作模型</strong>：</p>\n<ul>\n<li>采用 <strong>事件驱动、异步非阻塞</strong> 的架构。它使用一个（或少量）工作进程，每个进程可以高效地处理数千个并发连接。</li>\n<li><strong>优点</strong>： 资源占用（尤其是内存）极低，在高并发场景下性能远超 Apache，特别适合静态内容处理、反向代理和负载均衡。</li>\n<li><strong>缺点</strong>： 架构相对复杂。</li>\n</ul>\n</li>\n<li>\n<p><strong>配置方式</strong>：</p>\n<ul>\n<li><strong>不支持  <code>.htaccess</code> </strong>。所有配置都必须集中在主配置文件或 <code>/etc/nginx/sites-available/</code>  这样的虚拟主机文件中，然后重载 Nginx 服务才能生效。</li>\n<li><strong>优点</strong>： 配置更集中，性能更高，因为不需要遍历目录查找配置文件。</li>\n<li><strong>缺点</strong>： 对共享主机用户不友好，修改配置需要服务器权限和重载服务。</li>\n</ul>\n</li>\n<li>\n<p><strong>处理 PHP 的方式（关键区别）</strong>：</p>\n<ul>\n<li>Nginx <strong>自身不能直接处理 PHP 等动态语言</strong>。它需要一个额外的处理器（如 PHP-FPM）。</li>\n<li>当用户请求一个 PHP 文件时，Nginx 会将请求<strong>反向代理</strong>给 PHP-FPM 进程进行处理，PHP-FPM 处理完毕后将结果返回给 Nginx，再由 Nginx 发送给用户。</li>\n<li>这种 “各司其职” 的架构反而更清晰、高效。</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"三-详细对比表格\"><a class=\"markdownIt-Anchor\" href=\"#三-详细对比表格\">#</a> 三、详细对比表格</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">特性</th>\n<th style=\"text-align:left\">LAMP (Apache)</th>\n<th style=\"text-align:left\">LNMP (Nginx)</th>\n<th style=\"text-align:left\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><strong>性能</strong></td>\n<td style=\"text-align:left\">处理动态内容稳定，但<strong>高并发下性能较差</strong></td>\n<td style=\"text-align:left\"><strong>高并发性能极佳</strong>，尤其擅长处理静态文件</td>\n<td style=\"text-align:left\">Nginx 的事件驱动模型在并发性能上具有先天优势</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>资源占用</strong></td>\n<td style=\"text-align:left\">相对较高（进程 / 线程模型）</td>\n<td style=\"text-align:left\"><strong>非常低</strong>（事件驱动模型）</td>\n<td style=\"text-align:left\">对于内存有限的 VPS 服务器，LNMP 优势明显</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>配置灵活性</strong></td>\n<td style=\"text-align:left\"><strong>高</strong>（支持.htaccess）</td>\n<td style=\"text-align:left\">较低（需修改主配置并重载）</td>\n<td style=\"text-align:left\">对于需要频繁修改.htaccess 的 CMS（如 WordPress），LAMP 更方便</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>静态内容处理</strong></td>\n<td style=\"text-align:left\">良好</td>\n<td style=\"text-align:left\"><strong>极快</strong></td>\n<td style=\"text-align:left\">Nginx 设计之初就是为解决 C10K 问题，静态文件响应速度一流</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>动态内容处理</strong></td>\n<td style=\"text-align:left\">直接通过模块（如 mod_php）处理</td>\n<td style=\"text-align:left\">需通过 PHP-FPM 等外部处理器</td>\n<td style=\"text-align:left\">LAMP 方式更 “一体化”，LNMP 方式更 “解耦”</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>安全性</strong></td>\n<td style=\"text-align:left\">良好，历史悠久，问题暴露充分</td>\n<td style=\"text-align:left\">良好，因设计简单，攻击面相对较小</td>\n<td style=\"text-align:left\">两者都非常安全，安全更多取决于运维人员的技术</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>学习曲线</strong></td>\n<td style=\"text-align:left\">较为简单，资料丰富</td>\n<td style=\"text-align:left\">配置语法独特，需要理解其工作流程</td>\n<td style=\"text-align:left\">有 Apache 基础的人需要适应 Nginx 的配置思维</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>适用场景</strong></td>\n<td style=\"text-align:left\">传统虚拟主机、共享主机、中小型网站、需要.htaccess 功能的项目</td>\n<td style=\"text-align:left\"><strong>高并发网站</strong>、API 服务器、静态资源服务器、反向代理 / 负载均衡器、VPS / 云服务器</td>\n<td style=\"text-align:left\"></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h3 id=\"四-如何选择\"><a class=\"markdownIt-Anchor\" href=\"#四-如何选择\">#</a> 四、如何选择？</h3>\n<ol>\n<li>\n<p><strong>选择 LAMP 的情况：</strong></p>\n<ul>\n<li>你使用的是传统的共享虚拟主机（cPanel 等面板通常内置 Apache）。</li>\n<li>你的网站严重依赖 <code>.htaccess</code>  文件（例如，使用了复杂的 WordPress 重写规则插件）。</li>\n<li>项目规模不大，并发用户数不高，更追求配置的便捷性。</li>\n<li>你对 Apache 非常熟悉。</li>\n</ul>\n</li>\n<li>\n<p><strong>选择 LNMP 的情况：</strong></p>\n<ul>\n<li>使用的是 VPS、独立服务器或云服务器，拥有 root 权限。</li>\n<li>网站<strong>预期有高并发访问量</strong>（如新闻门户、电商平台等）。</li>\n<li>服务器资源（内存）有限，需要尽可能优化性能。</li>\n<li>需要将服务器同时用作 Web 服务器和反向代理 / 负载均衡器。</li>\n<li>网站有大量静态资源（图片、CSS、JS）需要快速响应。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\">#</a> 总结</h3>\n<p>简单来说，可以这样理解：</p>\n<ul>\n<li><strong>LAMP</strong> 像一个<strong>全能型选手</strong>，开箱即用，配置灵活，非常成熟稳定，但在极限压力下（高并发）会显得吃力。</li>\n<li><strong>LNMP</strong> 像一个<strong>专项冠军</strong>，它在高并发和低资源消耗方面表现卓越，尤其适合现代 Web 架构，但需要更多的配置工作，灵活性稍差。</li>\n</ul>\n<p>如今，随着 Nginx 的普及，<strong>LNMP 架构已经成为大多数新项目和追求性能的运维人员的首选</strong>。甚至出现了一种混合架构：用 Nginx 作为前端反向代理处理静态请求，并将动态请求转发给后端的 Apache，结合两者的优点。但对于绝大多数场景，直接使用完整的 LNMP 栈是更优的选择。</p>\n",
            "tags": [
                "LAMP LNMP"
            ]
        }
    ]
}