{
    "version": "https://jsonfeed.org/version/1",
    "title": "Learning-Sharing-Recording • All posts by \"图床\" tag",
    "description": "CV Engineer",
    "home_page_url": "https://LZQ-CV.github.io",
    "items": [
        {
            "id": "https://lzq-cv.github.io/2025/09/26/%E4%BD%BF%E7%94%A8PICGO-%E9%98%BF%E9%87%8C%E4%BA%91OSS%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/",
            "url": "https://lzq-cv.github.io/2025/09/26/%E4%BD%BF%E7%94%A8PICGO-%E9%98%BF%E9%87%8C%E4%BA%91OSS%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/",
            "title": "使用PICGO-阿里云OSS搭建个人图床",
            "date_published": "2025-09-26T10:06:31.000Z",
            "content_html": "<p>使用阿里云 OSS 和 PicGo 搭建图床，可以让你非常方便地将本地图片自动上传到云端，并直接获取可用于博客、文档等处的图片链接。阿里云 OSS 还可以申请 3 个月免费试用。</p>\n<h3 id=\"配置阿里云oss\"><a class=\"markdownIt-Anchor\" href=\"#配置阿里云oss\">#</a> 配置阿里云 OSS</h3>\n<p>首先，我们需要在阿里云上创建存储空间（Bucket）并配置访问权限。</p>\n<ol>\n<li>\n<p><strong>创建 Bucket</strong></p>\n<ul>\n<li>登录阿里云控制台，进入<strong>对象存储 OSS</strong> 服务。</li>\n<li>点击<strong>创建 Bucket</strong>，填写 Bucket 名称（全局唯一），选择离你较近的<strong>地域</strong>。</li>\n<li><strong>读写权限</strong>务必设置为<strong>公共读</strong>，这样图片才能被外部访问。其他选项如存储类型等，保持 “标准存储” 默认值即可。</li>\n</ul>\n</li>\n<li>\n<p><strong>创建 RAM 子用户并授权</strong>（为了安全，不建议直接使用主账号 AccessKey）</p>\n<ul>\n<li>进入<strong>访问控制 RAM</strong> 控制台。</li>\n<li>创建一个子用户（例如命名为  <code>picgo-user</code> ），<strong>访问方式</strong>请勾选 <strong>“OpenAPI 调用访问”</strong> 。系统会自动为该子用户创建 AccessKey（即 AccessKey ID 和 AccessKey Secret），请务必妥善保存这两项信息，后续配置 PicGo 时需要用到。</li>\n<li>为这个子用户<strong>添加权限</strong>。建议直接授权系统策略  <code>AliyunOSSFullAccess</code> （管理对象存储服务 OSS 的权限），或者按需授予更小粒度的权限。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"安装与配置picgo\"><a class=\"markdownIt-Anchor\" href=\"#安装与配置picgo\">#</a> 安装与配置 PicGo</h3>\n<p>接下来，我们在电脑上配置 PicGo 客户端来连接 OSS。</p>\n<ol>\n<li>\n<p><strong>安装 PicGo</strong></p>\n<ul>\n<li>请前往 PicGo 的 GitHub Releases 页面<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL01vbHVuZXJmaW5uL1BpY0dvL3JlbGVhc2Vz\"> https://github.com/Molunerfinn/PicGo/releases</span> 下载并安装适合你操作系统的版本。</li>\n</ul>\n</li>\n<li>\n<p><strong>配置阿里云 OSS 图床</strong></p>\n<ul>\n<li>打开 PicGo 应用，在左侧<strong>图床设置</strong>中，找到并点击<strong>阿里云 OSS</strong>。</li>\n<li>根据获取的信息填写以下配置项：\n<ul>\n<li><code>AccessKey ID</code>  和  <code>AccessKey Secret</code> ：填入之前保存的子用户的 AccessKey 信息。</li>\n<li><code>Bucket</code> ：填写你创建的 Bucket 名称。</li>\n<li><code>存储区域</code> ：填写 Bucket 所在地域的<strong> Endpoint（访问域名）中的 “节点” 部分</strong>。例如，如果你的 Endpoint 是  <code>oss-cn-hangzhou.aliyuncs.com</code> ，这里就填  <code>oss-cn-hangzhou</code> 。你可以在 Bucket 的概览页面找到这个信息。</li>\n<li><code>存储路径</code> （可选）：可以指定一个文件夹来存放图片，例如  <code>blog/img/</code> 。如果不填，图片会保存在 Bucket 根目录。</li>\n<li><code>自定义域名</code> （可选）：如果你为 Bucket 配置了自定义加速域名（CNAME），可以在这里填写，例如  <code>https://img.example.com</code> 。</li>\n</ul>\n</li>\n<li>填写完毕后，点击<strong>确定</strong>或<strong>设为默认图床</strong>。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"验证上传与高级集成\"><a class=\"markdownIt-Anchor\" href=\"#验证上传与高级集成\">#</a> 验证上传与高级集成</h3>\n<ol>\n<li>\n<p><strong>验证图床是否正常工作</strong></p>\n<ul>\n<li>在 PicGo 的<strong>上传区</strong>，拖拽一张图片或点击选择文件，然后点击<strong>上传</strong>。</li>\n<li>上传成功后，PicGo 会自动将图片的 URL 链接复制到你的剪贴板，并会在相册中显示记录。你可以将链接粘贴到浏览器地址栏中访问，确认图片可以正常显示。</li>\n</ul>\n</li>\n<li>\n<p><strong>在 Typora 中集成 PicGo（实现自动上传）</strong></p>\n<ul>\n<li>如果你使用 Typora 编写 Markdown 文档，可以将其与 PicGo 无缝集成。打开 Typora，进入<strong>文件</strong> &gt; <strong>偏好设置</strong> &gt; <strong>图像</strong>。</li>\n<li>在上传服务设置中，选择 <strong>PicGo (app)</strong>，并在下方指定 PicGo 的安装路径。</li>\n<li>点击<strong>验证图片上传选项</strong>，如果提示成功，说明配置正确。之后在 Typora 中插入的本地图片在保存时便会自动上传到 OSS 并替换为网络链接。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"实用技巧与注意事项\"><a class=\"markdownIt-Anchor\" href=\"#实用技巧与注意事项\">#</a> 实用技巧与注意事项</h3>\n<p>为了让你的图床更安全、经济地运行，这里还有一些建议：</p>\n<ul>\n<li><strong>安全建议</strong>\n<ul>\n<li><strong>防盗链</strong>：在 OSS Bucket 的<strong>权限管理</strong> &gt; <strong>防盗链</strong>设置中，可以添加允许访问你图片的域名白名单（如你的博客域名、 <code>*.console.aliyun.com</code>  等），防止图片被其他网站盗用。</li>\n<li><strong>权限最小化</strong>：授予子用户的权限遵循最小权限原则，仅授予其必要的 OSS 管理权限。</li>\n</ul>\n</li>\n<li><strong>成本优化</strong>\n<ul>\n<li>阿里云 OSS 的费用主要包括存储容量、流量和请求次数。对于个人博客或小规模使用，消耗通常很低，甚至可以购买资源包来进一步降低成本。</li>\n</ul>\n</li>\n<li><strong>故障排查</strong>\n<ul>\n<li><strong>上传失败</strong>：首先检查 AccessKey、Bucket 名称、存储区域（尤其是区域后缀是否正确）是否填写无误。确保子用户已被正确授权。</li>\n<li><strong>图片无法访问</strong>：检查 Bucket 的读写权限是否为 “公共读”。如果使用了防盗链，请确认当前访问域名是否在白名单中。</li>\n</ul>\n</li>\n</ul>\n",
            "tags": [
                "图床"
            ]
        },
        {
            "id": "https://lzq-cv.github.io/2025/09/26/%E4%BD%BF%E7%94%A8PICGO-GitHub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/",
            "url": "https://lzq-cv.github.io/2025/09/26/%E4%BD%BF%E7%94%A8PICGO-GitHub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/",
            "title": "使用PICGO-GitHub搭建个人图床",
            "date_published": "2025-09-26T09:55:51.000Z",
            "content_html": "<p>通过 GitHub API 和 jsDelivr CDN 搭建图床，简单说就是<strong>用 GitHub 存图片，用 jsDelivr 加速访问</strong>。这个方案免费、可靠，对开发者尤其友好。</p>\n<h3 id=\"第一步准备工作\"><a class=\"markdownIt-Anchor\" href=\"#第一步准备工作\">#</a> 第一步：准备工作</h3>\n<ol>\n<li><strong>创建 GitHub 仓库</strong>：\n<ul>\n<li>登录 GitHub，点击右上角 “+” 号，选择 “New repository”。</li>\n<li>取一个清晰的仓库名（如  <code>my-image-bed</code> ）。</li>\n<li>仓库需设置为 <strong>Public</strong>（公开），因为 jsDelivr 无法加速私有仓库的资源。</li>\n<li>其他设置保持默认，点击 “Create repository”。</li>\n</ul>\n</li>\n<li><strong>生成 GitHub Personal Access Token (PAT)</strong>：\n<ul>\n<li>点击右上角头像 -&gt; “Settings” -&gt; 左侧 “Developer settings” -&gt; “Personal access tokens” -&gt; “Tokens (classic)” -&gt; “Generate new token (classic)”。</li>\n<li>为令牌添加一个<strong>备注</strong>（如  <code>For Image Bed</code> ）。</li>\n<li><strong>选择权限</strong>：务必勾选  <code>repo</code> （完全控制私有仓库）下的所有权限，这样才允许通过 API 管理仓库内的文件。</li>\n<li>生成后，<strong>务必立即复制并妥善保存</strong>这个令牌字符串，关闭页面后就无法再次查看。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"第二步配置上传工具-以-picgo-为例\"><a class=\"markdownIt-Anchor\" href=\"#第二步配置上传工具-以-picgo-为例\">#</a> 第二步：配置上传工具 (以 PicGo 为例)</h3>\n<p>手动上传和获取链接比较麻烦，使用工具可以自动化这个过程。<strong>PicGo</strong> 是一个很好的选择。</p>\n<ol>\n<li><strong>下载并安装 PicGo</strong>：从其 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL01vbHVuZXJmaW5uL1BpY0dvL3JlbGVhc2Vz\">GitHub Releases</span> 页面下载并安装。</li>\n<li><strong>安装 GitHub 图床插件</strong>：\n<ul>\n<li>打开 PicGo，在左侧找到 “插件设置”。</li>\n<li>搜索  <code>github-plus</code>  并安装。这个插件功能更丰富。</li>\n</ul>\n</li>\n<li><strong>配置图床设置</strong>：\n<ul>\n<li>在左侧 “图床设置” 中找到 “GitHubPlus”。</li>\n<li>按下表填写信息：</li>\n</ul>\n</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">配置项</th>\n<th style=\"text-align:left\">填写说明</th>\n<th style=\"text-align:left\">示例（需替换为你自己的信息）</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><strong>仓库名</strong></td>\n<td style=\"text-align:left\">你的 GitHub 用户名 / 仓库名</td>\n<td style=\"text-align:left\"><code>yourusername/my-image-bed</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>分支名</strong></td>\n<td style=\"text-align:left\">一般为  <code>main</code>  或  <code>master</code></td>\n<td style=\"text-align:left\"><code>main</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>Token</strong></td>\n<td style=\"text-align:left\">粘贴你刚才生成的 Personal Access Token</td>\n<td style=\"text-align:left\"><code>ghp_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>存储路径</strong></td>\n<td style=\"text-align:left\">可选。图片在仓库中的存放目录，如  <code>images/</code> 。若不填则保存在仓库根目录。</td>\n<td style=\"text-align:left\"><code>images/</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>自定义域名</strong></td>\n<td style=\"text-align:left\"><strong>非常重要</strong>！填写 jsDelivr 的加速域名，格式： <code>https://cdn.jsdelivr.net/gh/你的用户名/你的仓库名</code></td>\n<td style=\"text-align:left\"><code>https://cdn.jsdelivr.net/gh/yourusername/my-image-bed</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>设置提醒日期</strong></td>\n<td style=\"text-align:left\">可选。由于 PAT 可能有过期时间，建议在此设置提醒，以便及时更新 Token，避免上传失败。</td>\n<td style=\"text-align:left\">在 Token 过期前选择日期</td>\n</tr>\n</tbody>\n</table>\n<ol start=\"4\">\n<li><strong>设为默认图床并上传测试</strong>：配置完成后，将其设为默认图床，然后拖拽一张图片上传试试。成功后，PicGo 会自动将<strong>加速后的图片链接</strong>复制到你的剪贴板。</li>\n</ol>\n<h3 id=\"第三步获取-jsdelivr-加速链接\"><a class=\"markdownIt-Anchor\" href=\"#第三步获取-jsdelivr-加速链接\">#</a> 第三步：获取 jsDelivr 加速链接</h3>\n<p>无论你是否使用 PicGo 等工具，图片上传到 GitHub 仓库后，其 jsDelivr 的加速链接都遵循统一的格式：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/gh/你的GitHub用户名/你的仓库名@发布的版本号/文件路径</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong> <code>@发布的版本号</code> </strong>：这部分是可选的。可以是分支名（如  <code>@main</code> ）、具体的发布版本号（如  <code>@v1.0</code> ）或提交哈希值。<strong>如果不指定版本，默认会指向最新资源</strong>。\n<ul>\n<li><strong>最佳实践</strong>：对于图床，<strong>通常建议省略  <code>@版本号</code> </strong>，这样总能访问到最新上传的图片。例如：<br>\n <code>https://cdn.jsdelivr.net/gh/yourusername/my-image-bed/images/cat.jpg</code></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"注意事项\"><a class=\"markdownIt-Anchor\" href=\"#注意事项\">#</a> 注意事项</h3>\n<ul>\n<li><strong>仓库必须公开</strong>：jsDelivr <strong>无法</strong>加速私有仓库的资源。</li>\n<li><strong>文件大小限制</strong>：jsDelivr 建议文件大小控制在 20MB 以内，这对于绝大多数图片来说足够了。</li>\n<li><strong>缓存问题</strong>：jsDelivr 会对文件进行缓存以提升速度。这意味着如果你更新了 GitHub 仓库中的同名图片，可能需要等待几分钟到几小时缓存刷新后，通过 jsDelivr 链接才能看到变更。<strong>强制更新缓存的方法是在链接后添加特定版本号、分支名或哈希值</strong>。</li>\n<li><strong>Token 安全</strong>：你的 GitHub Token 相当于密码，<strong>切勿泄露</strong>。一旦泄露，应立即到 GitHub 设置中撤销它。</li>\n<li><strong>API 速率限制</strong>：GitHub API 有调用频率限制。对于个人使用通常不会触限，但如果是极高频率调用，需要注意。</li>\n</ul>\n",
            "tags": [
                "图床"
            ]
        },
        {
            "id": "https://lzq-cv.github.io/2025/09/26/%E4%BD%BF%E7%94%A8PICGO-CloudflarR2%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/",
            "url": "https://lzq-cv.github.io/2025/09/26/%E4%BD%BF%E7%94%A8PICGO-CloudflarR2%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/",
            "title": "使用PICGO-CloudflarR2搭建个人图床",
            "date_published": "2025-09-26T09:54:33.000Z",
            "content_html": "<h3 id=\"cloudflare-r2\"><a class=\"markdownIt-Anchor\" href=\"#cloudflare-r2\">#</a> Cloudflare R2</h3>\n<p>自己搭建图床既能掌控数据，又能在长期节省成本。Cloudflare R2 因其<strong>免费额度慷慨</strong>（每月 10GB 存储、100 万次 A 类操作、1000 万次 B 类操作）且<strong>出口流量全免</strong>，成为了一个非常不错的选择。</p>\n<h3 id=\"cloudflare-r2-免费额度\"><a class=\"markdownIt-Anchor\" href=\"#cloudflare-r2-免费额度\">#</a> Cloudflare R2 免费额度</h3>\n<p>首先，我们来了解一下 Cloudflare R2 的免费计划：</p>\n<table>\n<thead>\n<tr>\n<th>资源类型</th>\n<th>每月免费额度</th>\n<th>超额费率 (截至 2025 年)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>存储空间</strong></td>\n<td>10 GB</td>\n<td>$0.015 / GB</td>\n</tr>\n<tr>\n<td><strong>A 类操作</strong></td>\n<td>100 万次请求 (写入、列举等)</td>\n<td>$4.50 / 100 万次请求</td>\n</tr>\n<tr>\n<td><strong>B 类操作</strong></td>\n<td>1000 万次请求 (读取等)</td>\n<td>$0.36 / 100 万次请求</td>\n</tr>\n<tr>\n<td><strong>出口流量</strong></td>\n<td><strong>完全免费</strong></td>\n<td><strong>完全免费</strong></td>\n</tr>\n</tbody>\n</table>\n<p><strong>注意</strong>：A 类操作通常包括上传、列举文件等写入操作，而 B 类操作主要是下载、获取文件等读取操作。免费额度对于个人博客或小规模网站通常足够。</p>\n<h3 id=\"搭建步骤\"><a class=\"markdownIt-Anchor\" href=\"#搭建步骤\">#</a> 搭建步骤</h3>\n<h3 id=\"第一步准备工作\"><a class=\"markdownIt-Anchor\" href=\"#第一步准备工作\">#</a> 第一步：准备工作</h3>\n<ol>\n<li><strong>注册 Cloudflare 账号</strong>：访问 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9kYXNoLmNsb3VkZmxhcmUuY29tL3NpZ24tdXA=\">Cloudflare 官网</span> 并注册账号。</li>\n<li><strong>准备域名</strong>：需要一个<strong>已托管在 Cloudflare 上</strong>的域名（作为图床的最终访问域名）。你可以在 Cloudflare 添加现有的域名，或者注册新域名后将其 DNS 服务器改为 Cloudflare 指定的。</li>\n<li><strong>验证支付方式</strong>：虽然 R2 有免费额度，但 Cloudflare 仍需要你绑定一种支付方式（如信用卡或 PayPal）以验证身份。<strong>只要用量不超额，就不会产生费用</strong>。</li>\n</ol>\n<h3 id=\"第二步配置-cloudflare-r2\"><a class=\"markdownIt-Anchor\" href=\"#第二步配置-cloudflare-r2\">#</a> 第二步：配置 Cloudflare R2</h3>\n<ol>\n<li><strong>开通 R2 服务</strong>：\n<ul>\n<li>登录 Cloudflare 仪表板，在侧边栏找到 <strong>“R2”</strong> 并点击。</li>\n<li>按照提示完成支付方式的绑定以开通 R2。</li>\n</ul>\n</li>\n<li><strong>创建存储桶（Bucket）</strong>：\n<ul>\n<li>在 R2 页面点击 <strong>“创建存储桶”</strong>。</li>\n<li>填写存储桶名称（例如  <code>my-image-bed</code> ）。</li>\n<li><strong>地区（Region）</strong> 选择离你的目标用户较近的区域，例如  <code>亚太地区 (APAC)</code>  对国内访问更友好。</li>\n<li>其他设置保持默认，点击创建。</li>\n</ul>\n</li>\n<li><strong>启用公共访问权限</strong>：\n<ul>\n<li>创建成功后，进入该存储桶的 <strong>“设置”</strong> 页。</li>\n<li>找到 <strong>“公共访问”</strong> 选项，点击 <strong>“启用”</strong> 并确认。这将生成一个临时的  <code>r2.dev</code>  子域名用于访问文件。</li>\n<li><strong>（强烈推荐）使用自定义域名</strong>：临时的  <code>r2.dev</code>  域名有速率限制。在存储桶设置的 <strong>“自定义域”</strong> 部分，添加你已托管在 CF 的域名（例如  <code>img.yourdomain.com</code> ）。Cloudflare 会自动为你配置 DNS 记录。</li>\n</ul>\n</li>\n<li><strong>获取 API 凭证</strong>：\n<ul>\n<li>在仪表板左侧栏找到 <strong>“R2” &gt; “API 令牌”</strong>。</li>\n<li>点击 <strong>“创建 API 令牌”</strong>。</li>\n<li>选择 <strong>“编辑”</strong> 权限，并指定到你刚创建的存储桶。</li>\n<li>安全起见，可以设置令牌的 TTL（生存时间），对于长期使用的图床，可选择永久。</li>\n<li>创建成功后，<strong>务必妥善保存</strong>显示的  <code>访问密钥 ID</code>  和  <code>秘密访问密钥</code> ，它们只会显示一次。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"第三步配置图床管理工具以-picgo-为例\"><a class=\"markdownIt-Anchor\" href=\"#第三步配置图床管理工具以-picgo-为例\">#</a> 第三步：配置图床管理工具（以 PicGo 为例）</h3>\n<p>PicGo 是一个开源图床客户端，可以简化上传操作。</p>\n<ol>\n<li><strong>下载并安装 PicGo</strong>：\n<ul>\n<li>访问 PicGo 的 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL01vbHVuZXJmaW5uL1BpY0dvL3JlbGVhc2Vz\">GitHub Releases 页面</span>，下载并安装适合你操作系统的最新版本。</li>\n</ul>\n</li>\n<li><strong>安装 S3 插件</strong>：\n<ul>\n<li>由于 Cloudflare R2 兼容 S3 API，我们需要在 PicGo 中安装 S3 插件。</li>\n<li>打开 PicGo，进入 <strong>“插件设置”</strong>。</li>\n<li>搜索并安装  <code>picgo-plugin-s3</code>  插件。</li>\n</ul>\n</li>\n<li><strong>配置 PicGo</strong>：\n<ul>\n<li>安装插件后，在 <strong>“图床设置”</strong> 中找到 <strong>“Amazon S3”</strong> 进行配置。</li>\n<li>关键配置项如下（请根据你的实际情况填写）：</li>\n</ul>\n</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>配置项</th>\n<th>填写值说明</th>\n<th>示例（请替换为你自己的信息）</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>应用密钥 ID</strong></td>\n<td>填写你刚才保存的  <code>访问密钥 ID</code></td>\n<td><code>1a2b3c4d5e6f7g8h9i0j</code></td>\n</tr>\n<tr>\n<td><strong>应用密钥</strong></td>\n<td>填写你刚才保存的  <code>秘密访问密钥</code></td>\n<td><code>z0y1x2w3v4u5t6s7r8q9p...</code></td>\n</tr>\n<tr>\n<td><strong>存储桶名</strong></td>\n<td>你创建的存储桶名称</td>\n<td><code>my-image-bed</code></td>\n</tr>\n<tr>\n<td><strong>存储区域</strong></td>\n<td>R2 无需填写特定区域，可填写  <code>auto</code>  或留空</td>\n<td><code>auto</code></td>\n</tr>\n<tr>\n<td><strong>自定义节点</strong></td>\n<td>填写你的 S3 API 端点（可在 R2 的 API 令牌页面找到）</td>\n<td><code>https://xxx.r2.cloudflarestorage.com</code></td>\n</tr>\n<tr>\n<td><strong>自定义域名</strong></td>\n<td><strong>填写你连接到存储桶的自定义域名</strong>，用于生成图片链接</td>\n<td><code>https://img.yourdomain.com</code></td>\n</tr>\n<tr>\n<td><strong>文件路径</strong></td>\n<td>定义图片在存储桶中的存储路径结构（可选，但建议设置以保持整洁）</td>\n<td><code>{year}/{month}/{day}/{fileName}</code></td>\n</tr>\n<tr>\n<td><strong>ACL 访问控制列表</strong></td>\n<td>必须设置为  <code>public-read</code> ，这样图片链接才能被公开访问</td>\n<td><code>public-read</code></td>\n</tr>\n</tbody>\n</table>\n<p><strong>提示</strong>： <code>{year}</code> ,  <code>{month}</code> ,  <code>{day}</code> ,  <code>{fileName}</code>  是 PicGo 的<strong>变量</strong>，会自动替换为实际值。</p>\n<ol>\n<li><strong>设为默认图床并上传测试</strong>：\n<ul>\n<li>配置完成后，可以点击 <strong>“设为默认图床”</strong>。</li>\n<li>在 <strong>“上传区”</strong> 拖拽或选择一张图片进行上传。</li>\n<li>上传成功后，PicGo 会自动将图片的 Markdown 链接复制到剪贴板。你可以粘贴到文本编辑器中测试一下是否能正常访问。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"第四步访问优化与安全设置可选但重要\"><a class=\"markdownIt-Anchor\" href=\"#第四步访问优化与安全设置可选但重要\">#</a> 第四步：访问优化与安全设置（可选但重要）</h3>\n<p>为了让图床更高效、安全，建议进行如下设置：</p>\n<ol>\n<li><strong>配置缓存规则</strong>：利用 Cloudflare CDN 缓存图片，减少回源请求，提升速度并节省操作次数。\n<ul>\n<li>在 Cloudflare 仪表板中，进入你的<strong>域名</strong>（而非 R2）。</li>\n<li>转到 <strong>“规则” &gt; “缓存规则”</strong>。</li>\n<li>创建一条新规则，URL 填写  <code>img.yourdomain.com/*</code> （你的图床域名）。</li>\n<li>添加设置：<strong>缓存级别</strong> - 缓存所有内容。</li>\n<li>添加设置：<strong>边缘缓存 TTL</strong> - 设置为一个较长的时间，例如 “1 个月”。</li>\n</ul>\n</li>\n<li><strong>设置防盗链（WAF）</strong>：防止其他网站直接链接你的图片，消耗你的流量和请求次数。\n<ul>\n<li>在域名的 <strong>“安全性” &gt; “WAF”</strong> 中创建自定义规则。</li>\n<li>编写规则，例如： <code>(http.referer does not contain &quot;yourdomain.com&quot;) and (http.request.uri.path contains &quot;/images/&quot;)</code> ，操作选择 “阻止”。这表示仅允许来自你自己域名（ <code>yourdomain.com</code> ）的请求访问图片目录。</li>\n</ul>\n</li>\n<li><strong>配置 CORS（跨域资源共享）</strong>：如果你的图床图片需要被不同域名的网站引用（例如你的主站、CDN 等），需要在存储桶设置中配置 CORS。\n<ul>\n<li>在存储桶的 <strong>“设置”</strong> 中找到 <strong>“CORS 策略”</strong>。</li>\n<li>添加策略，允许所需域名的  <code>GET</code>  请求。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"总结与提醒\"><a class=\"markdownIt-Anchor\" href=\"#总结与提醒\">#</a> 总结与提醒</h3>\n<p>通过以上步骤，你应该已经成功搭建了一个基于 Cloudflare R2 的免费图床。它<strong>免费额度充足</strong>、<strong>性能可靠</strong>，并且通过 PicGo 可以<strong>非常便捷地上传和管理图片</strong>。</p>\n<p>最后请注意：</p>\n<ul>\n<li><strong>保管好 API 令牌</strong>：如同密码，切勿泄露。</li>\n<li><strong>关注用量</strong>：定期在 Cloudflare 仪表板检查 R2 的使用情况，确保在免费额度内。</li>\n<li><strong>备份重要图片</strong>：虽然 R2 很可靠，但对于极其重要的图片，建议额外备份。</li>\n</ul>\n",
            "tags": [
                "图床"
            ]
        },
        {
            "id": "https://lzq-cv.github.io/2025/09/26/%E5%85%8D%E8%B4%B9%E5%9B%BE%E5%BA%8A%E8%B8%A9%E5%9D%91/",
            "url": "https://lzq-cv.github.io/2025/09/26/%E5%85%8D%E8%B4%B9%E5%9B%BE%E5%BA%8A%E8%B8%A9%E5%9D%91/",
            "title": "免费图床踩坑",
            "date_published": "2025-09-26T09:52:04.000Z",
            "content_html": "<h3 id=\"踩坑\"><a class=\"markdownIt-Anchor\" href=\"#踩坑\">#</a> 踩坑</h3>\n<p>免费的图床是真的不稳定，上传的图片随时都有被清除的可能，想要长期使用还是需要自己搭建图床。但是，我对图床需求又不是特别多，只为博客网站提供图片源仅此而已。花钱去买阿里云 OSS 和腾讯云 COS 的云存储服务，又不太值。查了一些免费图床搭建方法，目前就 2 种比较推荐的：</p>\n<p>方法 1：CloudflareR2+PICGO</p>\n<p>方法 2：Github+PICGO</p>\n<h3 id=\"临时使用的免费图床\"><a class=\"markdownIt-Anchor\" href=\"#临时使用的免费图床\">#</a> 临时使用的免费图床：</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9pbWcuMTMxMjEzLnh5ei8=\">图床</span></p>\n",
            "tags": [
                "图床"
            ]
        }
    ]
}